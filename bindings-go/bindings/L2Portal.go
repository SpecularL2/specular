// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// TypesCrossDomainMessage is an auto generated low-level Go binding around an user-defined struct.
type TypesCrossDomainMessage struct {
	Version  *big.Int
	Nonce    *big.Int
	Sender   common.Address
	Target   common.Address
	Value    *big.Int
	GasLimit *big.Int
	Data     []byte
}

// L2PortalMetaData contains all meta data concerning the L2Portal contract.
var L2PortalMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"depositHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"DepositFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalHash\",\"type\":\"bytes32\"}],\"name\":\"WithdrawalInitiated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"donateETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"l1BlockNumber\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.CrossDomainMessage\",\"name\":\"depositTx\",\"type\":\"tuple\"},{\"internalType\":\"bytes[]\",\"name\":\"depositAccountProof\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"depositProof\",\"type\":\"bytes[]\"}],\"name\":\"finalizeDepositTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"finalizedDeposits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1PortalAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initiateWithdrawal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"initiatedWithdrawals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1PortalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Sender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e7565b600154610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60015460ff90811614620000e5576001805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516136b16200011f600039600081816104370152818161048001528181610973015281816109b30152610a4601526136b16000f3fe60806040526004361061010d5760003560e01c80638456cb5911610095578063b7558b7a11610064578063b7558b7a146102b5578063bf286e39146102d5578063c2b3e5ac14610305578063c4d66de814610318578063f2fde38b1461033857600080fd5b80638456cb591461026c5780638b4c40b01461012f5780638da5cb5b14610281578063affed0e01461029f57600080fd5b80634f1ef286116100dc5780634f1ef286146101d157806352d1902d146101e45780635c975abb146102075780635dec2aa41461021f578063715018a61461025757600080fd5b806315efc4ed146101365780633659cfe61461017c57806337983d291461019c5780633f4ba83a146101bc57600080fd5b366101315761012f33620186a060405180602001604052806000815250610358565b005b600080fd5b34801561014257600080fd5b50610167610151366004612ef5565b60ff602081905260009182526040909120541681565b60405190151581526020015b60405180910390f35b34801561018857600080fd5b5061012f610197366004612f2a565b61042d565b3480156101a857600080fd5b5061012f6101b7366004613071565b610515565b3480156101c857600080fd5b5061012f610957565b61012f6101df366004613187565b610969565b3480156101f057600080fd5b506101f9610a39565b604051908152602001610173565b34801561021357600080fd5b5060ca5460ff16610167565b34801561022b57600080fd5b5060fc5461023f906001600160a01b031681565b6040516001600160a01b039091168152602001610173565b34801561026357600080fd5b5061012f610aec565b34801561027857600080fd5b5061012f610afe565b34801561028d57600080fd5b506098546001600160a01b031661023f565b3480156102ab57600080fd5b506101f960fe5481565b3480156102c157600080fd5b5060fd5461023f906001600160a01b031681565b3480156102e157600080fd5b506101676102f0366004612ef5565b60006020819052908152604090205460ff1681565b61012f6103133660046131d5565b610358565b34801561032457600080fd5b5061012f610333366004612f2a565b610b0e565b34801561034457600080fd5b5061012f610353366004612f2a565b610c73565b610360610ce9565b60006103b26040518060e001604052806000815260200160fe548152602001336001600160a01b03168152602001866001600160a01b0316815260200134815260200185815260200184815250610d2f565b60008181526020819052604090819020805460ff1916600117905560fe5490519192506001600160a01b038616913391907f2e54ae47a8d51f81cc8f2ff66f175741c8af3e1cbe4f87d675aecf42d4d5103f9061041690349089908990899061327c565b60405180910390a4505060fe805460010190555050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361047e5760405162461bcd60e51b8152600401610475906132ac565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104c7600080516020613635833981519152546001600160a01b031690565b6001600160a01b0316146104ed5760405162461bcd60e51b8152600401610475906132f8565b6104f681610d7d565b6040805160008082526020820190925261051291839190610d8d565b50565b61051d610ce9565b60fd546001600160a01b031661dead146105985760405162461bcd60e51b815260206004820152603660248201527f4c32506f7274616c3a2063616e206f6e6c792074726967676572206f6e65206460448201527532b837b9b4ba103832b9103a3930b739b0b1ba34b7b760511b6064820152608401610475565b306001600160a01b031685606001516001600160a01b0316036106235760405162461bcd60e51b815260206004820152603960248201527f4c32506f7274616c3a20796f752063616e6e6f742073656e64206d657373616760448201527f657320746f2074686520706f7274616c20636f6e7472616374000000000000006064820152608401610475565b600061062e86610d2f565b600081815260ff602081905260409091205491925016156106a65760405162461bcd60e51b815260206004820152602c60248201527f4c32506f7274616c3a206465706f7369742068617320616c726561647920626560448201526b195b88199a5b985b1a5e995960a21b6064820152608401610475565b60006010601560991b016313c3fb7b6106c16101008b61335a565b6040516001600160e01b031960e084901b16815260ff9091166004820152602401602060405180830381865afa1580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610723919061336e565b60fc54909150600090610749906001600160a01b031683610744898b613387565b610efd565b905061075f838261075a8789613387565b610fa3565b6107bd5760405162461bcd60e51b815260206004820152602960248201527f4c32506f7274616c3a20696e76616c6964206465706f73697420696e636c757360448201526834b7b710383937b7b360b91b6064820152608401610475565b600083815260ff60205260409020805460ff1916600117905560a08801516107e890614e2090613421565b5a101561084e5760405162461bcd60e51b815260206004820152602e60248201527f4c32506f7274616c3a20696e73756666696369656e742067617320746f20666960448201526d1b985b1a5e994819195c1bdcda5d60921b6064820152608401610475565b876040015160fd60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600061089789606001518a60a001518b608001518c60c00151611012565b9050806108f95760405162461bcd60e51b815260206004820152602a60248201527f4c32506f7274616c3a2063616c6c20746f2074617267657420636f6e747261636044820152691d081c995d995c9d195960b21b6064820152608401610475565b60fd80546001600160a01b03191661dead17905560405184907fc8eb69c722facbe5fd7901674d0516c7d657c80d00809200070b150a0878681c9061094390841515815260200190565b60405180910390a250505050505050505050565b61095f61102e565b610967611088565b565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109b15760405162461bcd60e51b8152600401610475906132ac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109fa600080516020613635833981519152546001600160a01b031690565b6001600160a01b031614610a205760405162461bcd60e51b8152600401610475906132f8565b610a2982610d7d565b610a3582826001610d8d565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ad95760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610475565b5060008051602061363583398151915290565b610af461102e565b61096760006110da565b610b0661102e565b61096761112c565b600154610100900460ff1615808015610b2b57506001805460ff16105b80610b445750303b158015610b4457506001805460ff16145b610ba75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610475565b6001805460ff1916811790558015610bc9576001805461ff0019166101001790555b6001600160a01b038216610bf05760405163d92e233d60e01b815260040160405180910390fd5b60fc80546001600160a01b0384166001600160a01b03199182161790915560fd805490911661dead179055610c23611169565b610c2b611198565b8015610a35576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b610c7b61102e565b6001600160a01b038116610ce05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610475565b610512816110da565b60ca5460ff16156109675760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610475565b6020808201516040808401516060850151608086015160a087015160c08801519451600097610d6097969101613434565b604051602081830303815290604052805190602001209050919050565b610d8561102e565b6105126111bf565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610dc557610dc083611208565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610e1f575060408051601f3d908101601f19168201909252610e1c9181019061336e565b60015b610e825760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610475565b6000805160206136358339815191528114610ef15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610475565b50610dc08383836112a4565b6040516bffffffffffffffffffffffff19606085901b16602082015260009081908190610f3d9060340160405160208183030381529060405285876112cf565b9150915081610f8e5760405162461bcd60e51b815260206004820152601f60248201527f4c32506f7274616c3a20696e76616c6964206163636f756e742070726f6f66006044820152606401610475565b610f97816112f8565b925050505b9392505050565b60408051602081018590526000918101829052819060600160408051601f1981840301815282825280516020918201209083018190529250611009910160408051601f1981840301815282820190915260018252600160f81b6020830152908587611338565b95945050505050565b600080600080845160208601878a8af19150505b949350505050565b6098546001600160a01b031633146109675760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610475565b6110906111bf565b60ca805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b609880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611134610ce9565b60ca805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110bd3390565b600154610100900460ff166111905760405162461bcd60e51b815260040161047590613480565b61096761135c565b600154610100900460ff166109675760405162461bcd60e51b815260040161047590613480565b60ca5460ff166109675760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610475565b6001600160a01b0381163b6112755760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610475565b60008051602061363583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6112ad8361138c565b6000825111806112ba5750805b15610dc0576112c983836113cc565b50505050565b6000606060006112de866113fa565b90506112eb81868661142c565b9250925050935093915050565b60008061130483611518565b905060006113118261154b565b905060006110098260028151811061132b5761132b6134cb565b6020026020010151611661565b600080611344866113fa565b90506113528186868661168f565b9695505050505050565b600154610100900460ff166113835760405162461bcd60e51b815260040161047590613480565b610967336110da565b61139581611208565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606113f18383604051806060016040528060278152602001613655602791396116cc565b90505b92915050565b6060818051906020012060405160200161141691815260200190565b6040516020818303038152906040529050919050565b60006060600061143b8561173a565b9050600080600061144d848a89611829565b815192955090935091501580806114615750815b6114bb5760405162461bcd60e51b815260206004820152602560248201527f4d65726b6c65547269653a2070726f76696465642070726f6f6620697320696e6044820152641d985b1a5960da1b6064820152608401610475565b6000816114d75760405180602001604052806000815250611503565b611503866114e66001886134e1565b815181106114f6576114f66134cb565b6020026020010151611dd2565b805115159c909b509950505050505050505050565b60408051808201909152600080825260208201525b50604080518082019091528151815260209182019181019190915290565b606061155682611e09565b61155f57600080fd5b600061156a83611e44565b905060008167ffffffffffffffff81111561158757611587612f45565b6040519080825280602002602001820160405280156115cc57816020015b60408051808201909152600080825260208201528152602001906001900390816115a55790505b50905060006115de8560200151611ec9565b85602001516115ed9190613421565b90506000805b848110156116565761160483611f44565b915060405180604001604052808381526020018481525084828151811061162d5761162d6134cb565b60209081029190910101526116428284613421565b92508061164e816134f4565b9150506115f3565b509195945050505050565b805160009060211461167257600080fd5b600080836020015160016116869190613421565b51949350505050565b600080600061169f87868661142c565b915091508180156116c157508051602080830191909120875191880191909120145b979650505050505050565b6060600080856001600160a01b0316856040516116e9919061350d565b600060405180830381855af49150503d8060008114611724576040519150601f19603f3d011682016040523d82523d6000602084013e611729565b606091505b5091509150610f9786838387611fed565b805160609060008167ffffffffffffffff81111561175a5761175a612f45565b60405190808252806020026020018201604052801561179f57816020015b60408051808201909152606080825260208201528152602001906001900390816117785790505b50905060005b828110156118215760405180604001604052808683815181106117ca576117ca6134cb565b602002602001015181526020016117f98784815181106117ec576117ec6134cb565b6020026020010151612066565b81525082828151811061180e5761180e6134cb565b60209081029190910101526001016117a5565b509392505050565b6000606081808061183987612079565b905060008660405160200161185091815260200190565b60408051601f19818403018152828201909152606080835260208301529150600090819060005b8c51811015611d70578c8181518110611892576118926134cb565b6020026020010151915082846118a89190613421565b93506118b5600188613421565b9650836000036119565781518051602091820120604051611905926118df92910190815260200190565b604051602081830303815290604052868051602091820120825192909101919091201490565b6119515760405162461bcd60e51b815260206004820152601d60248201527f4d65726b6c65547269653a20696e76616c696420726f6f7420686173680000006044820152606401610475565b611a4c565b8151516020116119dc5781518051602091820120604051611980926118df92910190815260200190565b6119515760405162461bcd60e51b815260206004820152602760248201527f4d65726b6c65547269653a20696e76616c6964206c6172676520696e7465726e6044820152660c2d840d0c2e6d60cb1b6064820152608401610475565b815185516020808801919091208251919092012014611a4c5760405162461bcd60e51b815260206004820152602660248201527f4d65726b6c65547269653a20696e76616c696420696e7465726e616c206e6f646044820152650ca40d0c2e6d60d31b6064820152608401610475565b611a5860106001613421565b82602001515103611aca5785518414611d70576000868581518110611a7f57611a7f6134cb565b602001015160f81c60f81b60f81c9050600083602001518260ff1681518110611aaa57611aaa6134cb565b60200260200101519050611abd81612194565b9650600194505050611d5e565b600282602001515103611d05576000611ae2836121b9565b9050600081600081518110611af957611af96134cb565b016020015160f81c90506000611b10600283613529565b611b1b90600261354b565b90506000611b2c848360ff166121dd565b90506000611b3a8b8a6121dd565b90506000611b488383612213565b9050825182511015611bc25760405162461bcd60e51b815260206004820152603960248201527f4d65726b6c65547269653a20696e76616c6964206b6579206c656e677468206660448201527f6f72206c656166206f7220657874656e73696f6e206e6f6465000000000000006064820152608401610475565b60ff851660021480611bd7575060ff85166003145b15611c2557808351148015611bec5750808251145b15611bfe57611bfb818b613421565b99505b604051806040016040528060018152602001600160ff1b8152509a50505050505050611d70565b60ff85161580611c38575060ff85166001145b15611ca25782518114611c6c57604051806040016040528060018152602001600160ff1b8152509a50505050505050611d70565b611c938860200151600181518110611c8657611c866134cb565b6020026020010151612194565b9a509750611d5e945050505050565b60405162461bcd60e51b815260206004820152603260248201527f4d65726b6c65547269653a2072656365697665642061206e6f64652077697468604482015271040c2dc40eadcd6dcdeeedc40e0e4caccd2f60731b6064820152608401610475565b60405162461bcd60e51b815260206004820152602860248201527f4d65726b6c65547269653a20726563656976656420616e20756e706172736561604482015267626c65206e6f646560c01b6064820152608401610475565b80611d68816134f4565b915050611877565b5085611d7c86856121dd565b6040805180820190915260018152600160ff1b6020918201528651908701207f56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4211498509850985050505050505093509350939050565b602081015180516060916113f491611dec906001906134e1565b81518110611dfc57611dfc6134cb565b6020026020010151612292565b80516000908103611e1c57506000919050565b6020820151805160001a9060c0821015611e3a575060009392505050565b5060019392505050565b80516000908103611e5757506000919050565b600080611e678460200151611ec9565b8460200151611e769190613421565b9050600084600001518560200151611e8e9190613421565b90505b80821015611ec057611ea282611f44565b611eac9083613421565b915082611eb8816134f4565b935050611e91565b50909392505050565b8051600090811a6080811015611ee25750600092915050565b60b8811080611efd575060c08110801590611efd575060f881105b15611f0b5750600192915050565b60c0811015611f3857611f20600160b861354b565b611f2d9060ff16826134e1565b610f9c906001613421565b611f20600160f861354b565b80516000908190811a6080811015611f5f5760019150611fe6565b60b8811015611f8557611f736080826134e1565b611f7e906001613421565b9150611fe6565b60c0811015611fb25760b78103600185019450806020036101000a85510460018201810193505050611fe6565b60f8811015611fc657611f7360c0826134e1565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b6060831561205c578251600003612055576001600160a01b0385163b6120555760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610475565b5081611026565b61102683836123b5565b60606113f4612074836123df565b612414565b8051606090600061208b826002613564565b67ffffffffffffffff8111156120a3576120a3612f45565b6040519080825280601f01601f1916602001820160405280156120cd576020820181803683370190505b5090506000805b8381101561218a578581815181106120ee576120ee6134cb565b6020910101516001600160f81b03198116925060041c60ff60f41b1683612116836002613564565b81518110612126576121266134cb565b60200101906001600160f81b031916908160001a905350600f60f81b821683612150836002613564565b61215b906001613421565b8151811061216b5761216b6134cb565b60200101906001600160f81b031916908160001a9053506001016120d4565b5090949350505050565b606060208260000151106121b0576121ab82612292565b6113f4565b6113f482612639565b60606113f46121d88360200151600081518110611dfc57611dfc6134cb565b612079565b6060825182106121fc57506040805160208101909152600081526113f4565b6113f1838384865161220e91906134e1565b61264f565b6000806000835185511061222857835161222b565b84515b90505b8082108015612282575083828151811061224a5761224a6134cb565b602001015160f81c60f81b6001600160f81b031916858381518110612271576122716134cb565b01602001516001600160f81b031916145b156118215781600101915061222e565b606060008060006122a285612791565b9194509250905060008160018111156122bd576122bd61357b565b146123305760405162461bcd60e51b815260206004820152603960248201527f524c505265616465723a206465636f646564206974656d207479706520666f7260448201527f206279746573206973206e6f7420612064617461206974656d000000000000006064820152608401610475565b61233a8284613421565b8551146123a65760405162461bcd60e51b815260206004820152603460248201527f524c505265616465723a2062797465732076616c756520636f6e7461696e732060448201527330b71034b73b30b634b2103932b6b0b4b73232b960611b6064820152608401610475565b61100985602001518484612e54565b8151156123c55781518083602001fd5b8060405162461bcd60e51b81526004016104759190613591565b6040805180820190915260008082526020820152600082511161152d5760405162461bcd60e51b8152600401610475906135a4565b6060600080600061242485612791565b91945092509050600181600181111561243f5761243f61357b565b146124b25760405162461bcd60e51b815260206004820152603860248201527f524c505265616465723a206465636f646564206974656d207479706520666f7260448201527f206c697374206973206e6f742061206c697374206974656d00000000000000006064820152608401610475565b84516124be8385613421565b146125265760405162461bcd60e51b815260206004820152603260248201527f524c505265616465723a206c697374206974656d2068617320616e20696e76616044820152713634b2103230ba30903932b6b0b4b73232b960711b6064820152608401610475565b6040805160208082526104208201909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161253f5790505090506000845b875181101561262d576000806125b26040518060400160405280858d6000015161259691906134e1565b8152602001858d602001516125ab9190613421565b9052612791565b5091509150604051806040016040528083836125ce9190613421565b8152602001848c602001516125e39190613421565b8152508585815181106125f8576125f86134cb565b602090810291909101015261260e600185613421565b935061261a8183613421565b6126249084613421565b9250505061256c565b50815295945050505050565b60606113f4826020015160008460000151612e54565b60608182601f0110156126955760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610475565b8282840110156126d85760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610475565b8183018451101561271f5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610475565b60608215801561273e5760405191506000825260208201604052612788565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561277757805183526020928301920161275f565b5050858452601f01601f1916604052505b50949350505050565b6000806000808460000151116127b95760405162461bcd60e51b8152600401610475906135a4565b6020840151805160001a607f81116127de576000600160009450945094505050612e4d565b60b7811161293b5760006127f36080836134e1565b9050808760000151116128735760405162461bcd60e51b815260206004820152604e602482015260008051602061361583398151915260448201527f742062652067726561746572207468616e20737472696e67206c656e6774682060648201526d2873686f727420737472696e672960901b608482015260a401610475565b6001838101516001600160f81b03191690821415806128a05750600160ff1b6001600160f81b0319821610155b6129285760405162461bcd60e51b815260206004820152604d60248201527f524c505265616465723a20696e76616c6964207072656669782c2073696e676c60448201527f652062797465203c203078383020617265206e6f74207072656669786564202860648201526c73686f727420737472696e672960981b608482015260a401610475565b5060019550935060009250612e4d915050565b60bf8111612b7c57600061295060b7836134e1565b9050808760000151116129d35760405162461bcd60e51b8152602060048201526051602482015260008051602061361583398151915260448201527f74206265203e207468616e206c656e677468206f6620737472696e67206c656e60648201527067746820286c6f6e6720737472696e672960781b608482015260a401610475565b60018301516001600160f81b0319166000819003612a5a5760405162461bcd60e51b815260206004820152604a602482015260008051602061361583398151915260448201527f74206e6f74206861766520616e79206c656164696e67207a65726f7320286c6f6064820152696e6720737472696e672960b01b608482015260a401610475565b600184015160088302610100031c60378111612add5760405162461bcd60e51b8152602060048201526048602482015260008051602061361583398151915260448201527f742062652067726561746572207468616e20353520627974657320286c6f6e6760648201526720737472696e672960c01b608482015260a401610475565b612ae78184613421565b895111612b5f5760405162461bcd60e51b815260206004820152604c602482015260008051602061361583398151915260448201527f742062652067726561746572207468616e20746f74616c206c656e677468202860648201526b6c6f6e6720737472696e672960a01b608482015260a401610475565b612b6a836001613421565b9750955060009450612e4d9350505050565b60f78111612c1e576000612b9160c0836134e1565b905080876000015111612c0d5760405162461bcd60e51b815260206004820152604a602482015260008051602061361583398151915260448201527f742062652067726561746572207468616e206c697374206c656e677468202873606482015269686f7274206c6973742960b01b608482015260a401610475565b600195509350849250612e4d915050565b6000612c2b60f7836134e1565b905080876000015111612caa5760405162461bcd60e51b815260206004820152604d602482015260008051602061361583398151915260448201527f74206265203e207468616e206c656e677468206f66206c697374206c656e677460648201526c6820286c6f6e67206c6973742960981b608482015260a401610475565b60018301516001600160f81b0319166000819003612d2f5760405162461bcd60e51b8152602060048201526048602482015260008051602061361583398151915260448201527f74206e6f74206861766520616e79206c656164696e67207a65726f7320286c6f6064820152676e67206c6973742960c01b608482015260a401610475565b600184015160088302610100031c60378111612db05760405162461bcd60e51b8152602060048201526046602482015260008051602061361583398151915260448201527f742062652067726561746572207468616e20353520627974657320286c6f6e67606482015265206c6973742960d01b608482015260a401610475565b612dba8184613421565b895111612e305760405162461bcd60e51b815260206004820152604a602482015260008051602061361583398151915260448201527f742062652067726561746572207468616e20746f74616c206c656e67746820286064820152696c6f6e67206c6973742960b01b608482015260a401610475565b612e3b836001613421565b9750955060019450612e4d9350505050565b9193909250565b606060008267ffffffffffffffff811115612e7157612e71612f45565b6040519080825280601f01601f191660200182016040528015612e9b576020820181803683370190505b50905082600003612ead579050610f9c565b6000612eb98587613421565b90506020820160005b85811015612eda578281015182820152602001612ec2565b85811115612ee9576000868301525b50919695505050505050565b600060208284031215612f0757600080fd5b5035919050565b80356001600160a01b0381168114612f2557600080fd5b919050565b600060208284031215612f3c57600080fd5b6113f182612f0e565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715612f7e57612f7e612f45565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612fad57612fad612f45565b604052919050565b600082601f830112612fc657600080fd5b813567ffffffffffffffff811115612fe057612fe0612f45565b612ff3601f8201601f1916602001612f84565b81815284602083860101111561300857600080fd5b816020850160208301376000918101602001919091529392505050565b60008083601f84011261303757600080fd5b50813567ffffffffffffffff81111561304f57600080fd5b6020830191508360208260051b850101111561306a57600080fd5b9250929050565b6000806000806000806080878903121561308a57600080fd5b86359550602087013567ffffffffffffffff808211156130a957600080fd5b9088019060e0828b0312156130bd57600080fd5b6130c5612f5b565b82358152602083013560208201526130df60408401612f0e565b60408201526130f060608401612f0e565b60608201526080830135608082015260a083013560a082015260c08301358281111561311b57600080fd5b6131278c828601612fb5565b60c0830152509650604089013591508082111561314357600080fd5b61314f8a838b01613025565b9096509450606089013591508082111561316857600080fd5b5061317589828a01613025565b979a9699509497509295939492505050565b6000806040838503121561319a57600080fd5b6131a383612f0e565b9150602083013567ffffffffffffffff8111156131bf57600080fd5b6131cb85828601612fb5565b9150509250929050565b6000806000606084860312156131ea57600080fd5b6131f384612f0e565b925060208401359150604084013567ffffffffffffffff81111561321657600080fd5b61322286828701612fb5565b9150509250925092565b60005b8381101561324757818101518382015260200161322f565b50506000910152565b6000815180845261326881602086016020860161322c565b601f01601f19169290920160200192915050565b84815283602082015260806040820152600061329b6080830185613250565b905082606083015295945050505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b60008261336957613369613344565b500690565b60006020828403121561338057600080fd5b5051919050565b600067ffffffffffffffff808411156133a2576133a2612f45565b8360051b60206133b3818301612f84565b8681529185019181810190368411156133cb57600080fd5b865b848110156133ff578035868111156133e55760008081fd5b6133f136828b01612fb5565b8452509183019183016133cd565b50979650505050505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156113f4576113f461340b565b8681526001600160a01b03868116602083015285166040820152606081018490526080810183905260c060a0820181905260009061347490830184613250565b98975050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b818103818111156113f4576113f461340b565b6000600182016135065761350661340b565b5060010190565b6000825161351f81846020870161322c565b9190910192915050565b600060ff83168061353c5761353c613344565b8060ff84160691505092915050565b60ff82811682821603908111156113f4576113f461340b565b80820281158282048414176113f4576113f461340b565b634e487b7160e01b600052602160045260246000fd5b6020815260006113f16020830184613250565b6020808252604a908201527f524c505265616465723a206c656e677468206f6620616e20524c50206974656d60408201527f206d7573742062652067726561746572207468616e207a65726f20746f206265606082015269206465636f6461626c6560b01b608082015260a0019056fe524c505265616465723a206c656e677468206f6620636f6e74656e74206d7573360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ee54abfb8b0323d1a99b802dcc1ca4293556baadcd8bdbb134e9e3ffe59c8f8464736f6c63430008110033",
}

// L2PortalABI is the input ABI used to generate the binding from.
// Deprecated: Use L2PortalMetaData.ABI instead.
var L2PortalABI = L2PortalMetaData.ABI

// L2PortalBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use L2PortalMetaData.Bin instead.
var L2PortalBin = L2PortalMetaData.Bin

// DeployL2Portal deploys a new Ethereum contract, binding an instance of L2Portal to it.
func DeployL2Portal(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *L2Portal, error) {
	parsed, err := L2PortalMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(L2PortalBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &L2Portal{L2PortalCaller: L2PortalCaller{contract: contract}, L2PortalTransactor: L2PortalTransactor{contract: contract}, L2PortalFilterer: L2PortalFilterer{contract: contract}}, nil
}

// L2Portal is an auto generated Go binding around an Ethereum contract.
type L2Portal struct {
	L2PortalCaller     // Read-only binding to the contract
	L2PortalTransactor // Write-only binding to the contract
	L2PortalFilterer   // Log filterer for contract events
}

// L2PortalCaller is an auto generated read-only Go binding around an Ethereum contract.
type L2PortalCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L2PortalTransactor is an auto generated write-only Go binding around an Ethereum contract.
type L2PortalTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L2PortalFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type L2PortalFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// L2PortalSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type L2PortalSession struct {
	Contract     *L2Portal         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// L2PortalCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type L2PortalCallerSession struct {
	Contract *L2PortalCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// L2PortalTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type L2PortalTransactorSession struct {
	Contract     *L2PortalTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// L2PortalRaw is an auto generated low-level Go binding around an Ethereum contract.
type L2PortalRaw struct {
	Contract *L2Portal // Generic contract binding to access the raw methods on
}

// L2PortalCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type L2PortalCallerRaw struct {
	Contract *L2PortalCaller // Generic read-only contract binding to access the raw methods on
}

// L2PortalTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type L2PortalTransactorRaw struct {
	Contract *L2PortalTransactor // Generic write-only contract binding to access the raw methods on
}

// NewL2Portal creates a new instance of L2Portal, bound to a specific deployed contract.
func NewL2Portal(address common.Address, backend bind.ContractBackend) (*L2Portal, error) {
	contract, err := bindL2Portal(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &L2Portal{L2PortalCaller: L2PortalCaller{contract: contract}, L2PortalTransactor: L2PortalTransactor{contract: contract}, L2PortalFilterer: L2PortalFilterer{contract: contract}}, nil
}

// NewL2PortalCaller creates a new read-only instance of L2Portal, bound to a specific deployed contract.
func NewL2PortalCaller(address common.Address, caller bind.ContractCaller) (*L2PortalCaller, error) {
	contract, err := bindL2Portal(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &L2PortalCaller{contract: contract}, nil
}

// NewL2PortalTransactor creates a new write-only instance of L2Portal, bound to a specific deployed contract.
func NewL2PortalTransactor(address common.Address, transactor bind.ContractTransactor) (*L2PortalTransactor, error) {
	contract, err := bindL2Portal(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &L2PortalTransactor{contract: contract}, nil
}

// NewL2PortalFilterer creates a new log filterer instance of L2Portal, bound to a specific deployed contract.
func NewL2PortalFilterer(address common.Address, filterer bind.ContractFilterer) (*L2PortalFilterer, error) {
	contract, err := bindL2Portal(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &L2PortalFilterer{contract: contract}, nil
}

// bindL2Portal binds a generic wrapper to an already deployed contract.
func bindL2Portal(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := L2PortalMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L2Portal *L2PortalRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L2Portal.Contract.L2PortalCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L2Portal *L2PortalRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2Portal.Contract.L2PortalTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L2Portal *L2PortalRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L2Portal.Contract.L2PortalTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_L2Portal *L2PortalCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _L2Portal.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_L2Portal *L2PortalTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2Portal.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_L2Portal *L2PortalTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _L2Portal.Contract.contract.Transact(opts, method, params...)
}

// FinalizedDeposits is a free data retrieval call binding the contract method 0x15efc4ed.
//
// Solidity: function finalizedDeposits(bytes32 ) view returns(bool)
func (_L2Portal *L2PortalCaller) FinalizedDeposits(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _L2Portal.contract.Call(opts, &out, "finalizedDeposits", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// FinalizedDeposits is a free data retrieval call binding the contract method 0x15efc4ed.
//
// Solidity: function finalizedDeposits(bytes32 ) view returns(bool)
func (_L2Portal *L2PortalSession) FinalizedDeposits(arg0 [32]byte) (bool, error) {
	return _L2Portal.Contract.FinalizedDeposits(&_L2Portal.CallOpts, arg0)
}

// FinalizedDeposits is a free data retrieval call binding the contract method 0x15efc4ed.
//
// Solidity: function finalizedDeposits(bytes32 ) view returns(bool)
func (_L2Portal *L2PortalCallerSession) FinalizedDeposits(arg0 [32]byte) (bool, error) {
	return _L2Portal.Contract.FinalizedDeposits(&_L2Portal.CallOpts, arg0)
}

// InitiatedWithdrawals is a free data retrieval call binding the contract method 0xbf286e39.
//
// Solidity: function initiatedWithdrawals(bytes32 ) view returns(bool)
func (_L2Portal *L2PortalCaller) InitiatedWithdrawals(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _L2Portal.contract.Call(opts, &out, "initiatedWithdrawals", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// InitiatedWithdrawals is a free data retrieval call binding the contract method 0xbf286e39.
//
// Solidity: function initiatedWithdrawals(bytes32 ) view returns(bool)
func (_L2Portal *L2PortalSession) InitiatedWithdrawals(arg0 [32]byte) (bool, error) {
	return _L2Portal.Contract.InitiatedWithdrawals(&_L2Portal.CallOpts, arg0)
}

// InitiatedWithdrawals is a free data retrieval call binding the contract method 0xbf286e39.
//
// Solidity: function initiatedWithdrawals(bytes32 ) view returns(bool)
func (_L2Portal *L2PortalCallerSession) InitiatedWithdrawals(arg0 [32]byte) (bool, error) {
	return _L2Portal.Contract.InitiatedWithdrawals(&_L2Portal.CallOpts, arg0)
}

// L1PortalAddress is a free data retrieval call binding the contract method 0x5dec2aa4.
//
// Solidity: function l1PortalAddress() view returns(address)
func (_L2Portal *L2PortalCaller) L1PortalAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2Portal.contract.Call(opts, &out, "l1PortalAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L1PortalAddress is a free data retrieval call binding the contract method 0x5dec2aa4.
//
// Solidity: function l1PortalAddress() view returns(address)
func (_L2Portal *L2PortalSession) L1PortalAddress() (common.Address, error) {
	return _L2Portal.Contract.L1PortalAddress(&_L2Portal.CallOpts)
}

// L1PortalAddress is a free data retrieval call binding the contract method 0x5dec2aa4.
//
// Solidity: function l1PortalAddress() view returns(address)
func (_L2Portal *L2PortalCallerSession) L1PortalAddress() (common.Address, error) {
	return _L2Portal.Contract.L1PortalAddress(&_L2Portal.CallOpts)
}

// L1Sender is a free data retrieval call binding the contract method 0xb7558b7a.
//
// Solidity: function l1Sender() view returns(address)
func (_L2Portal *L2PortalCaller) L1Sender(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2Portal.contract.Call(opts, &out, "l1Sender")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L1Sender is a free data retrieval call binding the contract method 0xb7558b7a.
//
// Solidity: function l1Sender() view returns(address)
func (_L2Portal *L2PortalSession) L1Sender() (common.Address, error) {
	return _L2Portal.Contract.L1Sender(&_L2Portal.CallOpts)
}

// L1Sender is a free data retrieval call binding the contract method 0xb7558b7a.
//
// Solidity: function l1Sender() view returns(address)
func (_L2Portal *L2PortalCallerSession) L1Sender() (common.Address, error) {
	return _L2Portal.Contract.L1Sender(&_L2Portal.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_L2Portal *L2PortalCaller) Nonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _L2Portal.contract.Call(opts, &out, "nonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_L2Portal *L2PortalSession) Nonce() (*big.Int, error) {
	return _L2Portal.Contract.Nonce(&_L2Portal.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_L2Portal *L2PortalCallerSession) Nonce() (*big.Int, error) {
	return _L2Portal.Contract.Nonce(&_L2Portal.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L2Portal *L2PortalCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _L2Portal.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L2Portal *L2PortalSession) Owner() (common.Address, error) {
	return _L2Portal.Contract.Owner(&_L2Portal.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_L2Portal *L2PortalCallerSession) Owner() (common.Address, error) {
	return _L2Portal.Contract.Owner(&_L2Portal.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_L2Portal *L2PortalCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _L2Portal.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_L2Portal *L2PortalSession) Paused() (bool, error) {
	return _L2Portal.Contract.Paused(&_L2Portal.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_L2Portal *L2PortalCallerSession) Paused() (bool, error) {
	return _L2Portal.Contract.Paused(&_L2Portal.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_L2Portal *L2PortalCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _L2Portal.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_L2Portal *L2PortalSession) ProxiableUUID() ([32]byte, error) {
	return _L2Portal.Contract.ProxiableUUID(&_L2Portal.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_L2Portal *L2PortalCallerSession) ProxiableUUID() ([32]byte, error) {
	return _L2Portal.Contract.ProxiableUUID(&_L2Portal.CallOpts)
}

// DonateETH is a paid mutator transaction binding the contract method 0x8b4c40b0.
//
// Solidity: function donateETH() payable returns()
func (_L2Portal *L2PortalTransactor) DonateETH(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2Portal.contract.Transact(opts, "donateETH")
}

// DonateETH is a paid mutator transaction binding the contract method 0x8b4c40b0.
//
// Solidity: function donateETH() payable returns()
func (_L2Portal *L2PortalSession) DonateETH() (*types.Transaction, error) {
	return _L2Portal.Contract.DonateETH(&_L2Portal.TransactOpts)
}

// DonateETH is a paid mutator transaction binding the contract method 0x8b4c40b0.
//
// Solidity: function donateETH() payable returns()
func (_L2Portal *L2PortalTransactorSession) DonateETH() (*types.Transaction, error) {
	return _L2Portal.Contract.DonateETH(&_L2Portal.TransactOpts)
}

// FinalizeDepositTransaction is a paid mutator transaction binding the contract method 0x37983d29.
//
// Solidity: function finalizeDepositTransaction(uint256 l1BlockNumber, (uint256,uint256,address,address,uint256,uint256,bytes) depositTx, bytes[] depositAccountProof, bytes[] depositProof) returns()
func (_L2Portal *L2PortalTransactor) FinalizeDepositTransaction(opts *bind.TransactOpts, l1BlockNumber *big.Int, depositTx TypesCrossDomainMessage, depositAccountProof [][]byte, depositProof [][]byte) (*types.Transaction, error) {
	return _L2Portal.contract.Transact(opts, "finalizeDepositTransaction", l1BlockNumber, depositTx, depositAccountProof, depositProof)
}

// FinalizeDepositTransaction is a paid mutator transaction binding the contract method 0x37983d29.
//
// Solidity: function finalizeDepositTransaction(uint256 l1BlockNumber, (uint256,uint256,address,address,uint256,uint256,bytes) depositTx, bytes[] depositAccountProof, bytes[] depositProof) returns()
func (_L2Portal *L2PortalSession) FinalizeDepositTransaction(l1BlockNumber *big.Int, depositTx TypesCrossDomainMessage, depositAccountProof [][]byte, depositProof [][]byte) (*types.Transaction, error) {
	return _L2Portal.Contract.FinalizeDepositTransaction(&_L2Portal.TransactOpts, l1BlockNumber, depositTx, depositAccountProof, depositProof)
}

// FinalizeDepositTransaction is a paid mutator transaction binding the contract method 0x37983d29.
//
// Solidity: function finalizeDepositTransaction(uint256 l1BlockNumber, (uint256,uint256,address,address,uint256,uint256,bytes) depositTx, bytes[] depositAccountProof, bytes[] depositProof) returns()
func (_L2Portal *L2PortalTransactorSession) FinalizeDepositTransaction(l1BlockNumber *big.Int, depositTx TypesCrossDomainMessage, depositAccountProof [][]byte, depositProof [][]byte) (*types.Transaction, error) {
	return _L2Portal.Contract.FinalizeDepositTransaction(&_L2Portal.TransactOpts, l1BlockNumber, depositTx, depositAccountProof, depositProof)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _l1PortalAddress) returns()
func (_L2Portal *L2PortalTransactor) Initialize(opts *bind.TransactOpts, _l1PortalAddress common.Address) (*types.Transaction, error) {
	return _L2Portal.contract.Transact(opts, "initialize", _l1PortalAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _l1PortalAddress) returns()
func (_L2Portal *L2PortalSession) Initialize(_l1PortalAddress common.Address) (*types.Transaction, error) {
	return _L2Portal.Contract.Initialize(&_L2Portal.TransactOpts, _l1PortalAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _l1PortalAddress) returns()
func (_L2Portal *L2PortalTransactorSession) Initialize(_l1PortalAddress common.Address) (*types.Transaction, error) {
	return _L2Portal.Contract.Initialize(&_L2Portal.TransactOpts, _l1PortalAddress)
}

// InitiateWithdrawal is a paid mutator transaction binding the contract method 0xc2b3e5ac.
//
// Solidity: function initiateWithdrawal(address _target, uint256 _gasLimit, bytes _data) payable returns()
func (_L2Portal *L2PortalTransactor) InitiateWithdrawal(opts *bind.TransactOpts, _target common.Address, _gasLimit *big.Int, _data []byte) (*types.Transaction, error) {
	return _L2Portal.contract.Transact(opts, "initiateWithdrawal", _target, _gasLimit, _data)
}

// InitiateWithdrawal is a paid mutator transaction binding the contract method 0xc2b3e5ac.
//
// Solidity: function initiateWithdrawal(address _target, uint256 _gasLimit, bytes _data) payable returns()
func (_L2Portal *L2PortalSession) InitiateWithdrawal(_target common.Address, _gasLimit *big.Int, _data []byte) (*types.Transaction, error) {
	return _L2Portal.Contract.InitiateWithdrawal(&_L2Portal.TransactOpts, _target, _gasLimit, _data)
}

// InitiateWithdrawal is a paid mutator transaction binding the contract method 0xc2b3e5ac.
//
// Solidity: function initiateWithdrawal(address _target, uint256 _gasLimit, bytes _data) payable returns()
func (_L2Portal *L2PortalTransactorSession) InitiateWithdrawal(_target common.Address, _gasLimit *big.Int, _data []byte) (*types.Transaction, error) {
	return _L2Portal.Contract.InitiateWithdrawal(&_L2Portal.TransactOpts, _target, _gasLimit, _data)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_L2Portal *L2PortalTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2Portal.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_L2Portal *L2PortalSession) Pause() (*types.Transaction, error) {
	return _L2Portal.Contract.Pause(&_L2Portal.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_L2Portal *L2PortalTransactorSession) Pause() (*types.Transaction, error) {
	return _L2Portal.Contract.Pause(&_L2Portal.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L2Portal *L2PortalTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2Portal.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L2Portal *L2PortalSession) RenounceOwnership() (*types.Transaction, error) {
	return _L2Portal.Contract.RenounceOwnership(&_L2Portal.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_L2Portal *L2PortalTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _L2Portal.Contract.RenounceOwnership(&_L2Portal.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L2Portal *L2PortalTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _L2Portal.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L2Portal *L2PortalSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _L2Portal.Contract.TransferOwnership(&_L2Portal.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_L2Portal *L2PortalTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _L2Portal.Contract.TransferOwnership(&_L2Portal.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_L2Portal *L2PortalTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2Portal.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_L2Portal *L2PortalSession) Unpause() (*types.Transaction, error) {
	return _L2Portal.Contract.Unpause(&_L2Portal.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_L2Portal *L2PortalTransactorSession) Unpause() (*types.Transaction, error) {
	return _L2Portal.Contract.Unpause(&_L2Portal.TransactOpts)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_L2Portal *L2PortalTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _L2Portal.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_L2Portal *L2PortalSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _L2Portal.Contract.UpgradeTo(&_L2Portal.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_L2Portal *L2PortalTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _L2Portal.Contract.UpgradeTo(&_L2Portal.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_L2Portal *L2PortalTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _L2Portal.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_L2Portal *L2PortalSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _L2Portal.Contract.UpgradeToAndCall(&_L2Portal.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_L2Portal *L2PortalTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _L2Portal.Contract.UpgradeToAndCall(&_L2Portal.TransactOpts, newImplementation, data)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_L2Portal *L2PortalTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _L2Portal.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_L2Portal *L2PortalSession) Receive() (*types.Transaction, error) {
	return _L2Portal.Contract.Receive(&_L2Portal.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_L2Portal *L2PortalTransactorSession) Receive() (*types.Transaction, error) {
	return _L2Portal.Contract.Receive(&_L2Portal.TransactOpts)
}

// L2PortalAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the L2Portal contract.
type L2PortalAdminChangedIterator struct {
	Event *L2PortalAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2PortalAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2PortalAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2PortalAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2PortalAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2PortalAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2PortalAdminChanged represents a AdminChanged event raised by the L2Portal contract.
type L2PortalAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_L2Portal *L2PortalFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*L2PortalAdminChangedIterator, error) {

	logs, sub, err := _L2Portal.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &L2PortalAdminChangedIterator{contract: _L2Portal.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_L2Portal *L2PortalFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *L2PortalAdminChanged) (event.Subscription, error) {

	logs, sub, err := _L2Portal.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2PortalAdminChanged)
				if err := _L2Portal.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_L2Portal *L2PortalFilterer) ParseAdminChanged(log types.Log) (*L2PortalAdminChanged, error) {
	event := new(L2PortalAdminChanged)
	if err := _L2Portal.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2PortalBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the L2Portal contract.
type L2PortalBeaconUpgradedIterator struct {
	Event *L2PortalBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2PortalBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2PortalBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2PortalBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2PortalBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2PortalBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2PortalBeaconUpgraded represents a BeaconUpgraded event raised by the L2Portal contract.
type L2PortalBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_L2Portal *L2PortalFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*L2PortalBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _L2Portal.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &L2PortalBeaconUpgradedIterator{contract: _L2Portal.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_L2Portal *L2PortalFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *L2PortalBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _L2Portal.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2PortalBeaconUpgraded)
				if err := _L2Portal.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_L2Portal *L2PortalFilterer) ParseBeaconUpgraded(log types.Log) (*L2PortalBeaconUpgraded, error) {
	event := new(L2PortalBeaconUpgraded)
	if err := _L2Portal.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2PortalDepositFinalizedIterator is returned from FilterDepositFinalized and is used to iterate over the raw logs and unpacked data for DepositFinalized events raised by the L2Portal contract.
type L2PortalDepositFinalizedIterator struct {
	Event *L2PortalDepositFinalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2PortalDepositFinalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2PortalDepositFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2PortalDepositFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2PortalDepositFinalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2PortalDepositFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2PortalDepositFinalized represents a DepositFinalized event raised by the L2Portal contract.
type L2PortalDepositFinalized struct {
	DepositHash [32]byte
	Success     bool
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDepositFinalized is a free log retrieval operation binding the contract event 0xc8eb69c722facbe5fd7901674d0516c7d657c80d00809200070b150a0878681c.
//
// Solidity: event DepositFinalized(bytes32 indexed depositHash, bool success)
func (_L2Portal *L2PortalFilterer) FilterDepositFinalized(opts *bind.FilterOpts, depositHash [][32]byte) (*L2PortalDepositFinalizedIterator, error) {

	var depositHashRule []interface{}
	for _, depositHashItem := range depositHash {
		depositHashRule = append(depositHashRule, depositHashItem)
	}

	logs, sub, err := _L2Portal.contract.FilterLogs(opts, "DepositFinalized", depositHashRule)
	if err != nil {
		return nil, err
	}
	return &L2PortalDepositFinalizedIterator{contract: _L2Portal.contract, event: "DepositFinalized", logs: logs, sub: sub}, nil
}

// WatchDepositFinalized is a free log subscription operation binding the contract event 0xc8eb69c722facbe5fd7901674d0516c7d657c80d00809200070b150a0878681c.
//
// Solidity: event DepositFinalized(bytes32 indexed depositHash, bool success)
func (_L2Portal *L2PortalFilterer) WatchDepositFinalized(opts *bind.WatchOpts, sink chan<- *L2PortalDepositFinalized, depositHash [][32]byte) (event.Subscription, error) {

	var depositHashRule []interface{}
	for _, depositHashItem := range depositHash {
		depositHashRule = append(depositHashRule, depositHashItem)
	}

	logs, sub, err := _L2Portal.contract.WatchLogs(opts, "DepositFinalized", depositHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2PortalDepositFinalized)
				if err := _L2Portal.contract.UnpackLog(event, "DepositFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositFinalized is a log parse operation binding the contract event 0xc8eb69c722facbe5fd7901674d0516c7d657c80d00809200070b150a0878681c.
//
// Solidity: event DepositFinalized(bytes32 indexed depositHash, bool success)
func (_L2Portal *L2PortalFilterer) ParseDepositFinalized(log types.Log) (*L2PortalDepositFinalized, error) {
	event := new(L2PortalDepositFinalized)
	if err := _L2Portal.contract.UnpackLog(event, "DepositFinalized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2PortalInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the L2Portal contract.
type L2PortalInitializedIterator struct {
	Event *L2PortalInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2PortalInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2PortalInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2PortalInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2PortalInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2PortalInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2PortalInitialized represents a Initialized event raised by the L2Portal contract.
type L2PortalInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L2Portal *L2PortalFilterer) FilterInitialized(opts *bind.FilterOpts) (*L2PortalInitializedIterator, error) {

	logs, sub, err := _L2Portal.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &L2PortalInitializedIterator{contract: _L2Portal.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L2Portal *L2PortalFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *L2PortalInitialized) (event.Subscription, error) {

	logs, sub, err := _L2Portal.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2PortalInitialized)
				if err := _L2Portal.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_L2Portal *L2PortalFilterer) ParseInitialized(log types.Log) (*L2PortalInitialized, error) {
	event := new(L2PortalInitialized)
	if err := _L2Portal.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2PortalOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the L2Portal contract.
type L2PortalOwnershipTransferredIterator struct {
	Event *L2PortalOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2PortalOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2PortalOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2PortalOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2PortalOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2PortalOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2PortalOwnershipTransferred represents a OwnershipTransferred event raised by the L2Portal contract.
type L2PortalOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L2Portal *L2PortalFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*L2PortalOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _L2Portal.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &L2PortalOwnershipTransferredIterator{contract: _L2Portal.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L2Portal *L2PortalFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *L2PortalOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _L2Portal.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2PortalOwnershipTransferred)
				if err := _L2Portal.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_L2Portal *L2PortalFilterer) ParseOwnershipTransferred(log types.Log) (*L2PortalOwnershipTransferred, error) {
	event := new(L2PortalOwnershipTransferred)
	if err := _L2Portal.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2PortalPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the L2Portal contract.
type L2PortalPausedIterator struct {
	Event *L2PortalPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2PortalPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2PortalPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2PortalPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2PortalPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2PortalPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2PortalPaused represents a Paused event raised by the L2Portal contract.
type L2PortalPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_L2Portal *L2PortalFilterer) FilterPaused(opts *bind.FilterOpts) (*L2PortalPausedIterator, error) {

	logs, sub, err := _L2Portal.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &L2PortalPausedIterator{contract: _L2Portal.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_L2Portal *L2PortalFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *L2PortalPaused) (event.Subscription, error) {

	logs, sub, err := _L2Portal.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2PortalPaused)
				if err := _L2Portal.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_L2Portal *L2PortalFilterer) ParsePaused(log types.Log) (*L2PortalPaused, error) {
	event := new(L2PortalPaused)
	if err := _L2Portal.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2PortalUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the L2Portal contract.
type L2PortalUnpausedIterator struct {
	Event *L2PortalUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2PortalUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2PortalUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2PortalUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2PortalUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2PortalUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2PortalUnpaused represents a Unpaused event raised by the L2Portal contract.
type L2PortalUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_L2Portal *L2PortalFilterer) FilterUnpaused(opts *bind.FilterOpts) (*L2PortalUnpausedIterator, error) {

	logs, sub, err := _L2Portal.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &L2PortalUnpausedIterator{contract: _L2Portal.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_L2Portal *L2PortalFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *L2PortalUnpaused) (event.Subscription, error) {

	logs, sub, err := _L2Portal.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2PortalUnpaused)
				if err := _L2Portal.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_L2Portal *L2PortalFilterer) ParseUnpaused(log types.Log) (*L2PortalUnpaused, error) {
	event := new(L2PortalUnpaused)
	if err := _L2Portal.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2PortalUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the L2Portal contract.
type L2PortalUpgradedIterator struct {
	Event *L2PortalUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2PortalUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2PortalUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2PortalUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2PortalUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2PortalUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2PortalUpgraded represents a Upgraded event raised by the L2Portal contract.
type L2PortalUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_L2Portal *L2PortalFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*L2PortalUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _L2Portal.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &L2PortalUpgradedIterator{contract: _L2Portal.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_L2Portal *L2PortalFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *L2PortalUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _L2Portal.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2PortalUpgraded)
				if err := _L2Portal.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_L2Portal *L2PortalFilterer) ParseUpgraded(log types.Log) (*L2PortalUpgraded, error) {
	event := new(L2PortalUpgraded)
	if err := _L2Portal.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// L2PortalWithdrawalInitiatedIterator is returned from FilterWithdrawalInitiated and is used to iterate over the raw logs and unpacked data for WithdrawalInitiated events raised by the L2Portal contract.
type L2PortalWithdrawalInitiatedIterator struct {
	Event *L2PortalWithdrawalInitiated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *L2PortalWithdrawalInitiatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(L2PortalWithdrawalInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(L2PortalWithdrawalInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *L2PortalWithdrawalInitiatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *L2PortalWithdrawalInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// L2PortalWithdrawalInitiated represents a WithdrawalInitiated event raised by the L2Portal contract.
type L2PortalWithdrawalInitiated struct {
	Nonce          *big.Int
	Sender         common.Address
	Target         common.Address
	Value          *big.Int
	GasLimit       *big.Int
	Data           []byte
	WithdrawalHash [32]byte
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalInitiated is a free log retrieval operation binding the contract event 0x2e54ae47a8d51f81cc8f2ff66f175741c8af3e1cbe4f87d675aecf42d4d5103f.
//
// Solidity: event WithdrawalInitiated(uint256 indexed nonce, address indexed sender, address indexed target, uint256 value, uint256 gasLimit, bytes data, bytes32 withdrawalHash)
func (_L2Portal *L2PortalFilterer) FilterWithdrawalInitiated(opts *bind.FilterOpts, nonce []*big.Int, sender []common.Address, target []common.Address) (*L2PortalWithdrawalInitiatedIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _L2Portal.contract.FilterLogs(opts, "WithdrawalInitiated", nonceRule, senderRule, targetRule)
	if err != nil {
		return nil, err
	}
	return &L2PortalWithdrawalInitiatedIterator{contract: _L2Portal.contract, event: "WithdrawalInitiated", logs: logs, sub: sub}, nil
}

// WatchWithdrawalInitiated is a free log subscription operation binding the contract event 0x2e54ae47a8d51f81cc8f2ff66f175741c8af3e1cbe4f87d675aecf42d4d5103f.
//
// Solidity: event WithdrawalInitiated(uint256 indexed nonce, address indexed sender, address indexed target, uint256 value, uint256 gasLimit, bytes data, bytes32 withdrawalHash)
func (_L2Portal *L2PortalFilterer) WatchWithdrawalInitiated(opts *bind.WatchOpts, sink chan<- *L2PortalWithdrawalInitiated, nonce []*big.Int, sender []common.Address, target []common.Address) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _L2Portal.contract.WatchLogs(opts, "WithdrawalInitiated", nonceRule, senderRule, targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(L2PortalWithdrawalInitiated)
				if err := _L2Portal.contract.UnpackLog(event, "WithdrawalInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalInitiated is a log parse operation binding the contract event 0x2e54ae47a8d51f81cc8f2ff66f175741c8af3e1cbe4f87d675aecf42d4d5103f.
//
// Solidity: event WithdrawalInitiated(uint256 indexed nonce, address indexed sender, address indexed target, uint256 value, uint256 gasLimit, bytes data, bytes32 withdrawalHash)
func (_L2Portal *L2PortalFilterer) ParseWithdrawalInitiated(log types.Log) (*L2PortalWithdrawalInitiated, error) {
	event := new(L2PortalWithdrawalInitiated)
	if err := _L2Portal.contract.UnpackLog(event, "WithdrawalInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
