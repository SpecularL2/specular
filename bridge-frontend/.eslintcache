[{"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/index.tsx":"1","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/styles/theme.ts":"2","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/app.view.tsx":"3","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/app.styles.ts":"4","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/stepper/stepper.view.tsx":"5","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/footer/footer.view.tsx":"6","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/faq/faq.view.tsx":"7","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/header/header.view.tsx":"8","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/stepper/stepper.styles.ts":"9","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/footer/footer.styles.ts":"10","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/constants.ts":"11","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/header/header.styles.ts":"12","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/hooks/use-stepper-data.ts":"13","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/hooks/use-wallet.ts":"14","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/hooks/use-window-size.ts":"15","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/hooks/use-deposit.ts":"16","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/hooks/use-finalize-deposit.ts":"17","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/deposit-form/deposit-form.view.tsx":"18","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/withdraw-form/withdraw-form.view.tsx":"19","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/tx-confirm/tx-confirm.view.tsx":"20","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/login/login.view.tsx":"21","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/network-error/network-error.view.tsx":"22","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/tx-pending/tx-pending.view.tsx":"23","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/data-loader/data-loader.tsx":"24","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/tx-finalize-deposit/tx-finalize-deposit.view.tsx":"25","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/tx-overview/tx-overview.view.tsx":"26","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/chains.ts":"27","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/utils.ts":"28","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/hooks/use-deposit-form-data.ts":"29","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/deposit-form/deposit-form.styles.ts":"30","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/withdraw-form/withdraw-form.styles.ts":"31","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/tx-confirm/tx-confirm.styles.ts":"32","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/login/login.styles.ts":"33","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/network-error/network-error.styles.ts":"34","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/tx-finalize-deposit/tx-finalize-deposit.styles.ts":"35","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/tx-overview/tx-overview.styles.ts":"36","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/tx-pending/tx-pending.styles.ts":"37","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/data-loader/data-loader.styles.ts":"38","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/hooks/use-watch-asset.ts":"39","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/shared/header/header.view.tsx":"40","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/shared/spinner/spinner.view.tsx":"41","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/index.ts":"42","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/shared/spinner/spinner.styles.ts":"43","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/shared/header/header.styles.ts":"44","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/SequencerInbox__factory.ts":"45","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/ISequencerInbox__factory.ts":"46","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/IRollup__factory.ts":"47","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/IDAProvider__factory.ts":"48","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/Rollup.sol/Rollup__factory.ts":"49","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/pre-deploy/Faucet__factory.ts":"50","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/pre-deploy/UUPSPlaceholder__factory.ts":"51","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/pre-deploy/PredeployUUPSUpgradeable__factory.ts":"52","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/Rollup.sol/RollupBase__factory.ts":"53","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/verifier/IVerificationContext__factory.ts":"54","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/ChallengeBase__factory.ts":"55","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/IChallenge.sol/IAsymChallenge__factory.ts":"56","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/IChallenge.sol/ISymChallenge__factory.ts":"57","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/verifier/IVerifier__factory.ts":"58","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/SymChallenge__factory.ts":"59","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/AsymChallenge__factory.ts":"60","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/verifier/Verifier__factory.ts":"61","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/IL2Portal__factory.ts":"62","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/IChallenge.sol/IChallengeResultReceiver__factory.ts":"63","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/L2Portal.sol/L2Portal__factory.ts":"64","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/L1Portal.sol/L1Portal__factory.ts":"65","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/IChallenge.sol/IChallenge__factory.ts":"66","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/L1Oracle__factory.ts":"67","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/L2Portal.sol/L2PortalDeterministicStorage__factory.ts":"68","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/L1Portal.sol/L1PortalDeterministicStorage__factory.ts":"69","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/IL1Portal__factory.ts":"70","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable__factory.ts":"71","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable__factory.ts":"72","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable__factory.ts":"73","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol/IERC1822ProxiableUpgradeable__factory.ts":"74","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable__factory.ts":"75","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable__factory.ts":"76","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable__factory.ts":"77","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable__factory.ts":"78","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/index.ts":"79","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/index.ts":"80","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/index.ts":"81","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/pre-deploy/index.ts":"82","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/index.ts":"83","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/Rollup.sol/index.ts":"84","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/index.ts":"85","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/index.ts":"86","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/verifier/index.ts":"87","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/IChallenge.sol/index.ts":"88","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/L1Portal.sol/index.ts":"89","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/L2Portal.sol/index.ts":"90","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/interfaces/index.ts":"91","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/utils/index.ts":"92","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/proxy/index.ts":"93","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/access/index.ts":"94","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol/index.ts":"95","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/proxy/utils/index.ts":"96","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/proxy/beacon/index.ts":"97","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/proxy/ERC1967/index.ts":"98"},{"size":338,"mtime":1687939612396,"results":"99","hashOfConfig":"100"},{"size":645,"mtime":1688108645334,"results":"101","hashOfConfig":"100"},{"size":518,"mtime":1687939612398,"results":"102","hashOfConfig":"100"},{"size":1930,"mtime":1687939612397,"results":"103","hashOfConfig":"100"},{"size":9596,"mtime":1689714512589,"results":"104","hashOfConfig":"100"},{"size":7283,"mtime":1687939612402,"results":"105","hashOfConfig":"100"},{"size":5345,"mtime":1687939612401,"results":"106","hashOfConfig":"100"},{"size":586,"mtime":1687939612402,"results":"107","hashOfConfig":"100"},{"size":1379,"mtime":1687939612410,"results":"108","hashOfConfig":"100"},{"size":959,"mtime":1687939612401,"results":"109","hashOfConfig":"100"},{"size":961,"mtime":1688927133170,"results":"110","hashOfConfig":"100"},{"size":1075,"mtime":1687939612402,"results":"111","hashOfConfig":"100"},{"size":714,"mtime":1688974061694,"results":"112","hashOfConfig":"100"},{"size":4746,"mtime":1689163638719,"results":"113","hashOfConfig":"100"},{"size":742,"mtime":1687939612382,"results":"114","hashOfConfig":"100"},{"size":2354,"mtime":1688564297307,"results":"115","hashOfConfig":"100"},{"size":3557,"mtime":1689161735455,"results":"116","hashOfConfig":"100"},{"size":2921,"mtime":1688968246690,"results":"117","hashOfConfig":"100"},{"size":2932,"mtime":1689175847797,"results":"118","hashOfConfig":"100"},{"size":1028,"mtime":1687939612411,"results":"119","hashOfConfig":"100"},{"size":851,"mtime":1687939612403,"results":"120","hashOfConfig":"100"},{"size":1507,"mtime":1688955468152,"results":"121","hashOfConfig":"100"},{"size":1510,"mtime":1687939612413,"results":"122","hashOfConfig":"100"},{"size":513,"mtime":1687939612399,"results":"123","hashOfConfig":"100"},{"size":2149,"mtime":1689175539325,"results":"124","hashOfConfig":"100"},{"size":1712,"mtime":1687939612412,"results":"125","hashOfConfig":"100"},{"size":1224,"mtime":1687939612379,"results":"126","hashOfConfig":"100"},{"size":1114,"mtime":1688564810581,"results":"127","hashOfConfig":"100"},{"size":2733,"mtime":1689161944632,"results":"128","hashOfConfig":"100"},{"size":3083,"mtime":1688109223133,"results":"129","hashOfConfig":"100"},{"size":3089,"mtime":1689175753718,"results":"130","hashOfConfig":"100"},{"size":894,"mtime":1687939612411,"results":"131","hashOfConfig":"100"},{"size":1741,"mtime":1687939612403,"results":"132","hashOfConfig":"100"},{"size":1623,"mtime":1687939612404,"results":"133","hashOfConfig":"100"},{"size":1638,"mtime":1689170951914,"results":"134","hashOfConfig":"100"},{"size":1918,"mtime":1687939612411,"results":"135","hashOfConfig":"100"},{"size":1638,"mtime":1687939612413,"results":"136","hashOfConfig":"100"},{"size":281,"mtime":1687939612398,"results":"137","hashOfConfig":"100"},{"size":524,"mtime":1687939612382,"results":"138","hashOfConfig":"100"},{"size":1219,"mtime":1687939612407,"results":"139","hashOfConfig":"100"},{"size":875,"mtime":1687939612409,"results":"140","hashOfConfig":"100"},{"size":6644,"mtime":1689608518501,"results":"141","hashOfConfig":"100"},{"size":1065,"mtime":1687939612409,"results":"142","hashOfConfig":"100"},{"size":1890,"mtime":1687939612406,"results":"143","hashOfConfig":"100"},{"size":20863,"mtime":1689608518490,"results":"144","hashOfConfig":"100"},{"size":2504,"mtime":1689608518488,"results":"145","hashOfConfig":"100"},{"size":11164,"mtime":1689608518487,"results":"146","hashOfConfig":"100"},{"size":1206,"mtime":1689608518487,"results":"147","hashOfConfig":"100"},{"size":57170,"mtime":1689608518489,"results":"148","hashOfConfig":"100"},{"size":14433,"mtime":1689608518500,"results":"149","hashOfConfig":"100"},{"size":10740,"mtime":1689608518500,"results":"150","hashOfConfig":"100"},{"size":2616,"mtime":1689608518500,"results":"151","hashOfConfig":"100"},{"size":15826,"mtime":1689608518488,"results":"152","hashOfConfig":"100"},{"size":5240,"mtime":1689608518498,"results":"153","hashOfConfig":"100"},{"size":3938,"mtime":1689608518495,"results":"154","hashOfConfig":"100"},{"size":2651,"mtime":1689608518496,"results":"155","hashOfConfig":"100"},{"size":5055,"mtime":1689608518496,"results":"156","hashOfConfig":"100"},{"size":1791,"mtime":1689608518498,"results":"157","hashOfConfig":"100"},{"size":21124,"mtime":1689608518497,"results":"158","hashOfConfig":"100"},{"size":9608,"mtime":1689608518495,"results":"159","hashOfConfig":"100"},{"size":13669,"mtime":1689608518499,"results":"160","hashOfConfig":"100"},{"size":3632,"mtime":1689608518491,"results":"161","hashOfConfig":"100"},{"size":1164,"mtime":1689608518496,"results":"162","hashOfConfig":"100"},{"size":38078,"mtime":1689608518494,"results":"163","hashOfConfig":"100"},{"size":40247,"mtime":1689608518492,"results":"164","hashOfConfig":"100"},{"size":2619,"mtime":1689608518496,"results":"165","hashOfConfig":"100"},{"size":14820,"mtime":1689608518491,"results":"166","hashOfConfig":"100"},{"size":1176,"mtime":1689608518493,"results":"167","hashOfConfig":"100"},{"size":1173,"mtime":1689608518492,"results":"168","hashOfConfig":"100"},{"size":4070,"mtime":1689608518490,"results":"169","hashOfConfig":"100"},{"size":1924,"mtime":1689608518481,"results":"170","hashOfConfig":"100"},{"size":958,"mtime":1689608518485,"results":"171","hashOfConfig":"100"},{"size":989,"mtime":1689608518486,"results":"172","hashOfConfig":"100"},{"size":1133,"mtime":1689608518482,"results":"173","hashOfConfig":"100"},{"size":1582,"mtime":1689608518482,"results":"174","hashOfConfig":"100"},{"size":2559,"mtime":1689608518485,"results":"175","hashOfConfig":"100"},{"size":1002,"mtime":1689608518484,"results":"176","hashOfConfig":"100"},{"size":1876,"mtime":1689608518483,"results":"177","hashOfConfig":"100"},{"size":169,"mtime":1689608518486,"results":"178","hashOfConfig":"100"},{"size":512,"mtime":1689608518499,"results":"179","hashOfConfig":"100"},{"size":155,"mtime":1689608518486,"results":"180","hashOfConfig":"100"},{"size":303,"mtime":1689608518501,"results":"181","hashOfConfig":"100"},{"size":380,"mtime":1689608518498,"results":"182","hashOfConfig":"100"},{"size":204,"mtime":1689608518489,"results":"183","hashOfConfig":"100"},{"size":359,"mtime":1689608518494,"results":"184","hashOfConfig":"100"},{"size":238,"mtime":1689608518481,"results":"185","hashOfConfig":"100"},{"size":287,"mtime":1689608518499,"results":"186","hashOfConfig":"100"},{"size":376,"mtime":1689608518497,"results":"187","hashOfConfig":"100"},{"size":244,"mtime":1689608518493,"results":"188","hashOfConfig":"100"},{"size":244,"mtime":1689608518494,"results":"189","hashOfConfig":"100"},{"size":249,"mtime":1689608518483,"results":"190","hashOfConfig":"100"},{"size":167,"mtime":1689608518486,"results":"191","hashOfConfig":"100"},{"size":198,"mtime":1689608518484,"results":"192","hashOfConfig":"100"},{"size":167,"mtime":1689608518481,"results":"193","hashOfConfig":"100"},{"size":187,"mtime":1689608518482,"results":"194","hashOfConfig":"100"},{"size":228,"mtime":1689608518485,"results":"195","hashOfConfig":"100"},{"size":167,"mtime":1689608518484,"results":"196","hashOfConfig":"100"},{"size":181,"mtime":1689608518483,"results":"197","hashOfConfig":"100"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pb88f5",{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303"},{"filePath":"304","messages":"305","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306"},{"filePath":"307","messages":"308","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"324","messages":"325","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326"},{"filePath":"327","messages":"328","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329"},{"filePath":"330","messages":"331","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339"},{"filePath":"340","messages":"341","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"345","messages":"346","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/index.tsx",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/styles/theme.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/app.view.tsx",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/app.styles.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/stepper/stepper.view.tsx",["410","411","412","413","414","415","416","417","418"],"import { useState, useCallback } from 'react'\nimport useStepperStyles from './stepper.styles'\nimport useWallet from '../../hooks/use-wallet'\nimport useStep, { Step } from '../../hooks/use-stepper-data'\nimport Login from '../login/login.view'\nimport DepositForm from '../deposit-form/deposit-form.view'\nimport WithdrawForm from '../withdraw-form/withdraw-form.view'\nimport TxConfirm from '../tx-confirm/tx-confirm.view'\nimport useDeposit from '../../hooks/use-deposit'\nimport useFinalizeDeposit from '../../hooks/use-finalize-deposit'\nimport TxPending from '../tx-pending/tx-pending.view'\nimport TxFinalizeDeposit from '../tx-finalize-deposit/tx-finalize-deposit.view'\nimport TxOverview from '../tx-overview/tx-overview.view'\nimport NetworkError from '../network-error/network-error.view'\nimport { ethers } from 'ethers'\nimport DataLoader from '../data-loader/data-loader'\nimport {\n  CHIADO_NETWORK_ID,\n  SPECULAR_NETWORK_ID,\n  L1PORTAL_ADDRESS,\n  CHIADO_RPC_URL,\n  L1ORACLE_ADDRESS,\n  SPECULAR_RPC_URL,\n} from \"../../constants\";\nimport {\n  IL1Portal__factory,\n  IL2Portal__factory,\n  L1Oracle__factory,\n  IRollup__factory,\n  ISequencerInbox__factory,\n} from \"../../../../contracts/typechain-types\";\nimport type { PendingDeposit } from \"../../types\";\n\nfunction Stepper () {\n  const classes = useStepperStyles()\n  const { wallet, loadWallet, disconnectWallet, isMetamask, switchChain } = useWallet()\n  const { step, switchStep } = useStep()\n  const { deposit, data: depositData, resetData: resetDepositData } = useDeposit()\n  const { finalizeDeposit, data: finalizeDepositData, resetData: resetFinalizeDepositData } = useFinalizeDeposit()\n  const [amount, setAmount] = useState(ethers.BigNumber.from(\"0\"));\n\n  const initialPendingDeposit: PendingDeposit = {\n    l1BlockNumber: 0,\n    proofL1BlockNumber: undefined,\n    depositHash: \"\",\n    depositTx: {\n      nonce:ethers.BigNumber.from(\"0\"),\n      sender:\"\",\n      target: \"\",\n      value:ethers.BigNumber.from(\"0\"),\n      gasLimit:ethers.BigNumber.from(\"0\"),\n      data: \"\"\n    }\n  };\n  const [pendingDeposit, setPendingDeposit] = useState(initialPendingDeposit)\n  const [isDepositReadyToFinalize, setIsDepositReadyToFinalize] = useState(false)\n\n\n\n  const tabs = [\n    { name: 'Deposit', step: Step.Deposit },\n  ]\n  tabs.push({name: 'Withdraw', step: Step.Withdraw })\n\n  const [activeTab, setActiveTab] = useState(tabs[0].name)\n\n  const selectTab = useCallback((tab: { name: string; step: Step }) => {\n    if (activeTab === tab.name) return;\n    setActiveTab(tab.name);\n    switchStep(tab.step);\n  }, [activeTab, switchStep]);\n\n\n  if (wallet && !(wallet.chainId == CHIADO_NETWORK_ID || wallet.chainId == SPECULAR_NETWORK_ID) ){\n    return (\n      <div className={classes.stepper}>\n        <NetworkError {...{ isMetamask, switchChain }} />\n      </div>\n    )\n  }\n\n  const l1Provider = new ethers.providers.StaticJsonRpcProvider(CHIADO_RPC_URL)\n  const l2Provider = new ethers.providers.StaticJsonRpcProvider(SPECULAR_RPC_URL)\n  const l1Portal = IL1Portal__factory.connect(\n    L1PORTAL_ADDRESS,\n    l1Provider\n  );\n  const l1Oracle = L1Oracle__factory.connect(\n    L1ORACLE_ADDRESS,\n    l2Provider\n  );\n\n  l1Portal.on(\n    l1Portal.filters.DepositInitiated(),\n    (nonce, sender, target, value, gasLimit, data, depositHash, event) => {\n      if (event.transactionHash === depositData.data?.hash) {\n        const newPendingDeposit: PendingDeposit = {\n          l1BlockNumber: event.blockNumber,\n          proofL1BlockNumber: undefined,\n          depositHash: depositHash,\n          depositTx: {\n            nonce,\n            sender,\n            target,\n            value,\n            gasLimit,\n            data,\n          },\n        }\n        setPendingDeposit(newPendingDeposit);\n      }\n    }\n  );\n\n  // l1Oracle.on(\n  //   l1Oracle.filters.L1OracleValuesUpdated(),\n  //   (blockNumber, stateRoot, event) => {\n  //     setIsDepositReadyToFinalize(false);\n  //     if (pendingDeposit === undefined) {\n  //       return;\n  //     }\n  //     if (blockNumber.gte(pendingDeposit.l1BlockNumber)) {\n  //       setIsDepositReadyToFinalize(true);\n  //       pendingDeposit.proofL1BlockNumber = blockNumber.toNumber();\n  //     }\n  //   }\n  // );\n\n  return (\n    <div className={classes.container}>\n      {![Step.Login, Step.Loading].includes(step) && (\n        <div className={classes.tabs}>\n          {tabs.map(tab =>\n            <button\n              key={tab.name}\n              className={activeTab === tab.name ? classes.tabActive : classes.tab}\n              onClick={() => selectTab(tab)}\n              disabled={![Step.Withdraw, Step.Deposit].includes(step)}\n            >\n              <span className={classes.tabName}>{tab.name}</span>\n            </button>\n          )}\n        </div>\n      )}\n      <div className={classes.stepper}>\n        {(() => {\n          switch (step) {\n            case Step.Loading: {\n              return (\n                <DataLoader\n                onGoToNextStep={() => switchStep(Step.Deposit)}\n                />\n              )\n            }\n            case Step.Login: {\n              console.log(\"Login tab\")\n              return (\n                <Login\n                  wallet={wallet}\n                  onLoadWallet={loadWallet}\n                  onGoToNextStep={() => switchStep(Step.Deposit)}\n                />\n              )\n            }\n            case Step.Deposit: {\n              console.log(\"Deposit tab\")\n              switchChain(CHIADO_NETWORK_ID.toString())\n              console.log(\"Chain Id is: \"+wallet.chainId)\n              return (\n                <DepositForm\n                  wallet={wallet}\n                  depositData={depositData}\n                  onAmountChange={resetDepositData}\n                  onSubmit={(fromAmount) => {\n                    deposit(wallet, fromAmount)\n                    setAmount(fromAmount)\n                    switchStep(Step.ConfirmDeposit)\n                  }}\n                  onDisconnectWallet={disconnectWallet}\n                />\n              )\n            }\n            case Step.Withdraw: {\n              console.log(\"Withdraw tab\")\n              switchChain(SPECULAR_NETWORK_ID.toString())\n              console.log(\"Chain Id is: \"+wallet.chainId)\n              return (\n                <WithdrawForm\n                  wallet={wallet}\n                  depositData={depositData}\n                  onAmountChange={resetDepositData}\n                  onSubmit={(fromAmount) => {\n                    deposit(wallet, fromAmount)\n                    switchStep(Step.ConfirmWithdraw)\n                  }}\n                  onDisconnectWallet={disconnectWallet}\n                />\n              )\n            }\n            case Step.ConfirmDeposit: {\n              return (\n                <TxConfirm\n                  wallet={wallet}\n                  depositData={depositData}\n                  onGoBack={() => switchStep(Step.Deposit)}\n                  onGoToPendingStep={() => switchStep(Step.PendingDeposit)}\n                />\n              )\n            }\n            case Step.ConfirmWithdraw: {\n              return (\n                <TxConfirm\n                  wallet={wallet}\n                  depositData={depositData}\n                  onGoBack={() => switchStep(Step.Withdraw)}\n                  onGoToPendingStep={() => switchStep(Step.PendingWithdraw)}\n                />\n              )\n            }\n            case Step.PendingDeposit: {\n              console.log(\"PendingDeposit\")\n              return (\n                <TxPending\n                  wallet={wallet}\n                  depositData={depositData}\n                  onGoBack={() => switchStep(Step.Deposit)}\n                  onGoToOverviewStep={() => switchStep(Step.FinalizeDeposit)}\n                />\n              )\n            }\n            case Step.PendingWithdraw: {\n              console.log(\"PendingWithdraw\")\n              return (\n                <TxPending\n                  wallet={wallet}\n                  depositData={depositData}\n                  onGoBack={() => switchStep(Step.Withdraw)}\n                  onGoToOverviewStep={() => switchStep(Step.FinalizeWithdrawl)}\n                />\n              )\n            }\n            case Step.FinalizeDeposit: {\n              console.log(\"FinalizeDeposit\")\n              finalizeDeposit(wallet,amount,pendingDeposit)\n              return (\n                <TxFinalizeDeposit\n                  wallet={wallet}\n                  depositData={depositData}\n                  finalizeDepositData={finalizeDepositData}\n                  onGoBack={() => switchStep(Step.Deposit)}\n                  onGoToOverviewStep={() => switchStep(Step.Overview)}\n                />\n              )\n            }\n            case Step.FinalizeWithdrawl: {\n              console.log(\"FinalizeWithdrawl\")\n              return (\n                <TxPending\n                  wallet={wallet}\n                  depositData={depositData}\n                  onGoBack={() => switchStep(Step.Withdraw)}\n                  onGoToOverviewStep={() => switchStep(Step.Overview)}\n                />\n              )\n            }\n            case Step.Overview: {\n              console.log(\"Overview\")\n              return (\n                <TxOverview\n                  wallet={wallet}\n                  depositData={depositData}\n                  onDisconnectWallet={disconnectWallet}\n                  isMetamask={isMetamask}\n                />\n              )\n            }\n            default: {\n              return <></>\n            }\n          }\n        })()}\n\n      </div>\n    </div>\n  )\n}\n\nexport default Stepper\n","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/footer/footer.view.tsx",["419"],"import useFooterStyles from './footer.styles'\nimport {Container } from \"@mui/system\"\nimport twitter from '../../images/twitter.svg';\nimport github from '../../images/github.svg';\nimport medium from '../../images/medium.svg';\nimport { Grid, Typography } from \"@mui/material\";\nimport Logo  from '../../images/footer-logo.svg'\nimport TestnetLogo  from '../../images/footer-logo-testnet.svg'\nimport useWindowSize from '../../hooks/use-window-size'\n\nconst footerLinks = [\n  {\n      title: \"Docs\",\n      links: [\n          {\n              title: \"Getting Started\",\n              url: \"https://specular.network/docs/getting-started\",\n          },\n          {\n              title: \"Community\",\n              url: \"https://specular.network/docs/community/\",\n          }\n      ],\n  },\n];\nfunction Footer () {\n  const classes = useFooterStyles()\n  const scrollToTop = () => {\n    window.scrollTo({ top: 0, left: 0, behavior: \"smooth\" });\n};\n\nlet newDate = new Date()\nlet date = newDate.getDate();\nlet month = newDate.getMonth() + 1;\nlet year = newDate.getFullYear();\nvar pjson = require('../../../package.json');\nlet version = pjson.version;\nlet useProd; \nif (process.env.REACT_APP_PROD === 'true') {\n    useProd = <></>;\n  } else {\n    useProd = <div className={classes.bottom}>\n                <Typography\n                fontSize=\"10px\"\n                color=\"grey\"\n                >\n                Version {version} and Date {date}/{month}/{year}\n                </Typography>\n            </div>;\n  }\nconst size = useWindowSize(); \n\nlet footerLogo;\n\nif (size.width !== undefined && size.width > 675) {\n    footerLogo = (\n      <Grid item onClick={scrollToTop}>\n        <img src={Logo} alt=\"xDAI to ETH\" className={classes.logo} />\n      </Grid>\n    );\n} else {\n    footerLogo = <></>\n}\n  return (\n    <footer className={classes.footer}>\n            <Container>\n                    <div>\n                        <Grid\n                            container\n                            spacing={10}\n                            flex=\"1\"\n                            justifyContent=\"center\"\n                        >\n                            {footerLogo}\n                            {footerLinks.map((footer) => (\n                                <Grid item key={footer.title}>\n                                    <Typography\n                                        variant=\"h6\"\n                                        fontWeight=\"bold\"\n                                        fontSize=\"14px\"\n                                        color=\"white\"\n                                        align=\"center\"\n                                        sx={{\n                                            textTransform: \"uppercase\",\n                                            marginBottom: \"10px\",\n                                        }}\n                                    >\n                                        {footer.title}\n                                    </Typography>\n                                    {footer.links.map((link) => (\n                                        <Typography\n                                            key={link.title}\n                                            variant=\"subtitle1\"\n                                            fontSize=\"14px\"\n                                            color=\"grey\"\n                                        >\n                                            <a\n                                                target=\"_blank\"\n                                                rel=\"noreferrer noopener\"\n                                                href={link.url}\n                                            >\n                                                {link.title}\n                                            </a>\n                                        </Typography>\n                                    ))}\n                                </Grid>\n                            ))}\n                            <Grid item>\n                                <Typography\n                                    variant=\"h6\"\n                                    fontWeight=\"bold\"\n                                    fontSize=\"14px\"\n                                    color=\"white\"\n                                    align=\"center\"\n                                    sx={{\n                                        textTransform: \"uppercase\",\n                                        marginBottom: \"15px\",\n                                    }}\n                                >\n                                    Socials\n                                </Typography>\n                                <Grid container spacing={2}>\n                                    <Grid item>\n                                        <div>\n                                            <a\n                                                href=\"https://twitter.com/specularl2\"\n                                                target=\"_blank\"\n                                                rel=\"noreferrer noopener\"\n                                            >\n                                                <img\n                                                    src={twitter}\n                                                    alt=\"Specular Twitter\"\n                                                />\n                                            </a>\n                                        </div>\n                                    </Grid>\n                                    <Grid item>\n                                        <div>\n                                            <a\n                                                href=\"https://github.com/specularl2\"\n                                                target=\"_blank\"\n                                                rel=\"noreferrer noopener\"\n                                            >\n                                                <img\n                                                    src={github}\n                                                    alt=\"Specular Github\"\n                                                />\n                                            </a>\n                                        </div>\n                                    </Grid>\n                                    <Grid item>\n                                        <div>\n                                            <a\n                                                href=\"https://medium.com/@SpecularL2\"\n                                                target=\"_blank\"\n                                                rel=\"noreferrer noopener\"\n                                            >\n                                                <img\n                                                    src={medium}\n                                                    alt=\"Specular Medium\"\n                                                />\n                                            </a>\n                                        </div>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </div>\n            </Container>\n            {useProd}\n        </footer>\n  )\n}\n\nexport default Footer\n","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/faq/faq.view.tsx",["420"],"import {\n    AccordionDetails,\n    AccordionSummary,\n    Typography,\n} from \"@mui/material\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport { Container } from \"@mui/system\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { styled } from '@mui/material/styles';\nimport MuiAccordion from '@mui/material/Accordion';\n\ninterface FAQProps {\n    setOpenGetMoreFaq: React.Dispatch<React.SetStateAction<(() => void) | undefined>>;\n  }\n\nconst FAQ: React.FC<FAQProps> = ({ setOpenGetMoreFaq }) => {\n    const [expanded, setExpanded] = useState(\"panel1\");\n    const handleChange = (panel: string) => (event: React.ChangeEvent<{}>, newExpanded: boolean) => {\n        setExpanded(newExpanded ? panel : \"\");\n      };\n\n    const getMoreFaqRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        setOpenGetMoreFaq(() => () => {\n            setExpanded(\"hcigmx\");\n            if (getMoreFaqRef.current !== null) {\n                getMoreFaqRef.current.scrollIntoView({\n                    behavior: \"smooth\",\n                    block: \"center\",\n                    inline: \"center\",\n                });\n            }\n        });\n    }, []);\n\n    const Accordion = styled((props: React.ComponentProps<typeof MuiAccordion>) => (\n        <MuiAccordion disableGutters elevation={0} square {...props} />\n      ))(({ theme }) => ({\n        border: `1px solid ${theme.palette.divider}`,\n        borderRadius:'16px',\n        marginTop: \"0.32em\",\n        '&:before': {\n          display: 'none',\n        },\n      }));\n\n    return (\n        <Container maxWidth=\"sm\">\n            <Typography\n                align=\"center\"\n                marginTop=\"1em\"\n                fontSize=\"32px\"\n            >\n                FAQ\n            </Typography>\n\n\n            <Accordion\n                expanded={expanded === \"one\"}\n                onChange={handleChange(\"one\")}\n            >\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel2a-content\"\n                    id=\"panel2a-header\"\n                >\n                    <Typography\n                        color=\"Grey\"\n                        fontSize=\"18px\"\n                    >\n                        What is Specular?\n                    </Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Typography\n                        align=\"justify\"\n                        fontSize=\"16px\"\n                    >\n                        <span>\n                        Specular Network is a Layer 2 scaling solution for Ethereum that uses optimistic rollup technology to scale the Ethereum network. It is still under development, but it has the potential to provide a number of benefits for Ethereum users, including scalability, security, and decentralization.\n                        </span>\n                    </Typography>\n                </AccordionDetails>\n            </Accordion>\n\n            <Accordion\n                expanded={expanded === \"two\"}\n                onChange={handleChange(\"two\")}\n            >\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel2a-content\"\n                    id=\"panel2a-header\"\n                >\n                    <Typography\n                        color=\"Grey\"\n                        fontSize=\"18px\"\n                    >\n                        What is Specular Bridge?\n                    </Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Typography\n                        align=\"justify\"\n                        fontSize=\"16px\"\n                    >\n                        <span>\n                        The Specular Network Bridge is a two-way bridge that allows users to transfer assets between Ethereum and Specular Network. It is still in beta, but it is expected to be released to the public in the near future. The bridge offers low fees, high throughput, and security.\n                        </span>\n                    </Typography>\n                </AccordionDetails>\n            </Accordion>\n\n            <Accordion\n                expanded={expanded === \"three\"}\n                onChange={handleChange(\"three\")}\n            >\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel2a-content\"\n                    id=\"panel2a-header\"\n                >\n                    <Typography\n                        color=\"Grey\"\n                        fontSize=\"18px\"\n                    >\n                        What chains are supported By Specular Bridge?\n                    </Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Typography\n                        align=\"justify\"\n                        fontSize=\"16px\"\n                    >\n                        <span>\n                        As of today, Specular Network only supports Chiado. However, the team has plans to support other chains in the future.\n                        </span>\n                    </Typography>\n                </AccordionDetails>\n            </Accordion>\n\n            <div ref={getMoreFaqRef} />\n        </Container>\n    );\n};\n\nexport default FAQ;\n\n","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/header/header.view.tsx",["421"],"import useHeaderStyles from './header.styles'\nimport Logo  from '../../images/logo.svg'\nimport TestnetLogo  from '../../images/testnet-logo.svg'\n\nfunction Header () {\n  const classes = useHeaderStyles()\n  return (\n    <div className={classes.header}>\n                <div>\n                    <div>\n                        <div className={classes.title}> \n                        <img src={Logo} alt=\"xDAI to ETH\" className={classes.logo}/> Specular Bridge\n                        </div>\n                    </div>\n                </div>\n            </div>\n  )\n}\n\nexport default Header\n","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/stepper/stepper.styles.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/footer/footer.styles.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/constants.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/header/header.styles.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/hooks/use-stepper-data.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/hooks/use-wallet.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/hooks/use-window-size.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/hooks/use-deposit.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/hooks/use-finalize-deposit.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/deposit-form/deposit-form.view.tsx",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/withdraw-form/withdraw-form.view.tsx",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/tx-confirm/tx-confirm.view.tsx",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/login/login.view.tsx",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/network-error/network-error.view.tsx",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/tx-pending/tx-pending.view.tsx",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/data-loader/data-loader.tsx",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/tx-finalize-deposit/tx-finalize-deposit.view.tsx",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/tx-overview/tx-overview.view.tsx",["422"],"import Header from '../shared/header/header.view';\nimport useTxOverviewStyles from './tx-overview.styles';\nimport { ReactComponent as CheckIcon } from '../../images/check-icon.svg';\nimport { ReactComponent as LinkIcon } from '../../images/link-icon.svg';\nimport { ReactComponent as MetaMaskLogo } from '../../images/metamask-logo.svg';\nimport useWatchAsset from '../../hooks/use-watch-asset';\nimport { NETWORKS } from '../../chains';\n\ninterface TxOverviewProps {\n  wallet: {\n    address: string;\n    chainId: string;\n  };\n  depositData: {\n    status: string;\n    data?: {\n      hash: string;\n    };\n  };\n  onDisconnectWallet: () => void;\n  isMetamask: boolean;\n}\n\nfunction TxOverview({\n  wallet,\n  depositData,\n  onDisconnectWallet,\n  isMetamask,\n}: TxOverviewProps) {\n  const classes = useTxOverviewStyles();\n  const watchAsset = useWatchAsset();\n\n  return (\n    <div className={classes.txOverview}>\n      <Header\n        address={wallet.address}\n        title={`xDAI → ETH`}\n        onDisconnectWallet={onDisconnectWallet}\n      />\n      <CheckIcon className={classes.checkIcon} />\n      <div className={classes.buttonGroup}>\n        <a\n          className={classes.button}\n          href={`${NETWORKS[wallet.chainId].blockExplorerUrl}/tx/${depositData?.data?.hash}`}\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          Check transaction details here\n          <LinkIcon className={classes.buttonIcon} />\n        </a>\n        {isMetamask && (\n          <button className={classes.button}>\n            Add xDAI token to MetaMask\n            <MetaMaskLogo className={classes.buttonIcon} />\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default TxOverview;\n","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/chains.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/utils.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/hooks/use-deposit-form-data.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/deposit-form/deposit-form.styles.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/withdraw-form/withdraw-form.styles.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/tx-confirm/tx-confirm.styles.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/login/login.styles.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/network-error/network-error.styles.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/tx-finalize-deposit/tx-finalize-deposit.styles.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/tx-overview/tx-overview.styles.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/tx-pending/tx-pending.styles.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/data-loader/data-loader.styles.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/hooks/use-watch-asset.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/shared/header/header.view.tsx",["423","424","425"],"import { formatUnits } from 'ethers/lib/utils';\nimport useHeaderStyles from './header.styles';\nimport { ReactComponent as ArrowLeft } from '../../../images/arrow-left.svg';\nimport { ReactComponent as CrossIcon } from '../../../images/cross-icon.svg';\n\ninterface HeaderProps {\n  address?: string;\n  title: string;\n  onDisconnectWallet?: () => void;\n}\n\nfunction Header({ address, title, onDisconnectWallet }: HeaderProps): JSX.Element {\n  const classes = useHeaderStyles();\n\n  function getPartiallyHiddenEthereumAddress(ethereumAddress: string): string {\n    const firstAddressSlice = ethereumAddress.slice(0, 6);\n    const secondAddressSlice = ethereumAddress.slice(\n      ethereumAddress.length - 4,\n      ethereumAddress.length\n    );\n\n    return `${firstAddressSlice} *** ${secondAddressSlice}`;\n  }\n\n  return (\n    <div className={classes.header}>\n      <p className={classes.title}>{title}</p>\n      {address && (\n        <p className={classes.address}>{getPartiallyHiddenEthereumAddress(address)}</p>\n      )}\n      {onDisconnectWallet && (\n        <button className={classes.disconnectButton} onClick={onDisconnectWallet}>\n          Disconnect\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport default Header;\n","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/shared/spinner/spinner.view.tsx",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/shared/spinner/spinner.styles.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/views/shared/header/header.styles.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/SequencerInbox__factory.ts",["426"],"/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { PromiseOrValue } from \"../../common\";\nimport type {\n  SequencerInbox,\n  SequencerInboxInterface,\n} from \"../../src/SequencerInbox\";\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"EmptyBatch\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"sequencer\",\n        type: \"address\",\n      },\n    ],\n    name: \"NotSequencer\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"ProofVerificationFailed\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"TxBatchDataOverflow\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"ZeroAddress\",\n    type: \"error\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"previousAdmin\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"newAdmin\",\n        type: \"address\",\n      },\n    ],\n    name: \"AdminChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"beacon\",\n        type: \"address\",\n      },\n    ],\n    name: \"BeaconUpgraded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint8\",\n        name: \"version\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"Initialized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"batchNumber\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"startTxNumber\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"endTxNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TxBatchAppended\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"implementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"Upgraded\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"accumulators\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"contexts\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"txLengths\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"firstL2BlockNumber\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"txBatch\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"appendTxBatch\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getInboxSize\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_sequencerAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"sequencerAddress\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newImplementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"upgradeTo\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newImplementation\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes\",\n        name: \"encodedTx\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"proof\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"verifyTxInclusion\",\n    outputs: [],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nconst _bytecode =\n  \"0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516118b7610119600039600081816102550152818161029e0152818161033e0152818161037e015261041101526118b76000f3fe6080604052600436106100a75760003560e01c8063715018a611610064578063715018a6146101765780638da5cb5b1461018b578063c4d66de8146101a9578063e1804b49146101c9578063f2fde38b146101e9578063f785968f1461020957600080fd5b80631f67994e146100ac57806329869a7f146100df5780632cee6a6b146100f45780633659cfe61461012c5780634f1ef2861461014e57806352d1902d14610161575b600080fd5b3480156100b857600080fd5b506100cc6100c7366004611354565b610229565b6040519081526020015b60405180910390f35b3480156100eb57600080fd5b5060c9546100cc565b34801561010057600080fd5b5060cb54610114906001600160a01b031681565b6040516001600160a01b0390911681526020016100d6565b34801561013857600080fd5b5061014c610147366004611389565b61024a565b005b61014c61015c3660046113ba565b610333565b34801561016d57600080fd5b506100cc610404565b34801561018257600080fd5b5061014c6104b7565b34801561019757600080fd5b506097546001600160a01b0316610114565b3480156101b557600080fd5b5061014c6101c4366004611389565b6104cb565b3480156101d557600080fd5b5061014c6101e4366004611503565b610626565b3480156101f557600080fd5b5061014c610204366004611389565b61092f565b34801561021557600080fd5b5061014c6102243660046115a7565b6109a5565b60ca818154811061023957600080fd5b600091825260209091200154905081565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561029c5760405162461bcd60e51b815260040161029390611613565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166102e560008051602061183b833981519152546001600160a01b031690565b6001600160a01b03161461030b5760405162461bcd60e51b81526004016102939061165f565b61031481610cbb565b6040805160008082526020820190925261033091839190610cc3565b50565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561037c5760405162461bcd60e51b815260040161029390611613565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103c560008051602061183b833981519152546001600160a01b031690565b6001600160a01b0316146103eb5760405162461bcd60e51b81526004016102939061165f565b6103f482610cbb565b61040082826001610cc3565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104a45760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610293565b5060008051602061183b83398151915290565b6104bf610e42565b6104c96000610e9c565b565b600054610100900460ff16158080156104eb5750600054600160ff909116105b806105055750303b158015610505575060005460ff166001145b6105685760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610293565b6000805460ff19166001179055801561058b576000805461ff0019166101001790555b6001600160a01b0382166105b25760405163d92e233d60e01b815260040160405180910390fd5b60cb80546001600160a01b0319166001600160a01b0384161790556105d5610eee565b6105dd610f1d565b8015610400576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60cb546001600160a01b031633146106665760cb54604051630545cff960e21b81523360048201526001600160a01b039091166024820152604401610293565b60c95460ca54600090156106a25760ca8054610684906001906116c1565b81548110610694576106946116d8565b906000526020600020015490505b600085815b8a6106b38260026116ee565b116108735760008c8c6106c78460016116ee565b8181106106d6576106d66116d8565b60cb5460405160609190911b6bffffffffffffffffffffffff191660208083019190915260348201889052919091029290920135605483018190529250600091607401905060405160208183030381529060405280519060200120905060008e8e85818110610747576107476116d8565b90506020020135905060005b8181101561084e5760008e8e60c9548c61076d91906116c1565b81811061077c5761077c6116d8565b602002919091013591508b9050610793828a6116ee565b11156107b25760405163020516e760e31b815260040160405180910390fd5b60008c898d6107c185836116ee565b926107ce93929190611706565b6040516107dc929190611730565b60408051918290038220602083018d90529082018d90526060820187905260808201819052915060a001604051602081830303815290604052805190602001209950818961082a91906116ee565b98508a61083681611740565b9b50505050808061084690611740565b915050610753565b508461085981611740565b95505050505060028161086c91906116ee565b90506106a7565b5060c95484116108965760405163c2e5347d60e01b815260040160405180910390fd5b60c980549085905560ca80546001818101835560008390527f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee190910186905590547f0611f4b7c4b81a9158f0c0e9aae0a88c50eaa3efdaee2f87bd796c8c6ef7bffc91610902916116c1565b60c954604080519283526020830185905282015260600160405180910390a1505050505050505050505050565b610937610e42565b6001600160a01b03811661099c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610293565b61033081610e9c565b6000806109e984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250610f44915050565b8092508193505050600080600080610a3888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250610fbe915050565b8095508197505050610a8188888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250610fbe915050565b8094508197505050610aca88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250610fbe915050565b8093508197505050610b1388888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250610f44915050565b6040519197509150600090610b2b908c908c90611730565b60408051918290038220602083018590529082018690526060820188905260808201819052915060a0016040516020818303038152906040528051906020012091508380610b7890611740565b94505060005b83811015610c7057610bc78a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c9250610f44915050565b8098508199505050610c108a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c9250610f44915050565b6040805160208101879052908101889052606081018a905260808101829052919950925060a0016040516020818303038152906040528051906020012092508480610c5a90611740565b9550508080610c6890611740565b915050610b7e565b5060ca8581548110610c8457610c846116d8565b90600052602060002001548214610cae57604051631ac2386360e31b815260040160405180910390fd5b5050505050505050505050565b610330610e42565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610cfb57610cf68361102c565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3457600080fd5b505afa925050508015610d64575060408051601f3d908101601f19168201909252610d619181019061175b565b60015b610dc75760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610293565b60008051602061183b8339815191528114610e365760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610293565b50610cf68383836110c8565b6097546001600160a01b031633146104c95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610293565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610f155760405162461bcd60e51b815260040161029390611774565b6104c96110f3565b600054610100900460ff166104c95760405162461bcd60e51b815260040161029390611774565b60008082845110158015610f6557506020838551610f6291906116c1565b10155b610f9d5760405162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b6044820152606401610293565b610fa88360206116ee565b610fb28585611123565b915091505b9250929050565b60008082845110158015610fdf57506020838551610fdc91906116c1565b10155b6110175760405162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b6044820152606401610293565b6110228360206116ee565b610fb28585611181565b6001600160a01b0381163b6110995760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610293565b60008051602061183b83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6110d1836111d6565b6000825111806110de5750805b15610cf6576110ed8383611216565b50505050565b600054610100900460ff1661111a5760405162461bcd60e51b815260040161029390611774565b6104c933610e9c565b60006111308260206116ee565b835110156111785760405162461bcd60e51b8152602060048201526015602482015274746f427974657333325f6f75744f66426f756e647360581b6044820152606401610293565b50016020015190565b600061118e8260206116ee565b835110156111785760405162461bcd60e51b8152602060048201526015602482015274746f55696e743235365f6f75744f66426f756e647360581b6044820152606401610293565b6111df8161102c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61127e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610293565b600080846001600160a01b03168460405161129991906117eb565b600060405180830381855af49150503d80600081146112d4576040519150601f19603f3d011682016040523d82523d6000602084013e6112d9565b606091505b5091509150611301828260405180606001604052806027815260200161185b6027913961130a565b95945050505050565b60608315611319575081611323565b611323838361132a565b9392505050565b81511561133a5781518083602001fd5b8060405162461bcd60e51b81526004016102939190611807565b60006020828403121561136657600080fd5b5035919050565b80356001600160a01b038116811461138457600080fd5b919050565b60006020828403121561139b57600080fd5b6113238261136d565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156113cd57600080fd5b6113d68361136d565b9150602083013567ffffffffffffffff808211156113f357600080fd5b818501915085601f83011261140757600080fd5b813581811115611419576114196113a4565b604051601f8201601f19908116603f01168101908382118183101715611441576114416113a4565b8160405282815288602084870101111561145a57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008083601f84011261148e57600080fd5b50813567ffffffffffffffff8111156114a657600080fd5b6020830191508360208260051b8501011115610fb757600080fd5b60008083601f8401126114d357600080fd5b50813567ffffffffffffffff8111156114eb57600080fd5b602083019150836020828501011115610fb757600080fd5b60008060008060008060006080888a03121561151e57600080fd5b873567ffffffffffffffff8082111561153657600080fd5b6115428b838c0161147c565b909950975060208a013591508082111561155b57600080fd5b6115678b838c0161147c565b909750955060408a0135945060608a013591508082111561158757600080fd5b506115948a828b016114c1565b989b979a50959850939692959293505050565b600080600080604085870312156115bd57600080fd5b843567ffffffffffffffff808211156115d557600080fd5b6115e1888389016114c1565b909650945060208701359150808211156115fa57600080fd5b50611607878288016114c1565b95989497509550505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000828210156116d3576116d36116ab565b500390565b634e487b7160e01b600052603260045260246000fd5b60008219821115611701576117016116ab565b500190565b6000808585111561171657600080fd5b8386111561172357600080fd5b5050820193919092039150565b8183823760009101908152919050565b6000600019821415611754576117546116ab565b5060010190565b60006020828403121561176d57600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b838110156117da5781810151838201526020016117c2565b838111156110ed5750506000910152565b600082516117fd8184602087016117bf565b9190910192915050565b60208152600082518060208401526118268160408501602087016117bf565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122053b4e7861342b696ae65038607be48452ac131c7cc0a94c415fecf94602ad3fc64736f6c63430008090033\";\n\ntype SequencerInboxConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: SequencerInboxConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class SequencerInbox__factory extends ContractFactory {\n  constructor(...args: SequencerInboxConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<SequencerInbox> {\n    return super.deploy(overrides || {}) as Promise<SequencerInbox>;\n  }\n  override getDeployTransaction(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override attach(address: string): SequencerInbox {\n    return super.attach(address) as SequencerInbox;\n  }\n  override connect(signer: Signer): SequencerInbox__factory {\n    return super.connect(signer) as SequencerInbox__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): SequencerInboxInterface {\n    return new utils.Interface(_abi) as SequencerInboxInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): SequencerInbox {\n    return new Contract(address, _abi, signerOrProvider) as SequencerInbox;\n  }\n}\n","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/ISequencerInbox__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/IRollup__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/IDAProvider__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/Rollup.sol/Rollup__factory.ts",["427"],"/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { PromiseOrValue } from \"../../../common\";\nimport type { Rollup, RollupInterface } from \"../../../src/Rollup.sol/Rollup\";\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"AssertionAlreadyResolved\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"AssertionOutOfRange\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"ChallengedStaker\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"ConfirmationPeriodPending\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"DuplicateAssertion\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"EmptyAssertion\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"staker1Challenge\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"staker2Challenge\",\n        type: \"address\",\n      },\n    ],\n    name: \"InDifferentChallenge\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"InboxReadLimitExceeded\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"InsufficientStake\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"InvalidConfigChange\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"InvalidInboxSize\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"InvalidParent\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"MinimumAssertionPeriodNotPassed\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"NoStaker\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"NoUnresolvedAssertion\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"NotAllStaked\",\n    type: \"error\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"challenge\",\n        type: \"address\",\n      },\n    ],\n    name: \"NotChallengeManager\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"NotInChallenge\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"NotSiblings\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"NotStaked\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"ParentAssertionUnstaked\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"PreviousStateHash\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"StakedOnUnconfirmedAssertion\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"StakerStakedOnTarget\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"StakersPresent\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"TransferFailed\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"UnproposedAssertion\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"WrongOrder\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"ZeroAddress\",\n    type: \"error\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"previousAdmin\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"newAdmin\",\n        type: \"address\",\n      },\n    ],\n    name: \"AdminChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"assertionID\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"challengeAddr\",\n        type: \"address\",\n      },\n    ],\n    name: \"AssertionChallenged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"assertionID\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"AssertionConfirmed\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"assertionID\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"asserterAddr\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"vmHash\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"AssertionCreated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"assertionID\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"AssertionRejected\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"beacon\",\n        type: \"address\",\n      },\n    ],\n    name: \"BeaconUpgraded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [],\n    name: \"ConfigChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint8\",\n        name: \"version\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"Initialized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"stakerAddr\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"assertionID\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"StakerStaked\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"implementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"Upgraded\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"assertionID\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"advanceStake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"assertions\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"stateHash\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"inboxSize\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"parent\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"proposalTime\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"numStakers\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"childInboxSize\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"baseStakeAmount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[2]\",\n        name: \"players\",\n        type: \"address[2]\",\n      },\n      {\n        internalType: \"uint256[2]\",\n        name: \"assertionIDs\",\n        type: \"uint256[2]\",\n      },\n    ],\n    name: \"challengeAssertion\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"challengePeriod\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"winner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"loser\",\n        type: \"address\",\n      },\n    ],\n    name: \"completeChallenge\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"confirmFirstUnresolvedAssertion\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"confirmationPeriod\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"confirmedInboxSize\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"vmHash\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"inboxSize\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"createAssertion\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"currentRequiredStake\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"daProvider\",\n    outputs: [\n      {\n        internalType: \"contract IDAProvider\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"assertionID\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getAssertion\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes32\",\n            name: \"stateHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"inboxSize\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"parent\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"proposalTime\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"numStakers\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"childInboxSize\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct IRollup.Assertion\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLastConfirmedAssertionID\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"addr\",\n        type: \"address\",\n      },\n    ],\n    name: \"getStaker\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"isStaked\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"amountStaked\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"assertionID\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"currentChallenge\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IRollup.Staker\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_vault\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_daProvider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_verifier\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_confirmationPeriod\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_challengePeriod\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_minimumAssertionPeriod\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_baseStakeAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_initialAssertionID\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_initialInboxSize\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_initialVMhash\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"assertionID\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"stakerAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"isStakedOnAssertion\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"lastConfirmedAssertionID\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"lastCreatedAssertionID\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"lastResolvedAssertionID\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"minimumAssertionPeriod\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"numStakers\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"stakerAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"rejectFirstUnresolvedAssertion\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"stakerAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"removeStake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"newAmount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setBaseStakeAmount\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"newPeriod\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setChallengePeriod\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"newPeriod\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setConfirmationPeriod\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newDAProvider\",\n        type: \"address\",\n      },\n    ],\n    name: \"setDAProvider\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"newPeriod\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setMinimumAssertionPeriod\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"stake\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"stakers\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"isStaked\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amountStaked\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"assertionID\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"currentChallenge\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"stakeAmount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"unstake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newImplementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"upgradeTo\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newImplementation\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"vault\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"verifier\",\n    outputs: [\n      {\n        internalType: \"contract IVerifier\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"withdraw\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"withdrawableFunds\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"zombies\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"stakerAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"lastAssertionID\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nconst _bytecode =\n  \"0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516143fd62000120600039600081816110ad015281816110f60152818161136a015281816113aa015261143901526143fd6000f3fe60806040526004361061025c5760003560e01c80636c8b052a11610144578063b6da898f116100b6578063f397e38e1161007a578063f397e38e146108b4578063f3f480d9146108d4578063fa7803e6146108ea578063fb1b33371461090a578063fbfa77cf1461092a578063fe2ba8481461094a57600080fd5b8063b6da898f146107d7578063bea50ae3146107f7578063c94b584714610817578063e58dda891461083e578063f2fde38b1461089457600080fd5b80638eb8198e116101085780638eb8198e146106225780639168ae7214610642578063948d6588146106bc578063a23c44b1146106dc578063a56ba93b146107ab578063b553ee84146107c157600080fd5b80636c8b052a146105a357806371129559146105b9578063715018a6146105cf5780638821b2ae146105e45780638da5cb5b1461060457600080fd5b80633659cfe6116101dd5780634d26732d116101a15780634d26732d146104a45780634f1ef286146104b9578063524232f6146104cc57806352d1902d146105595780635d475fdd1461056e5780636afcc33c1461058e57600080fd5b80633659cfe6146104315780633986e6fc146104515780633a4b66f1146104715780633ccfd60b1461047957806345e38b641461048e57600080fd5b80632906040e116102245780632906040e146103775780632b7ac3f31461038c5780632e17de78146103c45780632f06d1b0146103e45780632f30cabd1461040457600080fd5b80630429b88014610261578063042dca931461028a578063107035a4146102ac5780631d99e167146102c25780632052465e14610338575b600080fd5b34801561026d57600080fd5b5061027760c95481565b6040519081526020015b60405180910390f35b34801561029657600080fd5b506102aa6102a536600461274b565b61096a565b005b3480156102b857600080fd5b5061027760d25481565b3480156102ce57600080fd5b506102e26102dd366004612766565b610b2e565b6040516102819190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b34801561034457600080fd5b50610358610353366004612766565b610bd4565b604080516001600160a01b039093168352602083019190915201610281565b34801561038357600080fd5b506102aa610c0c565b34801561039857600080fd5b5060cf546103ac906001600160a01b031681565b6040516001600160a01b039091168152602001610281565b3480156103d057600080fd5b506102aa6103df366004612766565b610d4e565b3480156103f057600080fd5b506103ac6103ff366004612790565b610e46565b34801561041057600080fd5b5061027761041f36600461274b565b60d76020526000908152604090205481565b34801561043d57600080fd5b506102aa61044c36600461274b565b6110a2565b34801561045d57600080fd5b506102aa61046c366004612766565b61118b565b6102aa6111e3565b34801561048557600080fd5b506102aa6112df565b34801561049a57600080fd5b5061027760cb5481565b3480156104b057600080fd5b5060cc54610277565b6102aa6104c73660046127db565b61135f565b3480156104d857600080fd5b506105246104e7366004612766565b60d3602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610281565b34801561056557600080fd5b5061027761142c565b34801561057a57600080fd5b506102aa610589366004612766565b6114df565b34801561059a57600080fd5b5060d154610277565b3480156105af57600080fd5b5061027760d55481565b3480156105c557600080fd5b5061027760cc5481565b3480156105db57600080fd5b506102aa61152a565b3480156105f057600080fd5b506102aa6105ff366004612766565b61153c565b34801561061057600080fd5b506097546001600160a01b03166103ac565b34801561062e57600080fd5b5060ce546103ac906001600160a01b031681565b34801561064e57600080fd5b5061069161065d36600461274b565b60d660205260009081526040902080546001820154600283015460039093015460ff9092169290916001600160a01b031684565b6040805194151585526020850193909352918301526001600160a01b03166060820152608001610281565b3480156106c857600080fd5b506102aa6106d7366004612766565b6115ec565b3480156106e857600080fd5b5061076d6106f736600461274b565b60408051608080820183526000808352602080840182905283850182905260609384018290526001600160a01b03958616825260d681529084902084519283018552805460ff16151583526001810154918301919091526002810154938201939093526003909201549092169181019190915290565b604051610281919081511515815260208083015190820152604080830151908201526060918201516001600160a01b03169181019190915260800190565b3480156107b757600080fd5b5061027760d15481565b3480156107cd57600080fd5b5061027760d05481565b3480156107e357600080fd5b506102aa6107f236600461289d565b611637565b34801561080357600080fd5b506102aa610812366004612766565b611801565b34801561082357600080fd5b5060d154600090815260d36020526040902060010154610277565b34801561084a57600080fd5b506108846108593660046128bf565b600091825260d4602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6040519015158152602001610281565b3480156108a057600080fd5b506102aa6108af36600461274b565b61184c565b3480156108c057600080fd5b506102aa6108cf36600461274b565b6118c2565b3480156108e057600080fd5b5061027760ca5481565b3480156108f657600080fd5b506102aa6109053660046128e2565b611923565b34801561091657600080fd5b506102aa61092536600461290c565b611b5d565b34801561093657600080fd5b5060cd546103ac906001600160a01b031681565b34801561095657600080fd5b506102aa61096536600461274b565b611d74565b60d25460d0541061098e57604051636fb7511d60e11b815260040160405180910390fd5b600060d054600161099f91906129a6565b600081815260d36020526040902060d154600282015492935090911415610a9e5780600301544310156109e557604051630edbd4a560e31b815260040160405180910390fd5b6109ee83611e3e565b6001600160a01b038316600090815260d66020526040902060020154821115610a2a57604051632d10e3f360e21b815260040160405180910390fd5b600082815260d4602090815260408083206001600160a01b0387168452918290529091205460ff1615610a705760405163c67bd77760e01b815260040160405180910390fd5b610a7983611e76565b826005015414610a9c576040516341a051e360e01b815260040160405180910390fd5b505b60d08054906000610aae836129be565b91905055507f5b24ab8ceb442373727ac5c559a027521cb52db451c74710ebed9faa5fe15a7c60d054604051610ae691815260200190565b60405180910390a1505060d054600090815260d36020526040812081815560018101829055600281018290556003810182905560048101829055600581018290556006015550565b610b716040518060e00160405280600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b50600090815260d36020908152604091829020825160e081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a082015260069091015460c082015290565b60d88181548110610be457600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b60d25460d05410610c3057604051636fb7511d60e11b815260040160405180910390fd5b600060d55411610c5357604051631090380d60e01b815260040160405180910390fd5b600060d0546001610c6491906129a6565b600081815260d360205260409020600381015491925090431015610c9b57604051630edbd4a560e31b815260040160405180910390fd5b60d154816002015414610cc157604051630bea7bb360e31b815260040160405180910390fd5b60d554610ccd83611e76565b610cd791906129a6565b816005015414610cf95760405162d1c60960e51b815260040160405180910390fd5b60d08054906000610d09836129be565b909155505060d05460d18190556040519081527f453430d123684340024ae0a229704bdab39c93dc48bb5a0b4bc83142d95d48ef906020015b60405180910390a15050565b610d5733611e3e565b33600090815260d66020526040902060d15460028201541115610d8d57604051633814754d60e21b815260040160405180910390fd5b60cc548160010154610d9f91906129d9565b821115610dbf576040516378de4a6960e11b815260040160405180910390fd5b81816001016000828254610dd391906129d9565b9091555050604051600090339084908381818185875af1925050503d8060008114610e1a576040519150601f19603f3d011682016040523d82523d6000602084013e610e1f565b606091505b5050905080610e41576040516312171d8360e31b815260040160405180910390fd5b505050565b8035600081815260d36020908152604082206002015491929190840135808310610e83576040516304b4359960e11b815260040160405180910390fd5b60d254811115610ea6576040516381976cb960e01b815260040160405180910390fd5b8260d15410610ec857604051632d10e3f360e21b815260040160405180910390fd5b600081815260d360205260409020600201548214610ef95760405163a3fbefb960e01b815260040160405180910390fd5b506000610f09602087018761274b565b90506000610f1d604088016020890161274b565b9050610f2882611f03565b610f3181611f03565b6000604051610f3f90612722565b604051809103906000f080158015610f5b573d6000803e3d6000fd5b506001600160a01b03838116600090815260d660209081526040808320600390810180548787166001600160a01b03199182168117909255958a16855293829020018054909416831790935582518981529081019190915291925082917fd0ebe74b4f7d89a9b0fdc9d95f887a7b925c6c7300b5c4b2c3304d97925840fa910160405180910390a160cf5460ce54600087815260d36020526040808220548a8352918190205460ca5491516301065adb60e71b81526001600160a01b038a8116600483015289811660248301529586166044820152938516606485015230608485015260a484019290925260c483019190915260e48201529083169063832d6d809061010401600060405180830381600087803b15801561107b57600080fd5b505af115801561108f573d6000803e3d6000fd5b5092985050505050505050505b92915050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156110f45760405162461bcd60e51b81526004016110eb90612a06565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661113d600080516020614361833981519152546001600160a01b031690565b6001600160a01b0316146111635760405162461bcd60e51b81526004016110eb90612a52565b61116c81611f48565b6040805160008082526020820190925261118891839190611f50565b50565b6111936120ca565b60d05460d2541415806111a7575060cc5481115b156111c45760405162512a5960e01b815260040160405180910390fd5b60cc81905560405160008051602061438183398151915290600090a150565b33600090815260d6602052604090205460ff16156112285733600090815260d660205260408120600101805434929061121d9084906129a6565b909155506112dd9050565b60cc5434101561124b576040516378de4a6960e11b815260040160405180910390fd5b60408051608081018252600180825234602080840191825260008486018181526060860182815233835260d69093529581209451855460ff19169015151785559151928401929092559251600283015551600390910180546001600160a01b0319166001600160a01b0390921691909117905560d58054916112cc836129be565b91905055506112dd3360d154612124565b565b33600081815260d76020526040808220805490839055905190929083908381818185875af1925050503d8060008114611334576040519150601f19603f3d011682016040523d82523d6000602084013e611339565b606091505b505090508061135b576040516312171d8360e31b815260040160405180910390fd5b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156113a85760405162461bcd60e51b81526004016110eb90612a06565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166113f1600080516020614361833981519152546001600160a01b031690565b6001600160a01b0316146114175760405162461bcd60e51b81526004016110eb90612a52565b61142082611f48565b61135b82826001611f50565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114cc5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016110eb565b5060008051602061436183398151915290565b6114e76120ca565b60d05460d254111561150b5760405162512a5960e01b815260040160405180910390fd5b60ca81905560405160008051602061438183398151915290600090a150565b6115326120ca565b6112dd60006121c6565b33600090815260d6602052604090205460ff1661156b576040516273e5c360e31b815260040160405180910390fd5b33600090815260d66020526040902060028101548211158061158e575060d25482115b156115ac57604051632caca6cf60e01b815260040160405180910390fd5b600082815260d36020526040902060029081015490820154146115e25760405163044bc3e360e41b815260040160405180910390fd5b61135b3383612124565b6115f46120ca565b60d05460d25411156116185760405162512a5960e01b815260040160405180910390fd5b60cb81905560405160008051602061438183398151915290600090a150565b33600090815260d6602052604090205460ff16611666576040516273e5c360e31b815260040160405180910390fd5b33600090815260d6602090815260408083206002015480845260d390925290912060cb54600482015461169990436129d9565b10156116b857604051632646c5bd60e21b815260040160405180910390fd5b806001015483116116dc5760405163f8748b7960e01b815260040160405180910390fd5b60ce60009054906101000a90046001600160a01b03166001600160a01b03166329869a7f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561172a57600080fd5b505afa15801561173e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117629190612a9e565b831115611782576040516359f175b760e01b815260040160405180910390fd5b60d28054906000611792836129be565b909155505060d2546040805191825233602083015281018590527ff41917cc5ddc34dc57b3ea71e866801af6a254bddeadaffd1177ad8e46cb0d6b9060600160405180910390a16117ef60d2548585856117ea612218565b61222d565b6117fb3360d254612124565b50505050565b6118096120ca565b60d05460d254111561182d5760405162512a5960e01b815260040160405180910390fd5b60c981905560405160008051602061438183398151915290600090a150565b6118546120ca565b6001600160a01b0381166118b95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016110eb565b611188816121c6565b6118ca6120ca565b60d05460d25411156118ee5760405162512a5960e01b815260040160405180910390fd5b60ce80546001600160a01b0319166001600160a01b03831617905560405160008051602061438183398151915290600090a150565b600061192f838361233c565b9050336001600160a01b0382161461196b57604051631033979d60e11b81523360048201526001600160a01b03821660248201526044016110eb565b6001600160a01b03808316600090815260d66020526040808220600190810154938716835291200154808211156119f7576001600160a01b038416600090815260d6602052604090206001018190556119c481836129d9565b6001600160a01b038516600090815260d76020526040812080549091906119ec9084906129a6565b925050819055508091505b6000611a04600284612ab7565b6001600160a01b038716600090815260d66020526040812060010180549293508392909190611a349084906129a6565b90915550506001600160a01b038616600090815260d66020526040902060030180546001600160a01b0319169055611a6c81846129d9565b60cd546001600160a01b0316600090815260d7602052604081208054909190611a969084906129a6565b90915550506001600160a01b038516600090815260d66020526040902060020154611ac0866123d9565b604080518082019091526001600160a01b0396871681526020810191825260d8805460018101825560009190915290517f5320ad99a619a90804cd2efe3a5cf0ac1ac5c41ad9ff2c61cf699efdad771096600290920291820180546001600160a01b0319169190981617909655517f5320ad99a619a90804cd2efe3a5cf0ac1ac5c41ad9ff2c61cf699efdad771097909501949094555050505050565b600054610100900460ff1615808015611b7d5750600054600160ff909116105b80611b975750303b158015611b97575060005460ff166001145b611bfa5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016110eb565b6000805460ff191660011790558015611c1d576000805461ff0019166101001790555b6001600160a01b038b161580611c3a57506001600160a01b038a16155b80611c4c57506001600160a01b038916155b15611c6a5760405163d92e233d60e01b815260040160405180910390fd5b60cd80546001600160a01b03808e166001600160a01b03199283161790925560ce80548d841690831617905560cf8054928c169290911691909117905560c988905560ca87905560cb86905560cc85905560d084905560d184905560d2849055611cd7848385824361222d565b60d2546040805191825233602083015281018390527ff41917cc5ddc34dc57b3ea71e866801af6a254bddeadaffd1177ad8e46cb0d6b9060600160405180910390a1611d2161242f565b8015611d67576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b611d7d81611e3e565b6001600160a01b038116600090815260d66020526040902060d15460028201541115611dbc57604051633814754d60e21b815260040160405180910390fd5b6001810154611dca836123d9565b6000836001600160a01b03168260405160006040518083038185875af1925050503d8060008114611e17576040519150601f19603f3d011682016040523d82523d6000602084013e611e1c565b606091505b50509050806117fb576040516312171d8360e31b815260040160405180910390fd5b6001600160a01b038116600090815260d6602052604090205460ff16611188576040516273e5c360e31b815260040160405180910390fd5b600080805b60d854811015611efc57600084815260d46020526040812060d8805491929184908110611eaa57611eaa6129f0565b600091825260208083206002909202909101546001600160a01b0316835282019290925260400190205460ff1615611eea5781611ee6816129be565b9250505b80611ef4816129be565b915050611e7b565b5092915050565b611f0c81611e3e565b6001600160a01b03818116600090815260d6602052604090206003015416156111885760405163e5e0e82b60e01b815260040160405180910390fd5b6111886120ca565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611f8357610e4183612466565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611fbc57600080fd5b505afa925050508015611fec575060408051601f3d908101601f19168201909252611fe991810190612a9e565b60015b61204f5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016110eb565b60008051602061436183398151915281146120be5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016110eb565b50610e41838383612502565b6097546001600160a01b031633146112dd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016110eb565b6001600160a01b038216600090815260d66020908152604080832060020184905583835260d3909152812060050180549161215e836129be565b9091555050600081815260d4602090815260408083206001600160a01b03861680855290835292819020805460ff1916600117905580519283529082018390527f617d31491414a4ab2bd831e566a31837fa7fb6582921c91dffbbe83fbca789f39101610d42565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060c9544361222891906129a6565b905090565b600082815260d36020908152604080832060d490925290912060068201548061225c57600683018690556122ae565b80861461227c57604051633ef41c6960e21b815260040160405180910390fd5b600087815260018301602052604090205460ff16156122ae5760405163dad07bab60e01b815260040160405180910390fd5b506000868152600191820160209081526040808320805460ff191685179055805160e081018252988952888201978852888101968752606089019586524360808a0190815260a08a0184815260c08b018581529b855260d390935292209751885595519187019190915592516002860155505160038401555160048301555160058201559051600690910155565b6001600160a01b03808316600090815260d6602052604080822084841683529082206003820154929391929091168061238857604051637c2f023d60e01b815260040160405180910390fd5b60038201546001600160a01b038281169116146123d057600382015460405162e82b8d60e51b81526001600160a01b03808416600483015290911660248201526044016110eb565b95945050505050565b60d580549060006123e983612ad9565b90915550506001600160a01b0316600090815260d660205260408120805460ff1916815560018101829055600281019190915560030180546001600160a01b0319169055565b600054610100900460ff166124565760405162461bcd60e51b81526004016110eb90612af0565b61245e612527565b6112dd612556565b6001600160a01b0381163b6124d35760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016110eb565b60008051602061436183398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61250b8361257d565b6000825111806125185750805b15610e41576117fb83836125bd565b600054610100900460ff1661254e5760405162461bcd60e51b81526004016110eb90612af0565b6112dd6126a8565b600054610100900460ff166112dd5760405162461bcd60e51b81526004016110eb90612af0565b61258681612466565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6126255760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016110eb565b600080846001600160a01b0316846040516126409190612b67565b600060405180830381855af49150503d806000811461267b576040519150601f19603f3d011682016040523d82523d6000602084013e612680565b606091505b50915091506123d082826040518060600160405280602781526020016143a1602791396126d8565b600054610100900460ff166126cf5760405162461bcd60e51b81526004016110eb90612af0565b6112dd336121c6565b606083156126e75750816126f1565b6126f183836126f8565b9392505050565b8151156127085781518083602001fd5b8060405162461bcd60e51b81526004016110eb9190612b83565b6117aa80612bb783390190565b80356001600160a01b038116811461274657600080fd5b919050565b60006020828403121561275d57600080fd5b6126f18261272f565b60006020828403121561277857600080fd5b5035919050565b806040810183101561109c57600080fd5b600080608083850312156127a357600080fd5b6127ad848461277f565b91506127bc846040850161277f565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156127ee57600080fd5b6127f78361272f565b9150602083013567ffffffffffffffff8082111561281457600080fd5b818501915085601f83011261282857600080fd5b81358181111561283a5761283a6127c5565b604051601f8201601f19908116603f01168101908382118183101715612862576128626127c5565b8160405282815288602084870101111561287b57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156128b057600080fd5b50508035926020909101359150565b600080604083850312156128d257600080fd5b823591506127bc6020840161272f565b600080604083850312156128f557600080fd5b6128fe8361272f565b91506127bc6020840161272f565b6000806000806000806000806000806101408b8d03121561292c57600080fd5b6129358b61272f565b995061294360208c0161272f565b985061295160408c0161272f565b999c989b5098996060810135995060808101359860a0820135985060c0820135975060e082013596506101008201359550610120909101359350915050565b634e487b7160e01b600052601160045260246000fd5b600082198211156129b9576129b9612990565b500190565b60006000198214156129d2576129d2612990565b5060010190565b6000828210156129eb576129eb612990565b500390565b634e487b7160e01b600052603260045260246000fd5b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600060208284031215612ab057600080fd5b5051919050565b600082612ad457634e487b7160e01b600052601260045260246000fd5b500490565b600081612ae857612ae8612990565b506000190190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015612b56578181015183820152602001612b3e565b838111156117fb5750506000910152565b60008251612b79818460208701612b3b565b9190910192915050565b6020815260008251806020840152612ba2816040850160208701612b3b565b601f01601f1916919091016040019291505056fe608060405234801561001057600080fd5b5061178a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063832d6d801161008c578063925f9a9611610066578063925f9a96146101ad5780639909e0d9146101b6578063cc8f6677146101c9578063e87e3589146101dc57600080fd5b8063832d6d80146101785780638a8cd2181461018b5780638b2999031461019357600080fd5b80635f41e3d6116100c85780635f41e3d61461013f578063638068db1461014857806370dea79a1461015d5780637f4c91c51461016557600080fd5b80632a51f6f7146100ef57806341e8510c1461010b578063534db0e214610114575b600080fd5b6100f860085481565b6040519081526020015b60405180910390f35b6100f860075481565b600454610127906001600160a01b031681565b6040516001600160a01b039091168152602001610102565b6100f860065481565b61015b61015636600461124e565b6101e4565b005b61015b6105b4565b600354610127906001600160a01b031681565b61015b61018636600461134d565b61061c565b610127610718565b6000546101a09060ff1681565b60405161010291906113ed565b6100f860055481565b61015b6101c4366004611407565b610791565b61015b6101d7366004611420565b610955565b6100f8610dc7565b6101ec610718565b6001600160a01b0316336001600160a01b03161461021d57604051631cc191eb60e31b815260040160405180910390fd5b610225610dc7565b60055461023290436114bf565b111561025157604051631ab7da6b60e01b815260040160405180910390fd5b6000610293858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250869150610e159050565b905060085481146102b75760405163365d598160e21b815260040160405180910390fd5b6000861180156102c657508386105b6103075760405162461bcd60e51b815260206004820152600d60248201526c0929cac82989288be929c888ab609b1b60448201526064015b60405180910390fd5b60016103146002846114ec565b11156103595760405162461bcd60e51b8152602060048201526014602482015273424953454354494f4e5f494e434f4d504c45544560601b60448201526064016102fe565b6001546001600160a01b031663f785968f6103748980611500565b8c8c6040518563ffffffff1660e01b81526004016103959493929190611570565b60006040518083038186803b1580156103ad57600080fd5b505afa1580156103c1573d6000803e3d6000fd5b5050505060006104068a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250610e4b915050565b9150508061041389610ec5565b146104315760405163c64c5f7d60e01b815260040160405180910390fd5b506000805461010090046001600160a01b031663401ebd6e878761045660018c6114bf565b818110610465576104656115a2565b905060200201358a8f8f6040518563ffffffff1660e01b815260040161048e94939291906115b8565b60206040518083038186803b1580156104a657600080fd5b505afa1580156104ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104de919061165c565b90508585888181106104f2576104f26115a2565b905060200201358114610509576105096000610f26565b506001905060005460ff166002811115610525576105256113d7565b141561055a5760055461053890436114bf565b60075461054591906114bf565b6007556000805460ff191660021790556105a4565b600260005460ff166002811115610573576105736113d7565b14156105a45760055461058690436114bf565b60065461059391906114bf565b6006556000805460ff191660011790555b5050436005555050505050505050565b6105bc610dc7565b6005546105c990436114bf565b116105e7576040516302eb354360e41b815260040160405180910390fd5b600260005460ff166002811115610600576106006113d7565b1415610612576106106001610f56565b565b6106106001611016565b6000805460ff166002811115610634576106346113d7565b146106515760405162dc149f60e41b815260040160405180910390fd5b6001600160a01b038816158061066e57506001600160a01b038716155b1561068c5760405163d92e233d60e01b815260040160405180910390fd5b600380546001600160a01b03998a166001600160a01b03199182161790915560048054988a16988216989098179097556000805460018054978b16978a169790971790965560028054958a1695909816949094178755600992909255600a55929094166101000260ff19166001600160a81b031990911617909117909155436005556006819055600755565b6000600260005460ff166002811115610733576107336113d7565b141561074957506003546001600160a01b031690565b600160005460ff166002811115610762576107626113d7565b141561077857506004546001600160a01b031690565b6040516321c4e35760e21b815260040160405180910390fd5b610799610718565b6001600160a01b0316336001600160a01b0316146107ca57604051631cc191eb60e31b815260040160405180910390fd5b6107d2610dc7565b6005546107df90436114bf565b11156107fe57604051631ab7da6b60e01b815260040160405180910390fd5b6008541561081e5760405162dc149f60e41b815260040160405180910390fd5b600081116108625760405162461bcd60e51b8152602060048201526011602482015270494e56414c49445f4e554d5f535445505360781b60448201526064016102fe565b610871600954600a54836110a4565b6008819055604080519182526000602083015281018290527f8c3cfc522d91af51bb14f6db452f8c212ba664a426c79e5ef78872e7a10720749060600160405180910390a1600160005460ff1660028111156108cf576108cf6113d7565b1415610904576005546108e290436114bf565b6007546108ef91906114bf565b6007556000805460ff1916600217905561094e565b600260005460ff16600281111561091d5761091d6113d7565b141561094e5760055461093090436114bf565b60065461093d91906114bf565b6006556000805460ff191660011790555b5043600555565b61095d610718565b6001600160a01b0316336001600160a01b03161461098e57604051631cc191eb60e31b815260040160405180910390fd5b610996610dc7565b6005546109a390436114bf565b11156109c257604051631ab7da6b60e01b815260040160405180910390fd5b600854156109e3576040516321c4e35760e21b815260040160405180910390fd5b6000610a25858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250869150610e159050565b90506008548114610a495760405163365d598160e21b815260040160405180910390fd5b600086118015610a5857508386105b610a945760405162461bcd60e51b815260206004820152600d60248201526c0929cac82989288be929c888ab609b1b60448201526064016102fe565b8484610aa16001896114bf565b818110610ab057610ab06115a2565b9050602002013588886000818110610aca57610aca6115a2565b9050602002013514610b0e5760405162461bcd60e51b815260206004820152600d60248201526c1253959053125117d4d5105495609a1b60448201526064016102fe565b848487818110610b2057610b206115a2565b602002919091013590508888610b376001826114bf565b818110610b4657610b466115a2565b905060200201351415610b895760405162461bcd60e51b815260206004820152600b60248201526a1253959053125117d1539160aa1b60448201526064016102fe565b82826002861115610bfc576000610ba185600261111e565b90506000610bb0866002611145565b905089600114610bc05780610bc2565b815b925060018a1115610bf957610bd860028b6114bf565b610be29082611675565b610bec9083611694565b610bf69085611694565b93505b50505b60018111610c385760405162461bcd60e51b81526020600482015260096024820152681513d3d7d4d213d49560ba1b60448201526064016102fe565b600060028210610c49576002610c4b565b815b9050610c58816001611694565b8a14610c925760405162461bcd60e51b815260206004820152600960248201526810d55517d0d3d5539560ba1b60448201526064016102fe565b610cd28b8b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250869150610e159050565b6008819055604080519182526020820185905281018390527f8c3cfc522d91af51bb14f6db452f8c212ba664a426c79e5ef78872e7a10720749060600160405180910390a15060019250610d24915050565b60005460ff166002811115610d3b57610d3b6113d7565b1415610d7057600554610d4e90436114bf565b600754610d5b91906114bf565b6007556000805460ff19166002179055610dba565b600260005460ff166002811115610d8957610d896113d7565b1415610dba57600554610d9c90436114bf565b600654610da991906114bf565b6006556000805460ff191660011790555b5050436005555050505050565b6000600260005460ff166002811115610de257610de26113d7565b1415610def575060065490565b600160005460ff166002811115610e0857610e086113d7565b1415610778575060075490565b6000838383604051602001610e2c939291906116ac565b6040516020818303038152906040528051906020012090509392505050565b60008082845110158015610e6c57506020838551610e6991906114bf565b10155b610ea45760405162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b60448201526064016102fe565b610eaf836020611694565b610eb98585611151565b915091505b9250929050565b6000610ed760408301602084016116ed565b604080516bffffffffffffffffffffffff19606093841b166020820152908401356034820152908301356054820152607401604051602081830303815290604052805190602001209050919050565b600260005460ff166002811115610f3f57610f3f6113d7565b1415610f5157610f4e81611016565b50565b610f4e815b6004546003546040517fa599fa89698188ea23144af5bd981dc904e4221ee98ed73883b509409808338d92610f9b926001600160a01b0391821692911690859061170a565b60405180910390a160025460048054600354604051637d3c01f360e11b81526001600160a01b0392831693810193909352811660248301529091169063fa7803e6906044015b600060405180830381600087803b158015610ffb57600080fd5b505af115801561100f573d6000803e3d6000fd5b5050505050565b6003546004546040517fa599fa89698188ea23144af5bd981dc904e4221ee98ed73883b509409808338d9261105b926001600160a01b0391821692911690859061170a565b60405180910390a160025460035460048054604051637d3c01f360e11b81526001600160a01b03938416928101929092528216602482015291169063fa7803e690604401610fe1565b6040805160028082526060820183526000928392919060208301908036833701905050905084816000815181106110dd576110dd6115a2565b60200260200101818152505083816001815181106110fd576110fd6115a2565b60200260200101818152505061111581600085610e15565b95945050505050565b600061112a8284611740565b61113483856114ec565b61113e9190611694565b9392505050565b600061113e82846114ec565b600061115e826020611694565b835110156111a65760405162461bcd60e51b8152602060048201526015602482015274746f427974657333325f6f75744f66426f756e647360581b60448201526064016102fe565b50016020015190565b60008083601f8401126111c157600080fd5b50813567ffffffffffffffff8111156111d957600080fd5b602083019150836020828501011115610ebe57600080fd5b60006080828403121561120357600080fd5b50919050565b60008083601f84011261121b57600080fd5b50813567ffffffffffffffff81111561123357600080fd5b6020830191508360208260051b8501011115610ebe57600080fd5b60008060008060008060008060008060e08b8d03121561126d57600080fd5b8a3567ffffffffffffffff8082111561128557600080fd5b6112918e838f016111af565b909c509a5060208d01359150808211156112aa57600080fd5b6112b68e838f016111af565b909a50985060408d01359150808211156112cf57600080fd5b6112db8e838f016111f1565b975060608d0135965060808d01359150808211156112f857600080fd5b506113058d828e01611209565b9b9e9a9d50989b979a969995989760a08101359660c09091013595509350505050565b6001600160a01b0381168114610f4e57600080fd5b803561134881611328565b919050565b600080600080600080600080610100898b03121561136a57600080fd5b883561137581611328565b9750602089013561138581611328565b9650604089013561139581611328565b955060608901356113a581611328565b945060808901356113b581611328565b979a969950949793969560a0850135955060c08501359460e001359350915050565b634e487b7160e01b600052602160045260246000fd5b6020810160038310611401576114016113d7565b91905290565b60006020828403121561141957600080fd5b5035919050565b600080600080600080600060a0888a03121561143b57600080fd5b873567ffffffffffffffff8082111561145357600080fd5b61145f8b838c01611209565b909950975060208a0135965060408a013591508082111561147f57600080fd5b5061148c8a828b01611209565b989b979a5095989597966060870135966080013595509350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156114d1576114d16114a9565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826114fb576114fb6114d6565b500490565b6000808335601e1984360301811261151757600080fd5b83018035915067ffffffffffffffff82111561153257600080fd5b602001915036819003821315610ebe57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000611584604083018688611547565b8281036020840152611597818587611547565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b8481526060602082015260008435601e198636030181126115d857600080fd5b8501803567ffffffffffffffff8111156115f157600080fd5b80360387131561160057600080fd5b6080606085015261161860e085018260208501611547565b9150506116276020870161133d565b6001600160a01b0316608084015260408681013560a0850152606087013560c085015283820390840152611597818587611547565b60006020828403121561166e57600080fd5b5051919050565b600081600019048311821515161561168f5761168f6114a9565b500290565b600082198211156116a7576116a76114a9565b500190565b835160009082906020808801845b838110156116d6578151855293820193908201906001016116ba565b505095825250938401929092525050604001919050565b6000602082840312156116ff57600080fd5b813561113e81611328565b6001600160a01b038481168252831660208201526060810160028310611732576117326113d7565b826040830152949350505050565b60008261174f5761174f6114d6565b50069056fea264697066735822122017e431ca4ce49dda5063251d689ca8c9babdf895ba34bab3707f8dd7dce5657c64736f6c63430008090033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbcb9b6902016bd1219d5fa6161243b61e7e9f7f959526dd94ef8fa3e403bf881c3416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ed38b555d7d6f5caf11080ed5ed1a2d0c4d8b60340de0678d4bedf1a1cfc955664736f6c63430008090033\";\n\ntype RollupConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: RollupConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class Rollup__factory extends ContractFactory {\n  constructor(...args: RollupConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<Rollup> {\n    return super.deploy(overrides || {}) as Promise<Rollup>;\n  }\n  override getDeployTransaction(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override attach(address: string): Rollup {\n    return super.attach(address) as Rollup;\n  }\n  override connect(signer: Signer): Rollup__factory {\n    return super.connect(signer) as Rollup__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): RollupInterface {\n    return new utils.Interface(_abi) as RollupInterface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): Rollup {\n    return new Contract(address, _abi, signerOrProvider) as Rollup;\n  }\n}\n","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/pre-deploy/Faucet__factory.ts",["428"],"/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { PromiseOrValue } from \"../../../common\";\nimport type { Faucet, FaucetInterface } from \"../../../src/pre-deploy/Faucet\";\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"previousAdmin\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"newAdmin\",\n        type: \"address\",\n      },\n    ],\n    name: \"AdminChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"beacon\",\n        type: \"address\",\n      },\n    ],\n    name: \"BeaconUpgraded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"DepositReceived\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint8\",\n        name: \"version\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"Initialized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"RequestFunds\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"implementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"Upgraded\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"amountAllowed\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"lockTime\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address payable\",\n        name: \"requestor\",\n        type: \"address\",\n      },\n    ],\n    name: \"requestFunds\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"retrieve\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newImplementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"upgradeTo\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newImplementation\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"receive\",\n  },\n] as const;\n\nconst _bytecode =\n  \"0x60a06040523060805234801561001457600080fd5b50608051610fb261004c60003960008181610260015281816102a9015281816103460152818161038601526104190152610fb26000f3fe6080604052600436106100a05760003560e01c8063715018a611610064578063715018a6146101695780638129fc1c1461017e5780638da5cb5b146101935780639ad2cd14146101bb578063a4beda63146101d1578063f2fde38b146101fe57600080fd5b80632e64cec1146100e45780633659cfe6146100fb5780634f1ef2861461011b57806352d1902d1461012e578063544c7cf91461015657600080fd5b366100df57604080513381523460208201527f9936746a4565f9766fa768f88f56a7487c78780ac179562773d1c75c5269537e910160405180910390a1005b600080fd5b3480156100f057600080fd5b506100f961021e565b005b34801561010757600080fd5b506100f9610116366004610ca1565b610255565b6100f9610129366004610cd4565b61033b565b34801561013a57600080fd5b5061014361040c565b6040519081526020015b60405180910390f35b6100f9610164366004610ca1565b6104bf565b34801561017557600080fd5b506100f9610621565b34801561018a57600080fd5b506100f9610635565b34801561019f57600080fd5b506097546040516001600160a01b03909116815260200161014d565b3480156101c757600080fd5b5061014360c95481565b3480156101dd57600080fd5b506101436101ec366004610ca1565b60ca6020526000908152604090205481565b34801561020a57600080fd5b506100f9610219366004610ca1565b61073f565b6102266107b5565b60405133904780156108fc02916000818181858888f19350505050158015610252573d6000803e3d6000fd5b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156102a75760405162461bcd60e51b815260040161029e90610d98565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166102f0600080516020610f36833981519152546001600160a01b031690565b6001600160a01b0316146103165760405162461bcd60e51b815260040161029e90610de4565b61031f8161080f565b6040805160008082526020820190925261025291839190610817565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156103845760405162461bcd60e51b815260040161029e90610d98565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103cd600080516020610f36833981519152546001600160a01b031690565b6001600160a01b0316146103f35760405162461bcd60e51b815260040161029e90610de4565b6103fc8261080f565b61040882826001610817565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104ac5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161029e565b50600080516020610f3683398151915290565b6104c76107b5565b6001600160a01b038116600090815260ca6020526040902054421161052e5760405162461bcd60e51b815260206004820152601a60248201527f4c6f636b2074696d6520686173206e6f7420657870697265642e000000000000604482015260640161029e565b60c954471161057f5760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656e6f7567682066756e647320696e206661756365742e0000000000604482015260640161029e565b61058c4262015180610e30565b6001600160a01b038216600081815260ca60205260408082209390935560c9549251919280156108fc02929091818181858888f193505050501580156105d6573d6000803e3d6000fd5b5060c954604080516001600160a01b038416815260208101929092527f45b6288b49e719d944403dc6fd08400e5850d6f61dec235b636a063042e0f2e191015b60405180910390a150565b6106296107b5565b6106336000610996565b565b600054610100900460ff16158080156106555750600054600160ff909116105b8061066f5750303b15801561066f575060005460ff166001145b6106d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161029e565b6000805460ff1916600117905580156106f5576000805461ff0019166101001790555b6106fd6109e8565b8015610252576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610616565b6107476107b5565b6001600160a01b0381166107ac5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161029e565b61025281610996565b6097546001600160a01b031633146106335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029e565b6102526107b5565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561084f5761084a83610a17565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561088857600080fd5b505afa9250505080156108b8575060408051601f3d908101601f191682019092526108b591810190610e56565b60015b61091b5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161029e565b600080516020610f36833981519152811461098a5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161029e565b5061084a838383610ab3565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610a0f5760405162461bcd60e51b815260040161029e90610e6f565b610633610ade565b6001600160a01b0381163b610a845760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161029e565b600080516020610f3683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b610abc83610b0e565b600082511180610ac95750805b1561084a57610ad88383610b4e565b50505050565b600054610100900460ff16610b055760405162461bcd60e51b815260040161029e90610e6f565b61063333610996565b610b1781610a17565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610bb65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161029e565b600080846001600160a01b031684604051610bd19190610ee6565b600060405180830381855af49150503d8060008114610c0c576040519150601f19603f3d011682016040523d82523d6000602084013e610c11565b606091505b5091509150610c398282604051806060016040528060278152602001610f5660279139610c42565b95945050505050565b60608315610c51575081610c5b565b610c5b8383610c62565b9392505050565b815115610c725781518083602001fd5b8060405162461bcd60e51b815260040161029e9190610f02565b6001600160a01b038116811461025257600080fd5b600060208284031215610cb357600080fd5b8135610c5b81610c8c565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610ce757600080fd5b8235610cf281610c8c565b9150602083013567ffffffffffffffff80821115610d0f57600080fd5b818501915085601f830112610d2357600080fd5b813581811115610d3557610d35610cbe565b604051601f8201601f19908116603f01168101908382118183101715610d5d57610d5d610cbe565b81604052828152886020848701011115610d7657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60008219821115610e5157634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610e6857600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015610ed5578181015183820152602001610ebd565b83811115610ad85750506000910152565b60008251610ef8818460208701610eba565b9190910192915050565b6020815260008251806020840152610f21816040850160208701610eba565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220047a62568f9a4315c336bac08df4660915880eb33deb0da548b131e53376d35d64736f6c63430008090033\";\n\ntype FaucetConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: FaucetConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class Faucet__factory extends ContractFactory {\n  constructor(...args: FaucetConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<Faucet> {\n    return super.deploy(overrides || {}) as Promise<Faucet>;\n  }\n  override getDeployTransaction(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override attach(address: string): Faucet {\n    return super.attach(address) as Faucet;\n  }\n  override connect(signer: Signer): Faucet__factory {\n    return super.connect(signer) as Faucet__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): FaucetInterface {\n    return new utils.Interface(_abi) as FaucetInterface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): Faucet {\n    return new Contract(address, _abi, signerOrProvider) as Faucet;\n  }\n}\n","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/pre-deploy/UUPSPlaceholder__factory.ts",["429"],"/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { PromiseOrValue } from \"../../../common\";\nimport type {\n  UUPSPlaceholder,\n  UUPSPlaceholderInterface,\n} from \"../../../src/pre-deploy/UUPSPlaceholder\";\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"previousAdmin\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"newAdmin\",\n        type: \"address\",\n      },\n    ],\n    name: \"AdminChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"beacon\",\n        type: \"address\",\n      },\n    ],\n    name: \"BeaconUpgraded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint8\",\n        name: \"version\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"Initialized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"implementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"Upgraded\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newImplementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"upgradeTo\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newImplementation\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n] as const;\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b610a82806100ed6000396000f3fe6080604052600436106100705760003560e01c8063715018a61161004e578063715018a6146100ea5780638129fc1c146100ff5780638da5cb5b14610114578063f2fde38b1461013c57600080fd5b80633659cfe6146100755780634f1ef2861461009757806352d1902d146100aa575b600080fd5b34801561008157600080fd5b50610095610090366004610853565b61015c565b005b6100956100a5366004610884565b610184565b3480156100b657600080fd5b506040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81526020015b60405180910390f35b3480156100f657600080fd5b5061009561019d565b34801561010b57600080fd5b506100956101b1565b34801561012057600080fd5b506097546040516001600160a01b0390911681526020016100e1565b34801561014857600080fd5b50610095610157366004610853565b6102c6565b6101658161033c565b6040805160008082526020820190925261018191839190610344565b50565b61018d8261033c565b61019982826001610344565b5050565b6101a56104d5565b6101af600061052f565b565b600054610100900460ff16158080156101d15750600054600160ff909116105b806101eb5750303b1580156101eb575060005460ff166001145b6102535760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610276576000805461ff0019166101001790555b61027e610581565b8015610181576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b6102ce6104d5565b6001600160a01b0381166103335760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161024a565b6101818161052f565b6101816104d5565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561037c57610377836105b0565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b557600080fd5b505afa9250505080156103e5575060408051601f3d908101601f191682019092526103e291810190610946565b60015b6104485760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161024a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc81146104c95760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161024a565b5061037783838361065e565b6097546001600160a01b031633146101af5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161024a565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166105a85760405162461bcd60e51b815260040161024a9061095f565b6101af610689565b6001600160a01b0381163b61061d5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161024a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b610667836106b9565b6000825111806106745750805b156103775761068383836106f9565b50505050565b600054610100900460ff166106b05760405162461bcd60e51b815260040161024a9061095f565b6101af3361052f565b6106c2816105b0565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6107615760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161024a565b600080846001600160a01b03168460405161077c91906109d6565b600060405180830381855af49150503d80600081146107b7576040519150601f19603f3d011682016040523d82523d6000602084013e6107bc565b606091505b50915091506107e48282604051806060016040528060278152602001610a26602791396107ed565b95945050505050565b606083156107fc575081610806565b610806838361080d565b9392505050565b81511561081d5781518083602001fd5b8060405162461bcd60e51b815260040161024a91906109f2565b80356001600160a01b038116811461084e57600080fd5b919050565b60006020828403121561086557600080fd5b61080682610837565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561089757600080fd5b6108a083610837565b9150602083013567ffffffffffffffff808211156108bd57600080fd5b818501915085601f8301126108d157600080fd5b8135818111156108e3576108e361086e565b604051601f8201601f19908116603f0116810190838211818310171561090b5761090b61086e565b8160405282815288602084870101111561092457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561095857600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b838110156109c55781810151838201526020016109ad565b838111156106835750506000910152565b600082516109e88184602087016109aa565b9190910192915050565b6020815260008251806020840152610a118160408501602087016109aa565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122010d0d482b3fcb41f4f07968459fb206a5af6d2de9a4975e88f153fffc92d664364736f6c63430008090033\";\n\ntype UUPSPlaceholderConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: UUPSPlaceholderConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class UUPSPlaceholder__factory extends ContractFactory {\n  constructor(...args: UUPSPlaceholderConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<UUPSPlaceholder> {\n    return super.deploy(overrides || {}) as Promise<UUPSPlaceholder>;\n  }\n  override getDeployTransaction(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override attach(address: string): UUPSPlaceholder {\n    return super.attach(address) as UUPSPlaceholder;\n  }\n  override connect(signer: Signer): UUPSPlaceholder__factory {\n    return super.connect(signer) as UUPSPlaceholder__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): UUPSPlaceholderInterface {\n    return new utils.Interface(_abi) as UUPSPlaceholderInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): UUPSPlaceholder {\n    return new Contract(address, _abi, signerOrProvider) as UUPSPlaceholder;\n  }\n}\n","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/pre-deploy/PredeployUUPSUpgradeable__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/Rollup.sol/RollupBase__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/verifier/IVerificationContext__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/ChallengeBase__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/IChallenge.sol/IAsymChallenge__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/IChallenge.sol/ISymChallenge__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/verifier/IVerifier__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/SymChallenge__factory.ts",["430"],"/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { PromiseOrValue } from \"../../../common\";\nimport type {\n  SymChallenge,\n  SymChallengeInterface,\n} from \"../../../src/challenge/SymChallenge\";\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"AlreadyInitialized\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"DeadlineExpired\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"DeadlineNotPassed\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"NotInitialized\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"NotYourTurn\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"PreviousStateInconsistent\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"TxContextInconsistent\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"ZeroAddress\",\n    type: \"error\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"challengeState\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"challengedSegmentStart\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"challengedSegmentLength\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Bisected\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"winner\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"loser\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"enum IChallenge.CompletionReason\",\n        name: \"reason\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"Completed\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32[]\",\n        name: \"bisection\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"challengedSegmentIndex\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"prevBisection\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"prevChallengedSegmentStart\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"prevChallengedSegmentLength\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"bisectExecution\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"bisectionHash\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"challenger\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"challengerTimeLeft\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"currentResponder\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"currentResponderTimeLeft\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"defender\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"defenderTimeLeft\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_defender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_challenger\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IVerifier\",\n        name: \"_verifier\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IDAProvider\",\n        name: \"_daProvider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IChallengeResultReceiver\",\n        name: \"_resultReceiver\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_startStateHash\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_endStateHash\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"challengePeriod\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_numSteps\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"initializeChallengeLength\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"lastMoveBlock\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"timeout\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"turn\",\n    outputs: [\n      {\n        internalType: \"enum ChallengeBase.Turn\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes\",\n        name: \"oneStepProof\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"txInclusionProof\",\n        type: \"bytes\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes\",\n            name: \"encodedTx\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"address\",\n            name: \"l2BlockCoinbase\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"l2BlockNumber\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"l2BlockTimestamp\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct VerificationContextLib.RawContext\",\n        name: \"ctx\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"challengedStepIndex\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"prevBisection\",\n        type: \"bytes32[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"prevChallengedSegmentStart\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"prevChallengedSegmentLength\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"verifyOneStepProof\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b5061178a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063832d6d801161008c578063925f9a9611610066578063925f9a96146101ad5780639909e0d9146101b6578063cc8f6677146101c9578063e87e3589146101dc57600080fd5b8063832d6d80146101785780638a8cd2181461018b5780638b2999031461019357600080fd5b80635f41e3d6116100c85780635f41e3d61461013f578063638068db1461014857806370dea79a1461015d5780637f4c91c51461016557600080fd5b80632a51f6f7146100ef57806341e8510c1461010b578063534db0e214610114575b600080fd5b6100f860085481565b6040519081526020015b60405180910390f35b6100f860075481565b600454610127906001600160a01b031681565b6040516001600160a01b039091168152602001610102565b6100f860065481565b61015b61015636600461124e565b6101e4565b005b61015b6105b4565b600354610127906001600160a01b031681565b61015b61018636600461134d565b61061c565b610127610718565b6000546101a09060ff1681565b60405161010291906113ed565b6100f860055481565b61015b6101c4366004611407565b610791565b61015b6101d7366004611420565b610955565b6100f8610dc7565b6101ec610718565b6001600160a01b0316336001600160a01b03161461021d57604051631cc191eb60e31b815260040160405180910390fd5b610225610dc7565b60055461023290436114bf565b111561025157604051631ab7da6b60e01b815260040160405180910390fd5b6000610293858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250869150610e159050565b905060085481146102b75760405163365d598160e21b815260040160405180910390fd5b6000861180156102c657508386105b6103075760405162461bcd60e51b815260206004820152600d60248201526c0929cac82989288be929c888ab609b1b60448201526064015b60405180910390fd5b60016103146002846114ec565b11156103595760405162461bcd60e51b8152602060048201526014602482015273424953454354494f4e5f494e434f4d504c45544560601b60448201526064016102fe565b6001546001600160a01b031663f785968f6103748980611500565b8c8c6040518563ffffffff1660e01b81526004016103959493929190611570565b60006040518083038186803b1580156103ad57600080fd5b505afa1580156103c1573d6000803e3d6000fd5b5050505060006104068a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250610e4b915050565b9150508061041389610ec5565b146104315760405163c64c5f7d60e01b815260040160405180910390fd5b506000805461010090046001600160a01b031663401ebd6e878761045660018c6114bf565b818110610465576104656115a2565b905060200201358a8f8f6040518563ffffffff1660e01b815260040161048e94939291906115b8565b60206040518083038186803b1580156104a657600080fd5b505afa1580156104ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104de919061165c565b90508585888181106104f2576104f26115a2565b905060200201358114610509576105096000610f26565b506001905060005460ff166002811115610525576105256113d7565b141561055a5760055461053890436114bf565b60075461054591906114bf565b6007556000805460ff191660021790556105a4565b600260005460ff166002811115610573576105736113d7565b14156105a45760055461058690436114bf565b60065461059391906114bf565b6006556000805460ff191660011790555b5050436005555050505050505050565b6105bc610dc7565b6005546105c990436114bf565b116105e7576040516302eb354360e41b815260040160405180910390fd5b600260005460ff166002811115610600576106006113d7565b1415610612576106106001610f56565b565b6106106001611016565b6000805460ff166002811115610634576106346113d7565b146106515760405162dc149f60e41b815260040160405180910390fd5b6001600160a01b038816158061066e57506001600160a01b038716155b1561068c5760405163d92e233d60e01b815260040160405180910390fd5b600380546001600160a01b03998a166001600160a01b03199182161790915560048054988a16988216989098179097556000805460018054978b16978a169790971790965560028054958a1695909816949094178755600992909255600a55929094166101000260ff19166001600160a81b031990911617909117909155436005556006819055600755565b6000600260005460ff166002811115610733576107336113d7565b141561074957506003546001600160a01b031690565b600160005460ff166002811115610762576107626113d7565b141561077857506004546001600160a01b031690565b6040516321c4e35760e21b815260040160405180910390fd5b610799610718565b6001600160a01b0316336001600160a01b0316146107ca57604051631cc191eb60e31b815260040160405180910390fd5b6107d2610dc7565b6005546107df90436114bf565b11156107fe57604051631ab7da6b60e01b815260040160405180910390fd5b6008541561081e5760405162dc149f60e41b815260040160405180910390fd5b600081116108625760405162461bcd60e51b8152602060048201526011602482015270494e56414c49445f4e554d5f535445505360781b60448201526064016102fe565b610871600954600a54836110a4565b6008819055604080519182526000602083015281018290527f8c3cfc522d91af51bb14f6db452f8c212ba664a426c79e5ef78872e7a10720749060600160405180910390a1600160005460ff1660028111156108cf576108cf6113d7565b1415610904576005546108e290436114bf565b6007546108ef91906114bf565b6007556000805460ff1916600217905561094e565b600260005460ff16600281111561091d5761091d6113d7565b141561094e5760055461093090436114bf565b60065461093d91906114bf565b6006556000805460ff191660011790555b5043600555565b61095d610718565b6001600160a01b0316336001600160a01b03161461098e57604051631cc191eb60e31b815260040160405180910390fd5b610996610dc7565b6005546109a390436114bf565b11156109c257604051631ab7da6b60e01b815260040160405180910390fd5b600854156109e3576040516321c4e35760e21b815260040160405180910390fd5b6000610a25858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250869150610e159050565b90506008548114610a495760405163365d598160e21b815260040160405180910390fd5b600086118015610a5857508386105b610a945760405162461bcd60e51b815260206004820152600d60248201526c0929cac82989288be929c888ab609b1b60448201526064016102fe565b8484610aa16001896114bf565b818110610ab057610ab06115a2565b9050602002013588886000818110610aca57610aca6115a2565b9050602002013514610b0e5760405162461bcd60e51b815260206004820152600d60248201526c1253959053125117d4d5105495609a1b60448201526064016102fe565b848487818110610b2057610b206115a2565b602002919091013590508888610b376001826114bf565b818110610b4657610b466115a2565b905060200201351415610b895760405162461bcd60e51b815260206004820152600b60248201526a1253959053125117d1539160aa1b60448201526064016102fe565b82826002861115610bfc576000610ba185600261111e565b90506000610bb0866002611145565b905089600114610bc05780610bc2565b815b925060018a1115610bf957610bd860028b6114bf565b610be29082611675565b610bec9083611694565b610bf69085611694565b93505b50505b60018111610c385760405162461bcd60e51b81526020600482015260096024820152681513d3d7d4d213d49560ba1b60448201526064016102fe565b600060028210610c49576002610c4b565b815b9050610c58816001611694565b8a14610c925760405162461bcd60e51b815260206004820152600960248201526810d55517d0d3d5539560ba1b60448201526064016102fe565b610cd28b8b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250869150610e159050565b6008819055604080519182526020820185905281018390527f8c3cfc522d91af51bb14f6db452f8c212ba664a426c79e5ef78872e7a10720749060600160405180910390a15060019250610d24915050565b60005460ff166002811115610d3b57610d3b6113d7565b1415610d7057600554610d4e90436114bf565b600754610d5b91906114bf565b6007556000805460ff19166002179055610dba565b600260005460ff166002811115610d8957610d896113d7565b1415610dba57600554610d9c90436114bf565b600654610da991906114bf565b6006556000805460ff191660011790555b5050436005555050505050565b6000600260005460ff166002811115610de257610de26113d7565b1415610def575060065490565b600160005460ff166002811115610e0857610e086113d7565b1415610778575060075490565b6000838383604051602001610e2c939291906116ac565b6040516020818303038152906040528051906020012090509392505050565b60008082845110158015610e6c57506020838551610e6991906114bf565b10155b610ea45760405162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b60448201526064016102fe565b610eaf836020611694565b610eb98585611151565b915091505b9250929050565b6000610ed760408301602084016116ed565b604080516bffffffffffffffffffffffff19606093841b166020820152908401356034820152908301356054820152607401604051602081830303815290604052805190602001209050919050565b600260005460ff166002811115610f3f57610f3f6113d7565b1415610f5157610f4e81611016565b50565b610f4e815b6004546003546040517fa599fa89698188ea23144af5bd981dc904e4221ee98ed73883b509409808338d92610f9b926001600160a01b0391821692911690859061170a565b60405180910390a160025460048054600354604051637d3c01f360e11b81526001600160a01b0392831693810193909352811660248301529091169063fa7803e6906044015b600060405180830381600087803b158015610ffb57600080fd5b505af115801561100f573d6000803e3d6000fd5b5050505050565b6003546004546040517fa599fa89698188ea23144af5bd981dc904e4221ee98ed73883b509409808338d9261105b926001600160a01b0391821692911690859061170a565b60405180910390a160025460035460048054604051637d3c01f360e11b81526001600160a01b03938416928101929092528216602482015291169063fa7803e690604401610fe1565b6040805160028082526060820183526000928392919060208301908036833701905050905084816000815181106110dd576110dd6115a2565b60200260200101818152505083816001815181106110fd576110fd6115a2565b60200260200101818152505061111581600085610e15565b95945050505050565b600061112a8284611740565b61113483856114ec565b61113e9190611694565b9392505050565b600061113e82846114ec565b600061115e826020611694565b835110156111a65760405162461bcd60e51b8152602060048201526015602482015274746f427974657333325f6f75744f66426f756e647360581b60448201526064016102fe565b50016020015190565b60008083601f8401126111c157600080fd5b50813567ffffffffffffffff8111156111d957600080fd5b602083019150836020828501011115610ebe57600080fd5b60006080828403121561120357600080fd5b50919050565b60008083601f84011261121b57600080fd5b50813567ffffffffffffffff81111561123357600080fd5b6020830191508360208260051b8501011115610ebe57600080fd5b60008060008060008060008060008060e08b8d03121561126d57600080fd5b8a3567ffffffffffffffff8082111561128557600080fd5b6112918e838f016111af565b909c509a5060208d01359150808211156112aa57600080fd5b6112b68e838f016111af565b909a50985060408d01359150808211156112cf57600080fd5b6112db8e838f016111f1565b975060608d0135965060808d01359150808211156112f857600080fd5b506113058d828e01611209565b9b9e9a9d50989b979a969995989760a08101359660c09091013595509350505050565b6001600160a01b0381168114610f4e57600080fd5b803561134881611328565b919050565b600080600080600080600080610100898b03121561136a57600080fd5b883561137581611328565b9750602089013561138581611328565b9650604089013561139581611328565b955060608901356113a581611328565b945060808901356113b581611328565b979a969950949793969560a0850135955060c08501359460e001359350915050565b634e487b7160e01b600052602160045260246000fd5b6020810160038310611401576114016113d7565b91905290565b60006020828403121561141957600080fd5b5035919050565b600080600080600080600060a0888a03121561143b57600080fd5b873567ffffffffffffffff8082111561145357600080fd5b61145f8b838c01611209565b909950975060208a0135965060408a013591508082111561147f57600080fd5b5061148c8a828b01611209565b989b979a5095989597966060870135966080013595509350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156114d1576114d16114a9565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826114fb576114fb6114d6565b500490565b6000808335601e1984360301811261151757600080fd5b83018035915067ffffffffffffffff82111561153257600080fd5b602001915036819003821315610ebe57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000611584604083018688611547565b8281036020840152611597818587611547565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b8481526060602082015260008435601e198636030181126115d857600080fd5b8501803567ffffffffffffffff8111156115f157600080fd5b80360387131561160057600080fd5b6080606085015261161860e085018260208501611547565b9150506116276020870161133d565b6001600160a01b0316608084015260408681013560a0850152606087013560c085015283820390840152611597818587611547565b60006020828403121561166e57600080fd5b5051919050565b600081600019048311821515161561168f5761168f6114a9565b500290565b600082198211156116a7576116a76114a9565b500190565b835160009082906020808801845b838110156116d6578151855293820193908201906001016116ba565b505095825250938401929092525050604001919050565b6000602082840312156116ff57600080fd5b813561113e81611328565b6001600160a01b038481168252831660208201526060810160028310611732576117326113d7565b826040830152949350505050565b60008261174f5761174f6114d6565b50069056fea264697066735822122017e431ca4ce49dda5063251d689ca8c9babdf895ba34bab3707f8dd7dce5657c64736f6c63430008090033\";\n\ntype SymChallengeConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: SymChallengeConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class SymChallenge__factory extends ContractFactory {\n  constructor(...args: SymChallengeConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<SymChallenge> {\n    return super.deploy(overrides || {}) as Promise<SymChallenge>;\n  }\n  override getDeployTransaction(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override attach(address: string): SymChallenge {\n    return super.attach(address) as SymChallenge;\n  }\n  override connect(signer: Signer): SymChallenge__factory {\n    return super.connect(signer) as SymChallenge__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): SymChallengeInterface {\n    return new utils.Interface(_abi) as SymChallengeInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): SymChallenge {\n    return new Contract(address, _abi, signerOrProvider) as SymChallenge;\n  }\n}\n","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/AsymChallenge__factory.ts",["431"],"/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { PromiseOrValue } from \"../../../common\";\nimport type {\n  AsymChallenge,\n  AsymChallengeInterface,\n} from \"../../../src/challenge/AsymChallenge\";\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"AlreadyInitialized\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"DeadlineExpired\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"DeadlineNotPassed\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"NotInitialized\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"NotYourTurn\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"ZeroAddress\",\n    type: \"error\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"challengeState\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"challengedSegmentStart\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"challengedSegmentLength\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Bisected\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"winner\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"loser\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"enum IChallenge.CompletionReason\",\n        name: \"reason\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"Completed\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bisectionHash\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"challenger\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"challengerTimeLeft\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"currentResponder\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"currentResponderTimeLeft\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"defender\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"defenderTimeLeft\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_defender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_challenger\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_bisectionHash\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"contract IVerifier\",\n        name: \"_verifier\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IDAProvider\",\n        name: \"_daProvider\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IChallengeResultReceiver\",\n        name: \"_resultReceiver\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"challengePeriod\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"lastMoveBlock\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"timeout\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"turn\",\n    outputs: [\n      {\n        internalType: \"enum ChallengeBase.Turn\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50610640806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806370dea79a1161007157806370dea79a1461011c5780637f4c91c5146101245780638a8cd218146101375780638b2999031461013f578063925f9a9614610159578063e87e35891461016257600080fd5b80632a51f6f7146100ae5780632c368113146100ca57806341e8510c146100df578063534db0e2146100e85780635f41e3d614610113575b600080fd5b6100b760085481565b6040519081526020015b60405180910390f35b6100dd6100d83660046104fb565b61016a565b005b6100b760075481565b6004546100fb906001600160a01b031681565b6040516001600160a01b0390911681526020016100c1565b6100b760065481565b6100dd610266565b6003546100fb906001600160a01b031681565b6100fb6102ce565b60005461014c9060ff1681565b6040516100c19190610595565b6100b760055481565b6100b7610347565b6000805460ff1660028111156101825761018261057f565b1461019f5760405162dc149f60e41b815260040160405180910390fd5b6001600160a01b03871615806101bc57506001600160a01b038616155b156101da5760405163d92e233d60e01b815260040160405180910390fd5b600380546001600160a01b03199081166001600160a01b03998a1617909155600480548216978916979097179096556008949094556000805460018054881694891694909417909355600280549096169187169190911785556001600160a81b031990911660ff1961010093909616929092029490941617909117909155436005556006819055600755565b61026e610347565b60055461027b90436105af565b11610299576040516302eb354360e41b815260040160405180910390fd5b600260005460ff1660028111156102b2576102b261057f565b14156102c4576102c26001610395565b565b6102c26001610455565b6000600260005460ff1660028111156102e9576102e961057f565b14156102ff57506003546001600160a01b031690565b600160005460ff1660028111156103185761031861057f565b141561032e57506004546001600160a01b031690565b6040516321c4e35760e21b815260040160405180910390fd5b6000600260005460ff1660028111156103625761036261057f565b141561036f575060065490565b600160005460ff1660028111156103885761038861057f565b141561032e575060075490565b6004546003546040517fa599fa89698188ea23144af5bd981dc904e4221ee98ed73883b509409808338d926103da926001600160a01b039182169291169085906105d4565b60405180910390a160025460048054600354604051637d3c01f360e11b81526001600160a01b0392831693810193909352811660248301529091169063fa7803e6906044015b600060405180830381600087803b15801561043a57600080fd5b505af115801561044e573d6000803e3d6000fd5b5050505050565b6003546004546040517fa599fa89698188ea23144af5bd981dc904e4221ee98ed73883b509409808338d9261049a926001600160a01b039182169291169085906105d4565b60405180910390a160025460035460048054604051637d3c01f360e11b81526001600160a01b03938416928101929092528216602482015291169063fa7803e690604401610420565b6001600160a01b03811681146104f857600080fd5b50565b600080600080600080600060e0888a03121561051657600080fd5b8735610521816104e3565b96506020880135610531816104e3565b9550604088013594506060880135610548816104e3565b93506080880135610558816104e3565b925060a0880135610568816104e3565b8092505060c0880135905092959891949750929550565b634e487b7160e01b600052602160045260246000fd5b60208101600383106105a9576105a961057f565b91905290565b6000828210156105cf57634e487b7160e01b600052601160045260246000fd5b500390565b6001600160a01b0384811682528316602082015260608101600283106105fc576105fc61057f565b82604083015294935050505056fea2646970667358221220c78b8119d26402c5e479156005f8b989790e625c2c231037e2117dda05456d5164736f6c63430008090033\";\n\ntype AsymChallengeConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: AsymChallengeConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class AsymChallenge__factory extends ContractFactory {\n  constructor(...args: AsymChallengeConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<AsymChallenge> {\n    return super.deploy(overrides || {}) as Promise<AsymChallenge>;\n  }\n  override getDeployTransaction(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override attach(address: string): AsymChallenge {\n    return super.attach(address) as AsymChallenge;\n  }\n  override connect(signer: Signer): AsymChallenge__factory {\n    return super.connect(signer) as AsymChallenge__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): AsymChallengeInterface {\n    return new utils.Interface(_abi) as AsymChallengeInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): AsymChallenge {\n    return new Contract(address, _abi, signerOrProvider) as AsymChallenge;\n  }\n}\n","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/verifier/Verifier__factory.ts",["432"],"/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { PromiseOrValue } from \"../../../../common\";\nimport type {\n  Verifier,\n  VerifierInterface,\n} from \"../../../../src/challenge/verifier/Verifier\";\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"previousAdmin\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"newAdmin\",\n        type: \"address\",\n      },\n    ],\n    name: \"AdminChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"beacon\",\n        type: \"address\",\n      },\n    ],\n    name: \"BeaconUpgraded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint8\",\n        name: \"version\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"Initialized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"implementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"Upgraded\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newImplementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"upgradeTo\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newImplementation\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bytes\",\n            name: \"encodedTx\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"address\",\n            name: \"l2BlockCoinbase\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"l2BlockNumber\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"l2BlockTimestamp\",\n            type: \"uint256\",\n          },\n        ],\n        internalType: \"struct VerificationContextLib.RawContext\",\n        name: \"\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"verifyOneStepProof\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"endStateHash\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n] as const;\n\nconst _bytecode =\n  \"0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051610e276101196000396000818161017f015281816101c801528181610268015281816102a8015261033b0152610e276000f3fe60806040526004361061007b5760003560e01c8063715018a61161004e578063715018a6146101025780638129fc1c146101175780638da5cb5b1461012c578063f2fde38b1461015457600080fd5b80633659cfe614610080578063401ebd6e146100a25780634f1ef286146100da57806352d1902d146100ed575b600080fd5b34801561008c57600080fd5b506100a061009b366004610a9d565b610174565b005b3480156100ae57600080fd5b506100c76100bd366004610ab8565b5060009392505050565b6040519081526020015b60405180910390f35b6100a06100e8366004610b71565b61025d565b3480156100f957600080fd5b506100c761032e565b34801561010e57600080fd5b506100a06103e1565b34801561012357600080fd5b506100a06103f5565b34801561013857600080fd5b506097546040516001600160a01b0390911681526020016100d1565b34801561016057600080fd5b506100a061016f366004610a9d565b61050d565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156101c65760405162461bcd60e51b81526004016101bd90610c33565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661020f600080516020610dab833981519152546001600160a01b031690565b6001600160a01b0316146102355760405162461bcd60e51b81526004016101bd90610c7f565b61023e81610583565b6040805160008082526020820190925261025a9183919061058b565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156102a65760405162461bcd60e51b81526004016101bd90610c33565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166102ef600080516020610dab833981519152546001600160a01b031690565b6001600160a01b0316146103155760405162461bcd60e51b81526004016101bd90610c7f565b61031e82610583565b61032a8282600161058b565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103ce5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016101bd565b50600080516020610dab83398151915290565b6103e961070a565b6103f36000610764565b565b600054610100900460ff16158080156104155750600054600160ff909116105b8061042f5750303b15801561042f575060005460ff166001145b6104925760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101bd565b6000805460ff1916600117905580156104b5576000805461ff0019166101001790555b6104bd6107b6565b6104c56107e5565b801561025a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b61051561070a565b6001600160a01b03811661057a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101bd565b61025a81610764565b61025a61070a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156105c3576105be8361080c565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105fc57600080fd5b505afa92505050801561062c575060408051601f3d908101601f1916820190925261062991810190610ccb565b60015b61068f5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016101bd565b600080516020610dab83398151915281146106fe5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016101bd565b506105be8383836108a8565b6097546001600160a01b031633146103f35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101bd565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166107dd5760405162461bcd60e51b81526004016101bd90610ce4565b6103f36108d3565b600054610100900460ff166103f35760405162461bcd60e51b81526004016101bd90610ce4565b6001600160a01b0381163b6108795760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016101bd565b600080516020610dab83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6108b183610903565b6000825111806108be5750805b156105be576108cd8383610943565b50505050565b600054610100900460ff166108fa5760405162461bcd60e51b81526004016101bd90610ce4565b6103f333610764565b61090c8161080c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6109ab5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016101bd565b600080846001600160a01b0316846040516109c69190610d5b565b600060405180830381855af49150503d8060008114610a01576040519150601f19603f3d011682016040523d82523d6000602084013e610a06565b606091505b5091509150610a2e8282604051806060016040528060278152602001610dcb60279139610a37565b95945050505050565b60608315610a46575081610a50565b610a508383610a57565b9392505050565b815115610a675781518083602001fd5b8060405162461bcd60e51b81526004016101bd9190610d77565b80356001600160a01b0381168114610a9857600080fd5b919050565b600060208284031215610aaf57600080fd5b610a5082610a81565b60008060008060608587031215610ace57600080fd5b84359350602085013567ffffffffffffffff80821115610aed57600080fd5b9086019060808289031215610b0157600080fd5b90935060408601359080821115610b1757600080fd5b818701915087601f830112610b2b57600080fd5b813581811115610b3a57600080fd5b886020828501011115610b4c57600080fd5b95989497505060200194505050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610b8457600080fd5b610b8d83610a81565b9150602083013567ffffffffffffffff80821115610baa57600080fd5b818501915085601f830112610bbe57600080fd5b813581811115610bd057610bd0610b5b565b604051601f8201601f19908116603f01168101908382118183101715610bf857610bf8610b5b565b81604052828152886020848701011115610c1157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600060208284031215610cdd57600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015610d4a578181015183820152602001610d32565b838111156108cd5750506000910152565b60008251610d6d818460208701610d2f565b9190910192915050565b6020815260008251806020840152610d96816040850160208701610d2f565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220b8f5e4ff66ae6589bb0f8193f3c7e7c10ac0f47ff8383ea3f33f2e38fb20a3fc64736f6c63430008090033\";\n\ntype VerifierConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: VerifierConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class Verifier__factory extends ContractFactory {\n  constructor(...args: VerifierConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<Verifier> {\n    return super.deploy(overrides || {}) as Promise<Verifier>;\n  }\n  override getDeployTransaction(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override attach(address: string): Verifier {\n    return super.attach(address) as Verifier;\n  }\n  override connect(signer: Signer): Verifier__factory {\n    return super.connect(signer) as Verifier__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): VerifierInterface {\n    return new utils.Interface(_abi) as VerifierInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): Verifier {\n    return new Contract(address, _abi, signerOrProvider) as Verifier;\n  }\n}\n","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/IL2Portal__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/IChallenge.sol/IChallengeResultReceiver__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/L2Portal.sol/L2Portal__factory.ts",["433"],"/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { PromiseOrValue } from \"../../../../common\";\nimport type {\n  L2Portal,\n  L2PortalInterface,\n} from \"../../../../src/bridge/L2Portal.sol/L2Portal\";\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"ZeroAddress\",\n    type: \"error\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"previousAdmin\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"newAdmin\",\n        type: \"address\",\n      },\n    ],\n    name: \"AdminChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"beacon\",\n        type: \"address\",\n      },\n    ],\n    name: \"BeaconUpgraded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"depositHash\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"success\",\n        type: \"bool\",\n      },\n    ],\n    name: \"DepositFinalized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint8\",\n        name: \"version\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"Initialized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"implementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"Upgraded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"target\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"gasLimit\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"withdrawalHash\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"WithdrawalInitiated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"donateETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"sender\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"value\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"gasLimit\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"data\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Types.CrossDomainMessage\",\n        name: \"depositTx\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bytes[]\",\n        name: \"depositAccountProof\",\n        type: \"bytes[]\",\n      },\n      {\n        internalType: \"bytes[]\",\n        name: \"depositProof\",\n        type: \"bytes[]\",\n      },\n    ],\n    name: \"finalizeDepositTransaction\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"finalizedDeposits\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_l1Oracle\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_l1PortolAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_target\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_gasLimit\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"_data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"initiateWithdrawal\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"initiatedWithdrawals\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"l1Oracle\",\n    outputs: [\n      {\n        internalType: \"contract L1Oracle\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"l1PortalAddress\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"l1Sender\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"nonce\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newImplementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"upgradeTo\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newImplementation\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"receive\",\n  },\n] as const;\n\nconst _bytecode =\n  \"0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600154610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60015460ff9081161015620000e6576001805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805161362c6200013c6000396000818161032a015281816103730152818161049a015281816104da015281816106f001528181610730015281816107ac015281816108e70152610927015261362c6000f3fe6080604052600436106100f75760003560e01c80638b4c40b01161008a578063bf286e3911610059578063bf286e391461029c578063c2b3e5ac146102cc578063f2fde38b146102df578063f5ca5175146102ff57600080fd5b80638b4c40b0146101195780638da5cb5b14610248578063affed0e014610266578063b7558b7a1461027c57600080fd5b80634f1ef286116100c65780634f1ef286146101dd57806352d1902d146101f05780635dec2aa414610213578063715018a61461023357600080fd5b8063021634251461012057806315efc4ed1461015d5780633659cfe61461019d578063485cc955146101bd57600080fd5b3661011b5761011933620186a06040518060200160405280600081525061031f565b005b600080fd5b34801561012c57600080fd5b5060ca54610140906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561016957600080fd5b5061018d610178366004612e47565b60ce6020526000908152604090205460ff1681565b6040519015158152602001610154565b3480156101a957600080fd5b506101196101b8366004612e7c565b61048f565b3480156101c957600080fd5b506101196101d8366004612e97565b610558565b6101196101eb366004612faa565b6106e5565b3480156101fc57600080fd5b5061020561079f565b604051908152602001610154565b34801561021f57600080fd5b5060cb54610140906001600160a01b031681565b34801561023f57600080fd5b50610119610852565b34801561025457600080fd5b506098546001600160a01b0316610140565b34801561027257600080fd5b5061020560cd5481565b34801561028857600080fd5b5060cc54610140906001600160a01b031681565b3480156102a857600080fd5b5061018d6102b7366004612e47565b60006020819052908152604090205460ff1681565b6101196102da366004612ff8565b61031f565b3480156102eb57600080fd5b506101196102fa366004612e7c565b610866565b34801561030b57600080fd5b5061011961031a36600461309b565b6108dc565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156103715760405162461bcd60e51b81526004016103689061319e565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103a3610d4e565b6001600160a01b0316146103c95760405162461bcd60e51b8152600401610368906131ea565b60006104146040518060c0016040528060cd548152602001336001600160a01b03168152602001866001600160a01b0316815260200134815260200185815260200184815250610d6a565b60008181526020819052604090819020805460ff1916600117905560cd5490519192506001600160a01b038616913391907f2e54ae47a8d51f81cc8f2ff66f175741c8af3e1cbe4f87d675aecf42d4d5103f9061047890349089908990899061328e565b60405180910390a4505060cd805460010190555050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156104d85760405162461bcd60e51b81526004016103689061319e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661050a610d4e565b6001600160a01b0316146105305760405162461bcd60e51b8152600401610368906131ea565b61053981610db7565b6040805160008082526020820190925261055591839190610dbf565b50565b600154610100900460ff161580801561057557506001805460ff16105b8061058e5750303b15801561058e57506001805460ff16145b6105f15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610368565b6001805460ff1916811790558015610613576001805461ff0019166101001790555b6001600160a01b038316158061063057506001600160a01b038216155b1561064e5760405163d92e233d60e01b815260040160405180910390fd5b60ca80546001600160a01b038086166001600160a01b03199283161790925560cb80549285169282169290921790915560cc805490911661dead179055610693610f39565b61069b610f68565b80156106e0576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561072e5760405162461bcd60e51b81526004016103689061319e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610760610d4e565b6001600160a01b0316146107865760405162461bcd60e51b8152600401610368906131ea565b61078f82610db7565b61079b82826001610dbf565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461083f5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610368565b506000805160206135b083398151915290565b61085a610f8f565b6108646000610fe9565b565b61086e610f8f565b6001600160a01b0381166108d35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610368565b61055581610fe9565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109255760405162461bcd60e51b81526004016103689061319e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610957610d4e565b6001600160a01b03161461097d5760405162461bcd60e51b8152600401610368906131ea565b60cc546001600160a01b031661dead146109f85760405162461bcd60e51b815260206004820152603660248201527f4c32506f7274616c3a2063616e206f6e6c792074726967676572206f6e65206460448201527532b837b9b4ba103832b9103a3930b739b0b1ba34b7b760511b6064820152608401610368565b60408501516001600160a01b0316301415610a7b5760405162461bcd60e51b815260206004820152603960248201527f4c32506f7274616c3a20796f752063616e6e6f742073656e64206d657373616760448201527f657320746f2074686520706f7274616c20636f6e7472616374000000000000006064820152608401610368565b6000610a8686610d6a565b600081815260ce602052604090205490915060ff1615610afd5760405162461bcd60e51b815260206004820152602c60248201527f4c32506f7274616c3a206465706f7369742068617320616c726561647920626560448201526b195b88199a5b985b1a5e995960a21b6064820152608401610368565b60ca5460408051634ac4765160e11b815290516000926001600160a01b031691639588eca2916004808301926020929190829003018186803b158015610b4257600080fd5b505afa158015610b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7a91906132be565b60cb54909150600090610ba0906001600160a01b031683610b9b898b6132d7565b61103b565b9050610bb68382610bb187896132d7565b6110e1565b610c145760405162461bcd60e51b815260206004820152602960248201527f4c32506f7274616c3a20696e76616c6964206465706f73697420696e636c757360448201526834b7b710383937b7b360b91b6064820152608401610368565b600083815260ce60205260409020805460ff191660011790556080880151610c3f90614e2090613371565b5a1015610ca55760405162461bcd60e51b815260206004820152602e60248201527f4c32506f7274616c3a20696e73756666696369656e742067617320746f20666960448201526d1b985b1a5e994819195c1bdcda5d60921b6064820152608401610368565b876020015160cc60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506000610cee89604001518a608001518b606001518c60a00151611150565b60cc80546001600160a01b03191661dead17905560405190915084907fc8eb69c722facbe5fd7901674d0516c7d657c80d00809200070b150a0878681c90610d3b90841515815260200190565b60405180910390a2505050505050505050565b6000805160206135b0833981519152546001600160a01b031690565b80516020808301516040808501516060860151608087015160a08801519351600097610d9a979096959101613389565b604051602081830303815290604052805190602001209050919050565b610555610f8f565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610df2576106e08361116a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2b57600080fd5b505afa925050508015610e5b575060408051601f3d908101601f19168201909252610e58918101906132be565b60015b610ebe5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610368565b6000805160206135b08339815191528114610f2d5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610368565b506106e0838383611206565b600154610100900460ff16610f605760405162461bcd60e51b8152600401610368906133d5565b610864611231565b600154610100900460ff166108645760405162461bcd60e51b8152600401610368906133d5565b6098546001600160a01b031633146108645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610368565b609880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516bffffffffffffffffffffffff19606085901b1660208201526000908190819061107b906034016040516020818303038152906040528587611261565b91509150816110cc5760405162461bcd60e51b815260206004820152601f60248201527f4c32506f7274616c3a20696e76616c6964206163636f756e742070726f6f66006044820152606401610368565b6110d58161128a565b925050505b9392505050565b60408051602081018590526000918101829052819060600160408051601f1981840301815282825280516020918201209083018190529250611147910160408051601f1981840301815282820190915260018252600160f81b60208301529085876112ca565b95945050505050565b600080600080845160208601878a8af19695505050505050565b6001600160a01b0381163b6111d75760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610368565b6000805160206135b083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61120f836112ee565b60008251118061121c5750805b156106e05761122b838361132e565b50505050565b600154610100900460ff166112585760405162461bcd60e51b8152600401610368906133d5565b61086433610fe9565b60006060600061127086611424565b905061127d818686611456565b9250925050935093915050565b60008061129683611542565b905060006112a382611575565b90506000611147826002815181106112bd576112bd613420565b602002602001015161168b565b6000806112d686611424565b90506112e4818686866116b9565b9695505050505050565b6112f78161116a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6113965760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610368565b600080846001600160a01b0316846040516113b19190613436565b600060405180830381855af49150503d80600081146113ec576040519150601f19603f3d011682016040523d82523d6000602084013e6113f1565b606091505b509150915061141982826040518060600160405280602781526020016135d0602791396116f6565b925050505b92915050565b6060818051906020012060405160200161144091815260200190565b6040516020818303038152906040529050919050565b6000606060006114658561170f565b90506000806000611477848a896117fe565b8151929550909350915015808061148b5750815b6114e55760405162461bcd60e51b815260206004820152602560248201527f4d65726b6c65547269653a2070726f76696465642070726f6f6620697320696e6044820152641d985b1a5960da1b6064820152608401610368565b600081611501576040518060200160405280600081525061152d565b61152d86611510600188613452565b8151811061152057611520613420565b6020026020010151611dac565b805115159c909b509950505050505050505050565b60408051808201909152600080825260208201525b50604080518082019091528151815260209182019181019190915290565b606061158082611de3565b61158957600080fd5b600061159483611e1c565b905060008167ffffffffffffffff8111156115b1576115b1612eca565b6040519080825280602002602001820160405280156115f657816020015b60408051808201909152600080825260208201528152602001906001900390816115cf5790505b50905060006116088560200151611e9f565b85602001516116179190613371565b90506000805b848110156116805761162e83611f1a565b915060405180604001604052808381526020018481525084828151811061165757611657613420565b602090810291909101015261166c8284613371565b92508061167881613469565b91505061161d565b509195945050505050565b805160009060211461169c57600080fd5b600080836020015160016116b09190613371565b51949350505050565b60008060006116c9878686611456565b915091508180156116eb57508051602080830191909120875191880191909120145b979650505050505050565b606083156117055750816110da565b6110da8383611fc3565b805160609060008167ffffffffffffffff81111561172f5761172f612eca565b60405190808252806020026020018201604052801561177457816020015b604080518082019091526060808252602082015281526020019060019003908161174d5790505b50905060005b828110156117f657604051806040016040528086838151811061179f5761179f613420565b602002602001015181526020016117ce8784815181106117c1576117c1613420565b6020026020010151611fed565b8152508282815181106117e3576117e3613420565b602090810291909101015260010161177a565b509392505050565b6000606081808061180e87612000565b905060008660405160200161182591815260200190565b60408051601f19818403018152828201909152606080835260208301529150600090819060005b8c51811015611d4a578c818151811061186757611867613420565b60200260200101519150828461187d9190613371565b935061188a600188613371565b96508361192857815180516020918201206040516118d7926118b192910190815260200190565b604051602081830303815290604052868051602091820120825192909101919091201490565b6119235760405162461bcd60e51b815260206004820152601d60248201527f4d65726b6c65547269653a20696e76616c696420726f6f7420686173680000006044820152606401610368565b611a1e565b8151516020116119ae5781518051602091820120604051611952926118b192910190815260200190565b6119235760405162461bcd60e51b815260206004820152602760248201527f4d65726b6c65547269653a20696e76616c6964206c6172676520696e7465726e6044820152660c2d840d0c2e6d60cb1b6064820152608401610368565b815185516020808801919091208251919092012014611a1e5760405162461bcd60e51b815260206004820152602660248201527f4d65726b6c65547269653a20696e76616c696420696e7465726e616c206e6f646044820152650ca40d0c2e6d60d31b6064820152608401610368565b611a2a60106001613371565b8260200151511415611aa3578551841415611a4457611d4a565b6000868581518110611a5857611a58613420565b602001015160f81c60f81b60f81c9050600083602001518260ff1681518110611a8357611a83613420565b60200260200101519050611a968161211b565b9650600194505050611d38565b60028260200151511415611cdf576000611abc83612140565b9050600081600081518110611ad357611ad3613420565b016020015160f81c90506000611aea600283613484565b611af59060026134b4565b90506000611b06848360ff16612164565b90506000611b148b8a612164565b90506000611b22838361219a565b9050825182511015611b9c5760405162461bcd60e51b815260206004820152603960248201527f4d65726b6c65547269653a20696e76616c6964206b6579206c656e677468206660448201527f6f72206c656166206f7220657874656e73696f6e206e6f6465000000000000006064820152608401610368565b60ff851660021480611bb1575060ff85166003145b15611bff57808351148015611bc65750808251145b15611bd857611bd5818b613371565b99505b604051806040016040528060018152602001600160ff1b8152509a50505050505050611d4a565b60ff85161580611c12575060ff85166001145b15611c7c5782518114611c4657604051806040016040528060018152602001600160ff1b8152509a50505050505050611d4a565b611c6d8860200151600181518110611c6057611c60613420565b602002602001015161211b565b9a509750611d38945050505050565b60405162461bcd60e51b815260206004820152603260248201527f4d65726b6c65547269653a2072656365697665642061206e6f64652077697468604482015271040c2dc40eadcd6dcdeeedc40e0e4caccd2f60731b6064820152608401610368565b60405162461bcd60e51b815260206004820152602860248201527f4d65726b6c65547269653a20726563656976656420616e20756e706172736561604482015267626c65206e6f646560c01b6064820152608401610368565b80611d4281613469565b91505061184c565b5085611d568685612164565b6040805180820190915260018152600160ff1b6020918201528651908701207f56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4211498509850985050505050505093509350939050565b6020810151805160609161141e91611dc690600190613452565b81518110611dd657611dd6613420565b6020026020010151612219565b8051600090611df457506000919050565b6020820151805160001a9060c0821015611e12575060009392505050565b5060019392505050565b8051600090611e2d57506000919050565b600080611e3d8460200151611e9f565b8460200151611e4c9190613371565b9050600084600001518560200151611e649190613371565b90505b80821015611e9657611e7882611f1a565b611e829083613371565b915082611e8e81613469565b935050611e67565b50909392505050565b8051600090811a6080811015611eb85750600092915050565b60b8811080611ed3575060c08110801590611ed3575060f881105b15611ee15750600192915050565b60c0811015611f0e57611ef6600160b86134b4565b611f039060ff1682613452565b6110da906001613371565b611ef6600160f86134b4565b80516000908190811a6080811015611f355760019150611fbc565b60b8811015611f5b57611f49608082613452565b611f54906001613371565b9150611fbc565b60c0811015611f885760b78103600185019450806020036101000a85510460018201810193505050611fbc565b60f8811015611f9c57611f4960c082613452565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b815115611fd35781518083602001fd5b8060405162461bcd60e51b815260040161036891906134d7565b606061141e611ffb8361233c565b612371565b805160609060006120128260026134ea565b67ffffffffffffffff81111561202a5761202a612eca565b6040519080825280601f01601f191660200182016040528015612054576020820181803683370190505b5090506000805b838110156121115785818151811061207557612075613420565b6020910101516001600160f81b03198116925060041c60ff60f41b168361209d8360026134ea565b815181106120ad576120ad613420565b60200101906001600160f81b031916908160001a905350600f60f81b8216836120d78360026134ea565b6120e2906001613371565b815181106120f2576120f2613420565b60200101906001600160f81b031916908160001a90535060010161205b565b5090949350505050565b606060208260000151106121375761213282612219565b61141e565b61141e82612596565b606061141e61215f8360200151600081518110611dd657611dd6613420565b612000565b606082518210612183575060408051602081019091526000815261141e565b6110da83838486516121959190613452565b6125ac565b600080600083518551106121af5783516121b2565b84515b90505b808210801561220957508382815181106121d1576121d1613420565b602001015160f81c60f81b6001600160f81b0319168583815181106121f8576121f8613420565b01602001516001600160f81b031916145b156117f6578160010191506121b5565b60606000806000612229856126ee565b91945092509050600081600181111561224457612244613509565b146122b75760405162461bcd60e51b815260206004820152603960248201527f524c505265616465723a206465636f646564206974656d207479706520666f7260448201527f206279746573206973206e6f7420612064617461206974656d000000000000006064820152608401610368565b6122c18284613371565b85511461232d5760405162461bcd60e51b815260206004820152603460248201527f524c505265616465723a2062797465732076616c756520636f6e7461696e732060448201527330b71034b73b30b634b2103932b6b0b4b73232b960611b6064820152608401610368565b61114785602001518484612da9565b604080518082019091526000808252602082015260008251116115575760405162461bcd60e51b81526004016103689061351f565b60606000806000612381856126ee565b91945092509050600181600181111561239c5761239c613509565b1461240f5760405162461bcd60e51b815260206004820152603860248201527f524c505265616465723a206465636f646564206974656d207479706520666f7260448201527f206c697374206973206e6f742061206c697374206974656d00000000000000006064820152608401610368565b845161241b8385613371565b146124835760405162461bcd60e51b815260206004820152603260248201527f524c505265616465723a206c697374206974656d2068617320616e20696e76616044820152713634b2103230ba30903932b6b0b4b73232b960711b6064820152608401610368565b6040805160208082526104208201909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161249c5790505090506000845b875181101561258a5760008061250f6040518060400160405280858d600001516124f39190613452565b8152602001858d602001516125089190613371565b90526126ee565b50915091506040518060400160405280838361252b9190613371565b8152602001848c602001516125409190613371565b81525085858151811061255557612555613420565b602090810291909101015261256b600185613371565b93506125778183613371565b6125819084613371565b925050506124c9565b50815295945050505050565b606061141e826020015160008460000151612da9565b60608182601f0110156125f25760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610368565b8282840110156126355760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610368565b8183018451101561267c5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610368565b60608215801561269b57604051915060008252602082016040526126e5565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156126d45780518352602092830192016126bc565b5050858452601f01601f1916604052505b50949350505050565b6000806000808460000151116127165760405162461bcd60e51b81526004016103689061351f565b6020840151805160001a607f811161273b576000600160009450945094505050612da2565b60b78111612898576000612750608083613452565b9050808760000151116127d05760405162461bcd60e51b815260206004820152604e602482015260008051602061359083398151915260448201527f742062652067726561746572207468616e20737472696e67206c656e6774682060648201526d2873686f727420737472696e672960901b608482015260a401610368565b6001838101516001600160f81b03191690821415806127fd5750600160ff1b6001600160f81b0319821610155b6128855760405162461bcd60e51b815260206004820152604d60248201527f524c505265616465723a20696e76616c6964207072656669782c2073696e676c60448201527f652062797465203c203078383020617265206e6f74207072656669786564202860648201526c73686f727420737472696e672960981b608482015260a401610368565b5060019550935060009250612da2915050565b60bf8111612ad55760006128ad60b783613452565b9050808760000151116129305760405162461bcd60e51b8152602060048201526051602482015260008051602061359083398151915260448201527f74206265203e207468616e206c656e677468206f6620737472696e67206c656e60648201527067746820286c6f6e6720737472696e672960781b608482015260a401610368565b60018301516001600160f81b031916806129b35760405162461bcd60e51b815260206004820152604a602482015260008051602061359083398151915260448201527f74206e6f74206861766520616e79206c656164696e67207a65726f7320286c6f6064820152696e6720737472696e672960b01b608482015260a401610368565b600184015160088302610100031c60378111612a365760405162461bcd60e51b8152602060048201526048602482015260008051602061359083398151915260448201527f742062652067726561746572207468616e20353520627974657320286c6f6e6760648201526720737472696e672960c01b608482015260a401610368565b612a408184613371565b895111612ab85760405162461bcd60e51b815260206004820152604c602482015260008051602061359083398151915260448201527f742062652067726561746572207468616e20746f74616c206c656e677468202860648201526b6c6f6e6720737472696e672960a01b608482015260a401610368565b612ac3836001613371565b9750955060009450612da29350505050565b60f78111612b77576000612aea60c083613452565b905080876000015111612b665760405162461bcd60e51b815260206004820152604a602482015260008051602061359083398151915260448201527f742062652067726561746572207468616e206c697374206c656e677468202873606482015269686f7274206c6973742960b01b608482015260a401610368565b600195509350849250612da2915050565b6000612b8460f783613452565b905080876000015111612c035760405162461bcd60e51b815260206004820152604d602482015260008051602061359083398151915260448201527f74206265203e207468616e206c656e677468206f66206c697374206c656e677460648201526c6820286c6f6e67206c6973742960981b608482015260a401610368565b60018301516001600160f81b03191680612c845760405162461bcd60e51b8152602060048201526048602482015260008051602061359083398151915260448201527f74206e6f74206861766520616e79206c656164696e67207a65726f7320286c6f6064820152676e67206c6973742960c01b608482015260a401610368565b600184015160088302610100031c60378111612d055760405162461bcd60e51b8152602060048201526046602482015260008051602061359083398151915260448201527f742062652067726561746572207468616e20353520627974657320286c6f6e67606482015265206c6973742960d01b608482015260a401610368565b612d0f8184613371565b895111612d855760405162461bcd60e51b815260206004820152604a602482015260008051602061359083398151915260448201527f742062652067726561746572207468616e20746f74616c206c656e67746820286064820152696c6f6e67206c6973742960b01b608482015260a401610368565b612d90836001613371565b9750955060019450612da29350505050565b9193909250565b606060008267ffffffffffffffff811115612dc657612dc6612eca565b6040519080825280601f01601f191660200182016040528015612df0576020820181803683370190505b50905082612dff5790506110da565b6000612e0b8587613371565b90506020820160005b85811015612e2c578281015182820152602001612e14565b85811115612e3b576000868301525b50919695505050505050565b600060208284031215612e5957600080fd5b5035919050565b80356001600160a01b0381168114612e7757600080fd5b919050565b600060208284031215612e8e57600080fd5b6110da82612e60565b60008060408385031215612eaa57600080fd5b612eb383612e60565b9150612ec160208401612e60565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715612f0357612f03612eca565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612f3257612f32612eca565b604052919050565b600082601f830112612f4b57600080fd5b813567ffffffffffffffff811115612f6557612f65612eca565b612f78601f8201601f1916602001612f09565b818152846020838601011115612f8d57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612fbd57600080fd5b612fc683612e60565b9150602083013567ffffffffffffffff811115612fe257600080fd5b612fee85828601612f3a565b9150509250929050565b60008060006060848603121561300d57600080fd5b61301684612e60565b925060208401359150604084013567ffffffffffffffff81111561303957600080fd5b61304586828701612f3a565b9150509250925092565b60008083601f84011261306157600080fd5b50813567ffffffffffffffff81111561307957600080fd5b6020830191508360208260051b850101111561309457600080fd5b9250929050565b6000806000806000606086880312156130b357600080fd5b853567ffffffffffffffff808211156130cb57600080fd5b9087019060c0828a0312156130df57600080fd5b6130e7612ee0565b823581526130f760208401612e60565b602082015261310860408401612e60565b6040820152606083013560608201526080830135608082015260a08301358281111561313357600080fd5b61313f8b828601612f3a565b60a0830152509650602088013591508082111561315b57600080fd5b61316789838a0161304f565b9096509450604088013591508082111561318057600080fd5b5061318d8882890161304f565b969995985093965092949392505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60005b83811015613251578181015183820152602001613239565b8381111561122b5750506000910152565b6000815180845261327a816020860160208601613236565b601f01601f19169290920160200192915050565b8481528360208201526080604082015260006132ad6080830185613262565b905082606083015295945050505050565b6000602082840312156132d057600080fd5b5051919050565b600067ffffffffffffffff808411156132f2576132f2612eca565b8360051b6020613303818301612f09565b86815291850191818101903684111561331b57600080fd5b865b8481101561334f578035868111156133355760008081fd5b61334136828b01612f3a565b84525091830191830161331d565b50979650505050505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156133845761338461335b565b500190565b8681526001600160a01b03868116602083015285166040820152606081018490526080810183905260c060a082018190526000906133c990830184613262565b98975050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008251613448818460208701613236565b9190910192915050565b6000828210156134645761346461335b565b500390565b600060001982141561347d5761347d61335b565b5060010190565b600060ff8316806134a557634e487b7160e01b600052601260045260246000fd5b8060ff84160691505092915050565b600060ff821660ff8416808210156134ce576134ce61335b565b90039392505050565b6020815260006110da6020830184613262565b60008160001904831182151516156135045761350461335b565b500290565b634e487b7160e01b600052602160045260246000fd5b6020808252604a908201527f524c505265616465723a206c656e677468206f6620616e20524c50206974656d60408201527f206d7573742062652067726561746572207468616e207a65726f20746f206265606082015269206465636f6461626c6560b01b608082015260a0019056fe524c505265616465723a206c656e677468206f6620636f6e74656e74206d7573360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122009c3c33610e0c397a5a88066fe21d93059763854496f65ebf32d2cacdf2d226264736f6c63430008090033\";\n\ntype L2PortalConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: L2PortalConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class L2Portal__factory extends ContractFactory {\n  constructor(...args: L2PortalConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<L2Portal> {\n    return super.deploy(overrides || {}) as Promise<L2Portal>;\n  }\n  override getDeployTransaction(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override attach(address: string): L2Portal {\n    return super.attach(address) as L2Portal;\n  }\n  override connect(signer: Signer): L2Portal__factory {\n    return super.connect(signer) as L2Portal__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): L2PortalInterface {\n    return new utils.Interface(_abi) as L2PortalInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): L2Portal {\n    return new Contract(address, _abi, signerOrProvider) as L2Portal;\n  }\n}\n","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/L1Portal.sol/L1Portal__factory.ts",["434"],"/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { PromiseOrValue } from \"../../../../common\";\nimport type {\n  L1Portal,\n  L1PortalInterface,\n} from \"../../../../src/bridge/L1Portal.sol/L1Portal\";\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"ZeroAddress\",\n    type: \"error\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"previousAdmin\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"newAdmin\",\n        type: \"address\",\n      },\n    ],\n    name: \"AdminChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"beacon\",\n        type: \"address\",\n      },\n    ],\n    name: \"BeaconUpgraded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"target\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"gasLimit\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"depositHash\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"DepositInitiated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint8\",\n        name: \"version\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"Initialized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"implementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"Upgraded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"withdrawalHash\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"success\",\n        type: \"bool\",\n      },\n    ],\n    name: \"WithdrawalFinalized\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"donateETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"nonce\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"sender\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"value\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"gasLimit\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"data\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Types.CrossDomainMessage\",\n        name: \"withdrawalTx\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"assertionID\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes[]\",\n        name: \"withdrawalAccountProof\",\n        type: \"bytes[]\",\n      },\n      {\n        internalType: \"bytes[]\",\n        name: \"withdrawalProof\",\n        type: \"bytes[]\",\n      },\n    ],\n    name: \"finalizeWithdrawalTransaction\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"finalizedWithdrawals\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_rollup\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"target\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"gasLimit\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"initiateDeposit\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"initiatedDeposits\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"assertionID\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"isAssertionConfirmed\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"l2PortalAddress\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"l2Sender\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"nonce\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"rollup\",\n    outputs: [\n      {\n        internalType: \"contract IRollup\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_l2PortalAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"setL2PortalAddress\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newImplementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"upgradeTo\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newImplementation\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"receive\",\n  },\n] as const;\n\nconst _bytecode =\n  \"\";\n\ntype L1PortalConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: L1PortalConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class L1Portal__factory extends ContractFactory {\n  constructor(...args: L1PortalConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<L1Portal> {\n    return super.deploy(overrides || {}) as Promise<L1Portal>;\n  }\n  override getDeployTransaction(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override attach(address: string): L1Portal {\n    return super.attach(address) as L1Portal;\n  }\n  override connect(signer: Signer): L1Portal__factory {\n    return super.connect(signer) as L1Portal__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): L1PortalInterface {\n    return new utils.Interface(_abi) as L1PortalInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): L1Portal {\n    return new Contract(address, _abi, signerOrProvider) as L1Portal;\n  }\n}\n","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/IChallenge.sol/IChallenge__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/L1Oracle__factory.ts",["435"],"/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { PromiseOrValue } from \"../../../common\";\nimport type { L1Oracle, L1OracleInterface } from \"../../../src/bridge/L1Oracle\";\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"previousAdmin\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"newAdmin\",\n        type: \"address\",\n      },\n    ],\n    name: \"AdminChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"beacon\",\n        type: \"address\",\n      },\n    ],\n    name: \"BeaconUpgraded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint8\",\n        name: \"version\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"Initialized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"stateRoot\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"L1OracleValuesUpdated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"previousOwner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"OwnershipTransferred\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"implementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"Upgraded\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"blockNumber\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_sequencer\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"proxiableUUID\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"sequencer\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_blockNumber\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"_stateRoot\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"setL1OracleValues\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_sequencer\",\n        type: \"address\",\n      },\n    ],\n    name: \"setSequencer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"stateRoot\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newOwner\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newImplementation\",\n        type: \"address\",\n      },\n    ],\n    name: \"upgradeTo\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"newImplementation\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"upgradeToAndCall\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n] as const;\n\nconst _bytecode =\n  \"\";\n\ntype L1OracleConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: L1OracleConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class L1Oracle__factory extends ContractFactory {\n  constructor(...args: L1OracleConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<L1Oracle> {\n    return super.deploy(overrides || {}) as Promise<L1Oracle>;\n  }\n  override getDeployTransaction(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override attach(address: string): L1Oracle {\n    return super.attach(address) as L1Oracle;\n  }\n  override connect(signer: Signer): L1Oracle__factory {\n    return super.connect(signer) as L1Oracle__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): L1OracleInterface {\n    return new utils.Interface(_abi) as L1OracleInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): L1Oracle {\n    return new Contract(address, _abi, signerOrProvider) as L1Oracle;\n  }\n}\n","/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/L2Portal.sol/L2PortalDeterministicStorage__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/L1Portal.sol/L1PortalDeterministicStorage__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/IL1Portal__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol/IERC1822ProxiableUpgradeable__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable__factory.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/pre-deploy/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/Rollup.sol/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/verifier/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/challenge/IChallenge.sol/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/L1Portal.sol/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/src/bridge/L2Portal.sol/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/interfaces/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/utils/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/proxy/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/access/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/proxy/utils/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/proxy/beacon/index.ts",[],"/Users/ayush/Documents/GitHub/bridge-frontend/specular/bridge-frontend/src/typechain-types/factories/@openzeppelin/contracts-upgradeable/proxy/ERC1967/index.ts",[],{"ruleId":"436","severity":1,"message":"437","line":27,"column":3,"nodeType":"438","messageId":"439","endLine":27,"endColumn":21},{"ruleId":"436","severity":1,"message":"440","line":29,"column":3,"nodeType":"438","messageId":"439","endLine":29,"endColumn":19},{"ruleId":"436","severity":1,"message":"441","line":30,"column":3,"nodeType":"438","messageId":"439","endLine":30,"endColumn":27},{"ruleId":"436","severity":1,"message":"442","line":39,"column":66,"nodeType":"438","messageId":"439","endLine":39,"endColumn":90},{"ruleId":"436","severity":1,"message":"443","line":56,"column":10,"nodeType":"438","messageId":"439","endLine":56,"endColumn":34},{"ruleId":"436","severity":1,"message":"444","line":56,"column":36,"nodeType":"438","messageId":"439","endLine":56,"endColumn":63},{"ruleId":"445","severity":1,"message":"446","line":74,"column":34,"nodeType":"447","messageId":"448","endLine":74,"endColumn":36},{"ruleId":"445","severity":1,"message":"446","line":74,"column":73,"nodeType":"447","messageId":"448","endLine":74,"endColumn":75},{"ruleId":"436","severity":1,"message":"449","line":88,"column":9,"nodeType":"438","messageId":"439","endLine":88,"endColumn":17},{"ruleId":"436","severity":1,"message":"450","line":8,"column":8,"nodeType":"438","messageId":"439","endLine":8,"endColumn":19},{"ruleId":"451","severity":1,"message":"452","line":35,"column":8,"nodeType":"453","endLine":35,"endColumn":10,"suggestions":"454"},{"ruleId":"436","severity":1,"message":"450","line":3,"column":8,"nodeType":"438","messageId":"439","endLine":3,"endColumn":19},{"ruleId":"436","severity":1,"message":"455","line":31,"column":9,"nodeType":"438","messageId":"439","endLine":31,"endColumn":19},{"ruleId":"436","severity":1,"message":"456","line":1,"column":10,"nodeType":"438","messageId":"439","endLine":1,"endColumn":21},{"ruleId":"436","severity":1,"message":"457","line":3,"column":28,"nodeType":"438","messageId":"439","endLine":3,"endColumn":37},{"ruleId":"436","severity":1,"message":"458","line":4,"column":28,"nodeType":"438","messageId":"439","endLine":4,"endColumn":37},{"ruleId":null,"fatal":true,"severity":2,"message":"459","line":343,"column":12},{"ruleId":null,"fatal":true,"severity":2,"message":"459","line":1122,"column":12},{"ruleId":null,"fatal":true,"severity":2,"message":"459","line":271,"column":12},{"ruleId":null,"fatal":true,"severity":2,"message":"459","line":185,"column":12},{"ruleId":null,"fatal":true,"severity":2,"message":"459","line":392,"column":12},{"ruleId":null,"fatal":true,"severity":2,"message":"459","line":266,"column":12},{"ruleId":null,"fatal":true,"severity":2,"message":"459","line":236,"column":12},{"ruleId":null,"fatal":true,"severity":2,"message":"459","line":448,"column":12},{"ruleId":null,"fatal":true,"severity":2,"message":"459","line":480,"column":12},{"ruleId":null,"fatal":true,"severity":2,"message":"459","line":277,"column":12},"@typescript-eslint/no-unused-vars","'IL2Portal__factory' is defined but never used.","Identifier","unusedVar","'IRollup__factory' is defined but never used.","'ISequencerInbox__factory' is defined but never used.","'resetFinalizeDepositData' is assigned a value but never used.","'isDepositReadyToFinalize' is assigned a value but never used.","'setIsDepositReadyToFinalize' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'l1Oracle' is assigned a value but never used.","'TestnetLogo' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setOpenGetMoreFaq'. Either include it or remove the dependency array. If 'setOpenGetMoreFaq' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["460"],"'watchAsset' is assigned a value but never used.","'formatUnits' is defined but never used.","'ArrowLeft' is defined but never used.","'CrossIcon' is defined but never used.","Parsing error: ',' expected.",{"desc":"461","fix":"462"},"Update the dependencies array to be: [setOpenGetMoreFaq]",{"range":"463","text":"464"},[1164,1166],"[setOpenGetMoreFaq]"]