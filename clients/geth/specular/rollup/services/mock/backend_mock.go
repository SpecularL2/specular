// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/ujval/dev/research/specular/clients/geth/specular/rollup/services/backend.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	core "github.com/ethereum/go-ethereum/core"
	state "github.com/ethereum/go-ethereum/core/state"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// BlockChain mocks base method.
func (m *MockBackend) BlockChain() *core.BlockChain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockChain")
	ret0, _ := ret[0].(*core.BlockChain)
	return ret0
}

// BlockChain indicates an expected call of BlockChain.
func (mr *MockBackendMockRecorder) BlockChain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockChain", reflect.TypeOf((*MockBackend)(nil).BlockChain))
}

// StateAtBlock mocks base method.
func (m *MockBackend) StateAtBlock(block *types.Block, reexec uint64, base *state.StateDB, checkLive, preferDisk bool) (*state.StateDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateAtBlock", block, reexec, base, checkLive, preferDisk)
	ret0, _ := ret[0].(*state.StateDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateAtBlock indicates an expected call of StateAtBlock.
func (mr *MockBackendMockRecorder) StateAtBlock(block, reexec, base, checkLive, preferDisk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateAtBlock", reflect.TypeOf((*MockBackend)(nil).StateAtBlock), block, reexec, base, checkLive, preferDisk)
}

// TxPool mocks base method.
func (m *MockBackend) TxPool() *core.TxPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxPool")
	ret0, _ := ret[0].(*core.TxPool)
	return ret0
}

// TxPool indicates an expected call of TxPool.
func (mr *MockBackendMockRecorder) TxPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxPool", reflect.TypeOf((*MockBackend)(nil).TxPool))
}
