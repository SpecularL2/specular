{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AssertionAlreadyResolved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AssertionOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChallengePeriodPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChallengedStaker",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DuplicateAssertion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyAssertion",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker1Challenge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "staker2Challenge",
          "type": "address"
        }
      ],
      "name": "InDifferentChallenge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InboxReadLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientStake",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInboxSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumAssertionPeriodNotPassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoStaker",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoUnresolvedAssertion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllStaked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "challenge",
          "type": "address"
        }
      ],
      "name": "NotChallengeManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInChallenge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSiblings",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotStaked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ParentAssertionUnstaked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PreviousStateHash",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakedOnUnconfirmedAssertion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakerStakedOnTarget",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakersPresent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnproposedAssertion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongOrder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assertionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "challengeAddr",
          "type": "address"
        }
      ],
      "name": "AssertionChallenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assertionID",
          "type": "uint256"
        }
      ],
      "name": "AssertionConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assertionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asserterAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "vmHash",
          "type": "bytes32"
        }
      ],
      "name": "AssertionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assertionID",
          "type": "uint256"
        }
      ],
      "name": "AssertionRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakerAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assertionID",
          "type": "uint256"
        }
      ],
      "name": "StakerStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assertionID",
          "type": "uint256"
        }
      ],
      "name": "advanceStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "assertions",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "stateHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "inboxSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "parent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proposalTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numStakers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "childInboxSize",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[2]",
          "name": "players",
          "type": "address[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "assertionIDs",
          "type": "uint256[2]"
        }
      ],
      "name": "challengeAssertion",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "challengePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "loser",
          "type": "address"
        }
      ],
      "name": "completeChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "confirmFirstUnresolvedAssertion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "confirmationPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "confirmedInboxSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vmHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "inboxSize",
          "type": "uint256"
        }
      ],
      "name": "createAssertion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRequiredStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daProvider",
      "outputs": [
        {
          "internalType": "contract IDAProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assertionID",
          "type": "uint256"
        }
      ],
      "name": "getAssertion",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "inboxSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "parent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "proposalTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numStakers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "childInboxSize",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRollup.Assertion",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getStaker",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isStaked",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amountStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assertionID",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currentChallenge",
              "type": "address"
            }
          ],
          "internalType": "struct IRollup.Staker",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_daProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_confirmationPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumAssertionPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseStakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialAssertionID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialInboxSize",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_initialVMhash",
          "type": "bytes32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assertionID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        }
      ],
      "name": "isStakedOnAssertion",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastConfirmedAssertionID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastCreatedAssertionID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastResolvedAssertionID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumAssertionPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numStakers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        }
      ],
      "name": "rejectFirstUnresolvedAssertion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        }
      ],
      "name": "removeStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isStaked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assertionID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currentChallenge",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawableFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "zombies",
      "outputs": [
        {
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastAssertionID",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "626f3678c343da9345ec00a1d1226bd4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AssertionAlreadyResolved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssertionOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChallengePeriodPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChallengedStaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateAssertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyAssertion\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker1Challenge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker2Challenge\",\"type\":\"address\"}],\"name\":\"InDifferentChallenge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InboxReadLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInboxSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumAssertionPeriodNotPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoUnresolvedAssertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllStaked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"challenge\",\"type\":\"address\"}],\"name\":\"NotChallengeManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInChallenge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSiblings\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParentAssertionUnstaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PreviousStateHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakedOnUnconfirmedAssertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakerStakedOnTarget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakersPresent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnproposedAssertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assertionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"challengeAddr\",\"type\":\"address\"}],\"name\":\"AssertionChallenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assertionID\",\"type\":\"uint256\"}],\"name\":\"AssertionConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assertionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asserterAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"vmHash\",\"type\":\"bytes32\"}],\"name\":\"AssertionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assertionID\",\"type\":\"uint256\"}],\"name\":\"AssertionRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakerAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assertionID\",\"type\":\"uint256\"}],\"name\":\"StakerStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assertionID\",\"type\":\"uint256\"}],\"name\":\"advanceStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assertions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"inboxSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numStakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"childInboxSize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"players\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"assertionIDs\",\"type\":\"uint256[2]\"}],\"name\":\"challengeAssertion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loser\",\"type\":\"address\"}],\"name\":\"completeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmFirstUnresolvedAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmationPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmedInboxSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vmHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"inboxSize\",\"type\":\"uint256\"}],\"name\":\"createAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRequiredStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daProvider\",\"outputs\":[{\"internalType\":\"contract IDAProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assertionID\",\"type\":\"uint256\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"inboxSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numStakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"childInboxSize\",\"type\":\"uint256\"}],\"internalType\":\"struct IRollup.Assertion\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assertionID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentChallenge\",\"type\":\"address\"}],\"internalType\":\"struct IRollup.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_confirmationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumAssertionPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialAssertionID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialInboxSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_initialVMhash\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assertionID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"isStakedOnAssertion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastConfirmedAssertionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCreatedAssertionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastResolvedAssertionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAssertionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"rejectFirstUnresolvedAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assertionID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentChallenge\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"zombies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastAssertionID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AssertionAlreadyResolved()\":[{\"details\":\"Thrown when the assertion is already resolved\"}],\"AssertionOutOfRange()\":[{\"details\":\"Thrown when a staker tries to advance stake to invalid assertionId.\"}],\"ChallengePeriodPending()\":[{\"details\":\"Thrown when the challenge period has not passed\"}],\"ChallengedStaker()\":[{\"details\":\"Thrown when the staker is currently in Challenge\"}],\"DuplicateAssertion()\":[{\"details\":\"Thrown when assertion is a duplicate of an existing one.\"}],\"EmptyAssertion()\":[{\"details\":\"Thrown when a sender tries to create assertion without any tx.\"}],\"InDifferentChallenge(address,address)\":[{\"details\":\"Thrown when the two stakers are in different challenge\",\"params\":{\"staker1Challenge\":\"challenge address of staker 1\",\"staker2Challenge\":\"challenge address of staker 2\"}}],\"InboxReadLimitExceeded()\":[{\"details\":\"Thrown when the requested assertion read past the end of current Inbox.\"}],\"InsufficientStake()\":[{\"details\":\"Thrown when the function is called with Insufficient Stake\"}],\"InvalidInboxSize()\":[{\"details\":\"Thrown when assertion creation requested with invalid inbox size.\"}],\"InvalidParent()\":[{\"details\":\"Thrown when the assertion's parent is not the last confirmed assertion\"}],\"MinimumAssertionPeriodNotPassed()\":[{\"details\":\"Thrown when a sender tries to create assertion before the minimum assertion time period\"}],\"NoStaker()\":[{\"details\":\"Thrown when there are zero stakers\"}],\"NoUnresolvedAssertion()\":[{\"details\":\"Thrown when there is no unresolved assertion\"}],\"NotAllStaked()\":[{\"details\":\"Thrown when all the stakers are not staked\"}],\"NotChallengeManager(address,address)\":[{\"details\":\"Thrown when unauthorized (!challenge) address calls an only-challenge function\",\"params\":{\"challenge\":\"The challenge address authorized to call this function\",\"sender\":\"Address of the caller\"}}],\"NotInChallenge()\":[{\"details\":\"Thrown when the staker is not in a challenge\"}],\"NotSiblings()\":[{\"details\":\"Thrown when the challenger and defender didn't attest to sibling assertions\"}],\"NotStaked()\":[{\"details\":\"Thrown when address that have not staked any token calls a only-staked function\"}],\"ParentAssertionUnstaked()\":[{\"details\":\"Thrown when a staker tries to advance stake to non-child assertion\"}],\"PreviousStateHash()\":[{\"details\":\"Thrown when parent's statehash is not equal to the start state(or previous state)/\"}],\"StakedOnUnconfirmedAssertion()\":[{\"details\":\"Thrown when the caller is staked on unconfirmed assertion.\"}],\"StakerStakedOnTarget()\":[{\"details\":\"Thrown staker's assertion is descendant of firstUnresolved assertion\"}],\"StakersPresent()\":[{\"details\":\"Thrown when there are staker's present on the assertion\"}],\"TransferFailed()\":[{\"details\":\"Thrown when transfer fails\"}],\"UnproposedAssertion()\":[{\"details\":\"Thrown when the challenger tries to challenge an unproposed assertion\"}],\"WrongOrder()\":[{\"details\":\"Thrown when the challenge assertion Id is not ordered or in range.\"}],\"ZeroAddress()\":[{\"details\":\"Thrown when function is called with a zero address argument\"}]},\"kind\":\"dev\",\"methods\":{\"advanceStake(uint256)\":{\"params\":{\"assertionID\":\"ID of assertion to advance stake to. Currently this must be a child of the current assertion. TODO: generalize to arbitrary descendants.\"}},\"challengeAssertion(address[2],uint256[2])\":{\"params\":{\"assertionIDs\":\"Assertion IDs of the players engaged in the challenge. The first ID should be the earlier-created and is the one being challenged.\",\"players\":\"Defender (first) and challenger (second) addresses. Must be staked on DAs on different branches.\"},\"returns\":{\"_0\":\"Newly created challenge contract address.\"}},\"completeChallenge(address,address)\":{\"params\":{\"loser\":\"Address of losing staker.\",\"winner\":\"Address of winning staker.\"}},\"confirmedInboxSize()\":{\"returns\":{\"_0\":\"confirmedInboxSize size of inbox confirmed\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createAssertion(bytes32,uint256)\":{\"params\":{\"inboxSize\":\"Size of inbox corresponding to assertion (number of transactions).\",\"vmHash\":\"New VM hash.\"}},\"currentRequiredStake()\":{\"returns\":{\"_0\":\"The current required stake amount.\"}},\"getAssertion(uint256)\":{\"params\":{\"assertionID\":\"Assertion ID.\"},\"returns\":{\"_0\":\"Assertion corresponding to ID.\"}},\"getStaker(address)\":{\"params\":{\"addr\":\"Staker address.\"},\"returns\":{\"_0\":\"Staker corresponding to address.\"}},\"isStakedOnAssertion(uint256,address)\":{\"returns\":{\"_0\":\"Whether or not the staker is staked on the assertion.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"rejectFirstUnresolvedAssertion(address)\":{\"params\":{\"stakerAddress\":\"Address of a staker staked on a different branch to the first unresolved assertion. If the first unresolved assertion's parent is confirmed, this parameter is used to establish that a staker exists on a different branch of the assertion chain. This parameter is ignored when the parent of the first unresolved assertion is not the last confirmed assertion.\"}},\"removeStake(address)\":{\"params\":{\"stakerAddress\":\"Address of staker for which to unstake.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stake()\":{\"details\":\"Currently uses Ether to stake; Must be > than defined threshold if this is a new stake.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake(uint256)\":{\"params\":{\"stakeAmount\":\"Token amount to withdraw. Must be <= sender's current stake minus the current required stake.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"advanceStake(uint256)\":{\"notice\":\"Advances msg.sender's existing stake to assertionID.\"},\"challengeAssertion(address[2],uint256[2])\":{\"notice\":\"Initiates a dispute between a defender and challenger on an unconfirmed DA.\"},\"completeChallenge(address,address)\":{\"notice\":\"Completes ongoing challenge. Callback, called by a challenge contract.\"},\"confirmFirstUnresolvedAssertion()\":{\"notice\":\"Confirms first unresolved assertion. Assertion is confirmed if and only if: (1) there is at least one staker, and (2) challenge period has passed, and (3) predecessor has been confirmed, and (4) all stakers are staked on the assertion.\"},\"createAssertion(bytes32,uint256)\":{\"notice\":\"Creates a new DA representing the rollup state after executing a block of transactions (sequenced in SequencerInbox). Block is represented by all transactions in range [prevInboxSize, inboxSize]. The latest staked DA of the sender is considered to be the predecessor. Moves sender stake onto the new DA. The new DA stores the hash of the parameters: H(l2GasUsed || vmHash)\"},\"rejectFirstUnresolvedAssertion(address)\":{\"notice\":\"Rejects first unresolved assertion. Assertion is rejected if and only if: (1) all of the following are true: (a) challenge period has passed, and (b) at least one staker exists, and (c) no staker remains staked on the assertion (all have been destroyed). OR (2) predecessor has been rejected\"},\"removeStake(address)\":{\"notice\":\"Removes stakerAddress from the set of stakers and withdraws the full stake amount to stakerAddress. This can be called by anyone since it is currently necessary to keep the chain progressing.\"},\"stake()\":{\"notice\":\"Deposits stake on staker's current assertion (or the last confirmed assertion if not currently staked).\"},\"unstake(uint256)\":{\"notice\":\"Withdraws stakeAmount from staker's stake if assertion it is staked on is confirmed.\"},\"withdraw()\":{\"notice\":\"Withdraws all of msg.sender's withdrawable funds.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Rollup.sol\":\"Rollup\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb8d68221343ed784c7b76edb6a686cb65e49c476d9e22bb89a5c0c3947ff14db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x1599637b52d20dc3954cea44914b2a4a9a8a5caade58d9da947e0b6c9acc07ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"src/IDAProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2022, Specular contributors\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Data availability interface to rollup contracts.\\n */\\ninterface IDAProvider {\\n    /**\\n     * @notice Gets inbox size (total number of messages stored).\\n     */\\n    function getInboxSize() external view returns (uint256);\\n    /**\\n     * Verifies proof of inclusion of a transaction by the data availability provider.\\n     * If verification fails, the function reverts.\\n     * @param encodedTx RLP-encoded transaction.\\n     * @param proof DA-specific membership proof.\\n     */\\n    function verifyTxInclusion(bytes memory encodedTx, bytes calldata proof) external view;\\n}\\n\",\"keccak256\":\"0xb4b4479a2aa53da366d47c14b6bee3e4d93abd61412492ba322a946b92aeb79d\",\"license\":\"Apache-2.0\"},\"src/IRollup.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Modifications Copyright 2022, Specular contributors\\n *\\n * This file was changed in accordance to Apache License, Version 2.0.\\n *\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRollup {\\n    event AssertionCreated(uint256 assertionID, address asserterAddr, bytes32 vmHash);\\n\\n    event AssertionChallenged(uint256 assertionID, address challengeAddr);\\n\\n    event AssertionConfirmed(uint256 assertionID);\\n\\n    event AssertionRejected(uint256 assertionID);\\n\\n    event StakerStaked(address stakerAddr, uint256 assertionID);\\n\\n    // TODO: Include errors thrown in function documentation.\\n\\n    /// @dev Thrown when assertion creation requested with invalid inbox size.\\n    error InvalidInboxSize();\\n\\n    /// @dev Thrown when assertion is a duplicate of an existing one.\\n    error DuplicateAssertion();\\n\\n    /// @dev Thrown when address that have not staked any token calls a only-staked function\\n    error NotStaked();\\n\\n    /// @dev Thrown when the function is called with Insufficient Stake\\n    error InsufficientStake();\\n\\n    /// @dev Thrown when the caller is staked on unconfirmed assertion.\\n    error StakedOnUnconfirmedAssertion();\\n\\n    /// @dev Thrown when transfer fails\\n    error TransferFailed();\\n\\n    /// @dev Thrown when a staker tries to advance stake to invalid assertionId.\\n    error AssertionOutOfRange();\\n\\n    /// @dev Thrown when a staker tries to advance stake to non-child assertion\\n    error ParentAssertionUnstaked();\\n\\n    /// @dev Thrown when a sender tries to create assertion before the minimum assertion time period\\n    error MinimumAssertionPeriodNotPassed();\\n\\n    /// @dev Thrown when parent's statehash is not equal to the start state(or previous state)/\\n    error PreviousStateHash();\\n\\n    /// @dev Thrown when a sender tries to create assertion without any tx.\\n    error EmptyAssertion();\\n\\n    /// @dev Thrown when the requested assertion read past the end of current Inbox.\\n    error InboxReadLimitExceeded();\\n\\n    /// @dev Thrown when the challenge assertion Id is not ordered or in range.\\n    error WrongOrder();\\n\\n    /// @dev Thrown when the challenger tries to challenge an unproposed assertion\\n    error UnproposedAssertion();\\n\\n    /// @dev Thrown when the assertion is already resolved\\n    error AssertionAlreadyResolved();\\n\\n    /// @dev Thrown when there is no unresolved assertion\\n    error NoUnresolvedAssertion();\\n\\n    /// @dev Thrown when the challenge period has not passed\\n    error ChallengePeriodPending();\\n\\n    /// @dev Thrown when the challenger and defender didn't attest to sibling assertions\\n    error NotSiblings();\\n\\n    /// @dev Thrown when the assertion's parent is not the last confirmed assertion\\n    error InvalidParent();\\n\\n    /// @dev Thrown when the staker is not in a challenge\\n    error NotInChallenge();\\n\\n    /// @dev Thrown when the two stakers are in different challenge\\n    /// @param staker1Challenge challenge address of staker 1\\n    /// @param staker2Challenge challenge address of staker 2\\n    error InDifferentChallenge(address staker1Challenge, address staker2Challenge);\\n\\n    /// @dev Thrown when the staker is currently in Challenge\\n    error ChallengedStaker();\\n\\n    /// @dev Thrown when all the stakers are not staked\\n    error NotAllStaked();\\n\\n    /// @dev Thrown staker's assertion is descendant of firstUnresolved assertion\\n    error StakerStakedOnTarget();\\n\\n    /// @dev Thrown when there are staker's present on the assertion\\n    error StakersPresent();\\n\\n    /// @dev Thrown when there are zero stakers\\n    error NoStaker();\\n\\n    struct Staker {\\n        bool isStaked;\\n        uint256 amountStaked;\\n        uint256 assertionID; // latest staked assertion ID\\n        address currentChallenge; // address(0) if none\\n    }\\n\\n    struct Assertion {\\n        bytes32 stateHash; // Hash of execution state associated with assertion. Currently equiv to `vmHash`.\\n        uint256 inboxSize; // Inbox size this assertion advanced to\\n        uint256 parent; // Parent assertion ID\\n        uint256 deadline; // Dispute deadline (L1 block number)\\n        uint256 proposalTime; // L1 block number at which assertion was proposed\\n        // Staking state\\n        uint256 numStakers; // total number of stakers that have ever staked on this assertion. increasing only.\\n        // Child state\\n        uint256 childInboxSize; // child assertion inbox state\\n    }\\n\\n    /**\\n     * @param addr Staker address.\\n     * @return Staker corresponding to address.\\n     */\\n    function getStaker(address addr) external view returns (Staker memory);\\n\\n    /**\\n     * @param assertionID Assertion ID.\\n     * @return Assertion corresponding to ID.\\n     */\\n    function getAssertion(uint256 assertionID) external view returns (Assertion memory);\\n\\n    /**\\n     * @return Whether or not the staker is staked on the assertion.\\n     */\\n    function isStakedOnAssertion(uint256 assertionID, address stakerAddress) external view returns (bool);\\n\\n    /**\\n     * @return The current required stake amount.\\n     */\\n    function currentRequiredStake() external view returns (uint256);\\n\\n    /**\\n     * @return confirmedInboxSize size of inbox confirmed\\n     */\\n    function confirmedInboxSize() external view returns (uint256);\\n\\n    /**\\n     * @notice Deposits stake on staker's current assertion (or the last confirmed assertion if not currently staked).\\n     * @dev Currently uses Ether to stake; Must be > than defined threshold if this is a new stake.\\n     */\\n    function stake() external payable;\\n\\n    /**\\n     * @notice Withdraws stakeAmount from staker's stake if assertion it is staked on is confirmed.\\n     * @param stakeAmount Token amount to withdraw. Must be <= sender's current stake minus the current required stake.\\n     */\\n    function unstake(uint256 stakeAmount) external;\\n\\n    /**\\n     * @notice Removes stakerAddress from the set of stakers and withdraws the full stake amount to stakerAddress.\\n     * This can be called by anyone since it is currently necessary to keep the chain progressing.\\n     * @param stakerAddress Address of staker for which to unstake.\\n     */\\n    function removeStake(address stakerAddress) external;\\n\\n    /**\\n     * @notice Advances msg.sender's existing stake to assertionID.\\n     * @param assertionID ID of assertion to advance stake to. Currently this must be a child of the current assertion.\\n     * TODO: generalize to arbitrary descendants.\\n     */\\n    function advanceStake(uint256 assertionID) external;\\n\\n    /**\\n     * @notice Withdraws all of msg.sender's withdrawable funds.\\n     */\\n    function withdraw() external;\\n\\n    /**\\n     * @notice Creates a new DA representing the rollup state after executing a block of transactions (sequenced in SequencerInbox).\\n     * Block is represented by all transactions in range [prevInboxSize, inboxSize]. The latest staked DA of the sender\\n     * is considered to be the predecessor. Moves sender stake onto the new DA.\\n     *\\n     * The new DA stores the hash of the parameters: H(l2GasUsed || vmHash)\\n     *\\n     * @param vmHash New VM hash.\\n     * @param inboxSize Size of inbox corresponding to assertion (number of transactions).\\n     */\\n    function createAssertion(bytes32 vmHash, uint256 inboxSize) external;\\n\\n    /**\\n     * @notice Initiates a dispute between a defender and challenger on an unconfirmed DA.\\n     * @param players Defender (first) and challenger (second) addresses. Must be staked on DAs on different branches.\\n     * @param assertionIDs Assertion IDs of the players engaged in the challenge. The first ID should be the earlier-created and is the one being challenged.\\n     * @return Newly created challenge contract address.\\n     */\\n    function challengeAssertion(address[2] calldata players, uint256[2] calldata assertionIDs)\\n        external\\n        returns (address);\\n\\n    /**\\n     * @notice Confirms first unresolved assertion. Assertion is confirmed if and only if:\\n     * (1) there is at least one staker, and\\n     * (2) challenge period has passed, and\\n     * (3) predecessor has been confirmed, and\\n     * (4) all stakers are staked on the assertion.\\n     */\\n    function confirmFirstUnresolvedAssertion() external;\\n\\n    /**\\n     * @notice Rejects first unresolved assertion. Assertion is rejected if and only if:\\n     * (1) all of the following are true:\\n     * (a) challenge period has passed, and\\n     * (b) at least one staker exists, and\\n     * (c) no staker remains staked on the assertion (all have been destroyed).\\n     * OR\\n     * (2) predecessor has been rejected\\n     * @param stakerAddress Address of a staker staked on a different branch to the first unresolved assertion.\\n     * If the first unresolved assertion's parent is confirmed, this parameter is used to establish that a staker exists\\n     * on a different branch of the assertion chain. This parameter is ignored when the parent of the first unresolved\\n     * assertion is not the last confirmed assertion.\\n     */\\n    function rejectFirstUnresolvedAssertion(address stakerAddress) external;\\n}\\n\",\"keccak256\":\"0x6287ccd65f20e60b2a1eaf238f822c93aaf8d804315f99e448fc6756847047af\",\"license\":\"Apache-2.0\"},\"src/Rollup.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Modifications Copyright 2022, Specular contributors\\n *\\n * This file was changed in accordance to Apache License, Version 2.0.\\n *\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./challenge/IChallenge.sol\\\";\\nimport \\\"./challenge/SymChallenge.sol\\\";\\nimport \\\"./challenge/ChallengeLib.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./IDAProvider.sol\\\";\\nimport \\\"./IRollup.sol\\\";\\n\\nabstract contract RollupBase is\\n    IRollup,\\n    IChallengeResultReceiver,\\n    Initializable,\\n    UUPSUpgradeable,\\n    OwnableUpgradeable\\n{\\n    // Config parameters\\n    uint256 public confirmationPeriod; // number of L1 blocks\\n    uint256 public challengePeriod; // number of L1 blocks\\n    uint256 public minimumAssertionPeriod; // number of L1 blocks\\n    uint256 public baseStakeAmount; // number of stake tokens\\n\\n    address public vault;\\n    IDAProvider public daProvider;\\n    IVerifier public verifier;\\n\\n    struct AssertionState {\\n        mapping(address => bool) stakers; // all stakers that have ever staked on this assertion.\\n        mapping(bytes32 => bool) childStateHashes; // child assertion vm hashes\\n    }\\n\\n    struct Zombie {\\n        address stakerAddress;\\n        uint256 lastAssertionID;\\n    }\\n\\n    function __RollupBase_init() internal onlyInitializing {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n    }\\n}\\n\\ncontract Rollup is RollupBase {\\n    modifier stakedOnly() {\\n        if (!isStaked(msg.sender)) {\\n            revert NotStaked();\\n        }\\n        _;\\n    }\\n\\n    // Assertion state\\n    uint256 public lastResolvedAssertionID;\\n    uint256 public lastConfirmedAssertionID;\\n    uint256 public lastCreatedAssertionID;\\n    mapping(uint256 => Assertion) public assertions; // mapping from assertionID to assertion\\n    mapping(uint256 => AssertionState) private assertionState; // mapping from assertionID to assertion state\\n\\n    // Staking state\\n    uint256 public numStakers; // current total number of stakers\\n    mapping(address => Staker) public stakers; // mapping from staker addresses to corresponding stakers\\n    mapping(address => uint256) public withdrawableFunds; // mapping from addresses to withdrawable funds (won in challenge)\\n    Zombie[] public zombies; // stores stakers that lost a challenge\\n\\n    function initialize(\\n        address _vault,\\n        address _daProvider,\\n        address _verifier,\\n        uint256 _confirmationPeriod,\\n        uint256 _challengePeriod,\\n        uint256 _minimumAssertionPeriod,\\n        uint256 _baseStakeAmount,\\n        uint256 _initialAssertionID,\\n        uint256 _initialInboxSize,\\n        bytes32 _initialVMhash\\n    ) public initializer {\\n        if (_vault == address(0) || _daProvider == address(0) || _verifier == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        vault = _vault;\\n        daProvider = IDAProvider(_daProvider);\\n        verifier = IVerifier(_verifier);\\n\\n        confirmationPeriod = _confirmationPeriod;\\n        challengePeriod = _challengePeriod;\\n        minimumAssertionPeriod = _minimumAssertionPeriod;\\n        baseStakeAmount = _baseStakeAmount;\\n\\n        lastResolvedAssertionID = _initialAssertionID;\\n        lastConfirmedAssertionID = _initialAssertionID;\\n        lastCreatedAssertionID = _initialAssertionID;\\n\\n        createAssertionHelper(\\n            _initialAssertionID, // assertionID\\n            _initialVMhash,\\n            _initialInboxSize, // inboxSize (genesis)\\n            _initialAssertionID, // parentID (doesn't matter, since unchallengeable)\\n            block.number // deadline (unchallengeable)\\n        );\\n        emit AssertionCreated(lastCreatedAssertionID, msg.sender, _initialVMhash);\\n\\n        __RollupBase_init();\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    /// @inheritdoc IRollup\\n    function currentRequiredStake() public view override returns (uint256) {\\n        return baseStakeAmount;\\n    }\\n\\n    /// @inheritdoc IRollup\\n    function confirmedInboxSize() public view override returns (uint256) {\\n        return assertions[lastConfirmedAssertionID].inboxSize;\\n    }\\n\\n    /// @inheritdoc IRollup\\n    function getStaker(address addr) external view override returns (Staker memory) {\\n        return stakers[addr];\\n    }\\n\\n    /// @inheritdoc IRollup\\n    function getAssertion(uint256 assertionID) external view override returns (Assertion memory) {\\n        return assertions[assertionID];\\n    }\\n\\n    /// @inheritdoc IRollup\\n    function isStakedOnAssertion(uint256 assertionID, address stakerAddress) external view override returns (bool) {\\n        return assertionState[assertionID].stakers[stakerAddress];\\n    }\\n\\n    /// @inheritdoc IRollup\\n    function stake() external payable override {\\n        if (isStaked(msg.sender)) {\\n            stakers[msg.sender].amountStaked += msg.value;\\n        } else {\\n            if (msg.value < baseStakeAmount) {\\n                revert InsufficientStake();\\n            }\\n            stakers[msg.sender] = Staker(true, msg.value, 0, address(0));\\n            numStakers++;\\n            stakeOnAssertion(msg.sender, lastConfirmedAssertionID);\\n        }\\n    }\\n\\n    /// @inheritdoc IRollup\\n    function unstake(uint256 stakeAmount) external override {\\n        requireStaked(msg.sender);\\n        // Require that staker is staked on a confirmed assertion.\\n        Staker storage staker = stakers[msg.sender];\\n        if (staker.assertionID > lastConfirmedAssertionID) {\\n            revert StakedOnUnconfirmedAssertion();\\n        }\\n        if (stakeAmount > staker.amountStaked - currentRequiredStake()) {\\n            revert InsufficientStake();\\n        }\\n        staker.amountStaked -= stakeAmount;\\n        // Note: we don't need to modify assertion state because you can only unstake from a confirmed assertion.\\n        (bool success,) = msg.sender.call{value: stakeAmount}(\\\"\\\");\\n        if (!success) revert TransferFailed();\\n    }\\n\\n    /// @inheritdoc IRollup\\n    function removeStake(address stakerAddress) external override {\\n        requireStaked(stakerAddress);\\n        // Require that staker is staked on a confirmed assertion.\\n        Staker storage staker = stakers[stakerAddress];\\n        if (staker.assertionID > lastConfirmedAssertionID) {\\n            revert StakedOnUnconfirmedAssertion();\\n        }\\n\\n        uint256 stakerAmountStaked = staker.amountStaked;\\n\\n        // Note: we don't need to modify assertion state because you can only unstake from a confirmed assertion.\\n        deleteStaker(stakerAddress);\\n\\n        (bool success,) = stakerAddress.call{value: stakerAmountStaked}(\\\"\\\");\\n        if (!success) revert TransferFailed();\\n    }\\n\\n    /// @inheritdoc IRollup\\n    function advanceStake(uint256 assertionID) external override stakedOnly {\\n        Staker storage staker = stakers[msg.sender];\\n        if (assertionID <= staker.assertionID || assertionID > lastCreatedAssertionID) {\\n            revert AssertionOutOfRange();\\n        }\\n        // TODO: allow arbitrary descendant of current staked assertionID, not just child.\\n        if (staker.assertionID != assertions[assertionID].parent) {\\n            revert ParentAssertionUnstaked();\\n        }\\n        stakeOnAssertion(msg.sender, assertionID);\\n    }\\n\\n    /// @inheritdoc IRollup\\n    function withdraw() external override {\\n        uint256 withdrawableFund = withdrawableFunds[msg.sender];\\n        withdrawableFunds[msg.sender] = 0;\\n        (bool success,) = msg.sender.call{value: withdrawableFund}(\\\"\\\");\\n        if (!success) revert TransferFailed();\\n    }\\n\\n    /// @inheritdoc IRollup\\n    function createAssertion(bytes32 vmHash, uint256 inboxSize) external override stakedOnly {\\n        uint256 parentID = stakers[msg.sender].assertionID;\\n        Assertion storage parent = assertions[parentID];\\n        // Require that enough time has passed since the last assertion.\\n        if (block.number - parent.proposalTime < minimumAssertionPeriod) {\\n            revert MinimumAssertionPeriodNotPassed();\\n        }\\n        // Require that the assertion at least includes one transaction\\n        if (inboxSize <= parent.inboxSize) {\\n            revert EmptyAssertion();\\n        }\\n        // TODO: Enforce stricter bounds on assertion size.\\n        // Require that the assertion doesn't read past the end of the current inbox.\\n        if (inboxSize > daProvider.getInboxSize()) {\\n            revert InboxReadLimitExceeded();\\n        }\\n\\n        // Initialize assertion.\\n        lastCreatedAssertionID++;\\n        emit AssertionCreated(lastCreatedAssertionID, msg.sender, vmHash);\\n        createAssertionHelper(lastCreatedAssertionID, vmHash, inboxSize, parentID, newAssertionDeadline());\\n\\n        // Update stake.\\n        stakeOnAssertion(msg.sender, lastCreatedAssertionID);\\n    }\\n\\n    /// @inheritdoc IRollup\\n    function challengeAssertion(address[2] calldata players, uint256[2] calldata assertionIDs)\\n        external\\n        override\\n        returns (address)\\n    {\\n        uint256 defenderAssertionID = assertionIDs[0];\\n        uint256 parentID = assertions[defenderAssertionID].parent;\\n        {\\n            uint256 challengerAssertionID = assertionIDs[1];\\n            // Require IDs ordered and in-range.\\n            if (defenderAssertionID >= challengerAssertionID) {\\n                revert WrongOrder();\\n            }\\n            if (challengerAssertionID > lastCreatedAssertionID) {\\n                revert UnproposedAssertion();\\n            }\\n            if (lastConfirmedAssertionID >= defenderAssertionID) {\\n                revert AssertionAlreadyResolved();\\n            }\\n            // Require that players have attested to sibling assertions.\\n            if (parentID != assertions[challengerAssertionID].parent) {\\n                revert NotSiblings();\\n            }\\n        }\\n        // Require that neither player is currently engaged in a challenge.\\n        address defender = players[0];\\n        address challenger = players[1];\\n        requireUnchallengedStaker(defender);\\n        requireUnchallengedStaker(challenger);\\n\\n        // TODO: Calculate upper limit for allowed node proposal time.\\n\\n        // Initialize challenge.\\n        SymChallenge challenge = new SymChallenge();\\n        address challengeAddr = address(challenge);\\n        stakers[challenger].currentChallenge = challengeAddr;\\n        stakers[defender].currentChallenge = challengeAddr;\\n        emit AssertionChallenged(defenderAssertionID, challengeAddr);\\n        challenge.initialize(\\n            defender,\\n            challenger,\\n            verifier,\\n            daProvider,\\n            IChallengeResultReceiver(address(this)),\\n            assertions[parentID].stateHash,\\n            assertions[defenderAssertionID].stateHash,\\n            challengePeriod\\n        );\\n        return challengeAddr;\\n    }\\n\\n    /// @inheritdoc IRollup\\n    function confirmFirstUnresolvedAssertion() external override {\\n        if (lastResolvedAssertionID >= lastCreatedAssertionID) {\\n            revert NoUnresolvedAssertion();\\n        }\\n\\n        // (1) there is at least one staker, and\\n        if (numStakers <= 0) revert NoStaker();\\n\\n        uint256 lastUnresolvedID = lastResolvedAssertionID + 1;\\n        Assertion storage lastUnresolved = assertions[lastUnresolvedID];\\n        // (2) challenge period has passed\\n        if (block.number < lastUnresolved.deadline) {\\n            revert ChallengePeriodPending();\\n        }\\n        // (3) predecessor has been confirmed\\n        if (lastUnresolved.parent != lastConfirmedAssertionID) {\\n            revert InvalidParent();\\n        }\\n\\n        // Remove old zombies\\n        // removeOldZombies();\\n\\n        // (4) all stakers are staked on the block.\\n        if (lastUnresolved.numStakers != countStakedZombies(lastUnresolvedID) + numStakers) {\\n            revert NotAllStaked();\\n        }\\n\\n        // Confirm assertion.\\n        // delete assertions[lastConfirmedAssertionID];\\n        lastResolvedAssertionID++;\\n        lastConfirmedAssertionID = lastResolvedAssertionID;\\n        emit AssertionConfirmed(lastResolvedAssertionID);\\n    }\\n\\n    /// @inheritdoc IRollup\\n    function rejectFirstUnresolvedAssertion(address stakerAddress) external override {\\n        if (lastResolvedAssertionID >= lastCreatedAssertionID) {\\n            revert NoUnresolvedAssertion();\\n        }\\n\\n        uint256 firstUnresolvedAssertionID = lastResolvedAssertionID + 1;\\n        Assertion storage firstUnresolvedAssertion = assertions[firstUnresolvedAssertionID];\\n\\n        // First case - parent of first unresolved is last confirmed (`if` condition below). e.g.\\n        // [1] <- [3]           | valid chain ([1] is last confirmed, [3] is stakerAddress's unresolved assertion)\\n        //  ^---- [2]           | invalid chain ([2] is firstUnresolved)\\n        // Second case (trivial) - parent of first unresolved is not last confirmed. i.e.:\\n        //   parent is previous rejected, e.g.\\n        //   [1] <- [4]           | valid chain ([1] is last confirmed, [4] is stakerAddress's unresolved assertion)\\n        //   [2] <- [3]           | invalid chain ([3] is firstUnresolved)\\n        //   OR\\n        //   parent is previous confirmed, e.g.\\n        //   [1] <- [2] <- [4]    | valid chain ([2] is last confirmed, [4] is stakerAddress's unresolved assertion)\\n        //    ^---- [3]           | invalid chain ([3] is firstUnresolved)\\n        if (firstUnresolvedAssertion.parent == lastConfirmedAssertionID) {\\n            // 1a. challenge period has passed.\\n            if (block.number < firstUnresolvedAssertion.deadline) {\\n                revert ChallengePeriodPending();\\n            }\\n\\n            // 1b. at least one staker exists (on a sibling)\\n            // - stakerAddress is indeed a staker\\n            requireStaked(stakerAddress);\\n            // - staker's assertion can't be a ancestor of firstUnresolved (because staker's assertion is also unresolved)\\n            if (stakers[stakerAddress].assertionID < firstUnresolvedAssertionID) {\\n                revert AssertionAlreadyResolved();\\n            }\\n            AssertionState storage firstUnresolvedAssertionState = assertionState[firstUnresolvedAssertionID];\\n            // - staker's assertion can't be a descendant of firstUnresolved (because staker has never staked on firstUnresolved)\\n            if (firstUnresolvedAssertionState.stakers[stakerAddress]) {\\n                revert StakerStakedOnTarget();\\n            }\\n            // If a staker is staked on an assertion that is neither an ancestor nor a descendant of firstUnresolved, it must be a sibling, QED\\n\\n            // 1c. no staker is staked on this assertion\\n            // removeOldZombies();\\n            if (firstUnresolvedAssertion.numStakers != countStakedZombies(firstUnresolvedAssertionID)) {\\n                revert StakersPresent();\\n            }\\n        }\\n\\n        // Reject assertion.\\n        lastResolvedAssertionID++;\\n        emit AssertionRejected(lastResolvedAssertionID);\\n        delete assertions[lastResolvedAssertionID];\\n    }\\n\\n    /// @inheritdoc IChallengeResultReceiver\\n    function completeChallenge(address winner, address loser) external override {\\n        address challenge = getChallenge(winner, loser);\\n        if (msg.sender != challenge) {\\n            revert NotChallengeManager(msg.sender, challenge);\\n        }\\n\\n        uint256 remainingLoserStake = stakers[loser].amountStaked;\\n        uint256 winnerStake = stakers[winner].amountStaked;\\n        if (remainingLoserStake > winnerStake) {\\n            // If loser has a higher stake than the winner, refund the difference.\\n            // Loser gets deleted anyways, so maybe unnecessary to set amountStaked.\\n            stakers[loser].amountStaked = winnerStake;\\n            withdrawableFunds[loser] += remainingLoserStake - winnerStake;\\n            remainingLoserStake = winnerStake;\\n        }\\n        // Reward the winner with half the remaining stake\\n        uint256 amountWon = remainingLoserStake / 2;\\n        stakers[winner].amountStaked += amountWon; // why +stake instead of +withdrawable?\\n        stakers[winner].currentChallenge = address(0);\\n        // Credit the other half to the vault address\\n        withdrawableFunds[vault] += remainingLoserStake - amountWon;\\n        // Turning loser into zombie renders the loser's remaining stake inaccessible.\\n        uint256 assertionID = stakers[loser].assertionID;\\n        deleteStaker(loser);\\n        // Track as zombie so we can account for it during assertion resolution.\\n        zombies.push(Zombie(loser, assertionID));\\n    }\\n\\n    function isStaked(address addr) private view returns (bool) {\\n        return stakers[addr].isStaked;\\n    }\\n\\n    /**\\n     * @notice Updates staker and assertion metadata.\\n     * @param stakerAddress Address of existing staker.\\n     * @param assertionID ID of existing assertion to stake on.\\n     */\\n    function stakeOnAssertion(address stakerAddress, uint256 assertionID) private {\\n        stakers[stakerAddress].assertionID = assertionID;\\n        assertions[assertionID].numStakers++;\\n        assertionState[assertionID].stakers[stakerAddress] = true;\\n        emit StakerStaked(stakerAddress, assertionID);\\n    }\\n\\n    /**\\n     * @notice Creates a new assertion. See `Assertion` documentation.\\n     */\\n    function createAssertionHelper(\\n        uint256 assertionID,\\n        bytes32 stateHash,\\n        uint256 inboxSize,\\n        uint256 parentID,\\n        uint256 deadline\\n    ) private {\\n        Assertion storage parentAssertion = assertions[parentID];\\n        AssertionState storage parentAssertionState = assertionState[parentID];\\n        // Child assertions must have same inbox size\\n        uint256 parentChildInboxSize = parentAssertion.childInboxSize;\\n        if (parentChildInboxSize == 0) {\\n            parentAssertion.childInboxSize = inboxSize;\\n        } else if (inboxSize != parentChildInboxSize) {\\n            revert InvalidInboxSize();\\n        } else if (parentAssertionState.childStateHashes[stateHash]) {\\n            revert DuplicateAssertion();\\n        }\\n        parentAssertionState.childStateHashes[stateHash] = true;\\n        assertions[assertionID] = Assertion(\\n            stateHash,\\n            inboxSize,\\n            parentID,\\n            deadline,\\n            block.number, // proposal time\\n            0, // numStakers\\n            0 // childInboxSize\\n        );\\n    }\\n\\n    /**\\n     * @notice Deletes the staker from global state. Does not touch assertion staker state.\\n     * @param stakerAddress Address of the staker to delete\\n     */\\n    function deleteStaker(address stakerAddress) private {\\n        numStakers--;\\n        delete stakers[stakerAddress];\\n    }\\n\\n    /**\\n     * @notice Checks to see whether the two stakers are in the same challenge\\n     * @param staker1Address Address of the first staker\\n     * @param staker2Address Address of the second staker\\n     * @return Address of the challenge that the two stakers are in\\n     */\\n    function getChallenge(address staker1Address, address staker2Address) private view returns (address) {\\n        Staker storage staker1 = stakers[staker1Address];\\n        Staker storage staker2 = stakers[staker2Address];\\n        address challenge = staker1.currentChallenge;\\n        if (challenge == address(0)) {\\n            revert NotInChallenge();\\n        }\\n        if (challenge != staker2.currentChallenge) {\\n            revert InDifferentChallenge(challenge, staker2.currentChallenge);\\n        }\\n        return challenge;\\n    }\\n\\n    function newAssertionDeadline() private view returns (uint256) {\\n        // TODO: account for prev assertion, gas\\n        return block.number + confirmationPeriod;\\n    }\\n\\n    // *****************\\n    // zombie processing\\n    // *****************\\n\\n    /**\\n     * @notice Removes any zombies whose latest stake is earlier than the first unresolved assertion.\\n     * @dev Uses pop() instead of delete to prevent gaps, although order is not preserved\\n     */\\n    // function removeOldZombies() private {\\n    // }\\n\\n    /**\\n     * @notice Counts the number of zombies staked on an assertion.\\n     * @dev O(n), where n is # of zombies (but is expected to be small).\\n     * This function could be uncallable if there are too many zombies. However,\\n     * removeOldZombies() can be used to remove any zombies that exist so that this\\n     * will then be callable.\\n     * @param assertionID The assertion on which to count staked zombies\\n     * @return The number of zombies staked on the assertion\\n     */\\n    function countStakedZombies(uint256 assertionID) private view returns (uint256) {\\n        uint256 numStakedZombies = 0;\\n        for (uint256 i = 0; i < zombies.length; i++) {\\n            if (assertionState[assertionID].stakers[zombies[i].stakerAddress]) {\\n                numStakedZombies++;\\n            }\\n        }\\n        return numStakedZombies;\\n    }\\n\\n    // ************\\n    // requirements\\n    // ************\\n\\n    function requireStaked(address stakerAddress) private view {\\n        if (!isStaked(stakerAddress)) {\\n            revert NotStaked();\\n        }\\n    }\\n\\n    function requireUnchallengedStaker(address stakerAddress) private view {\\n        requireStaked(stakerAddress);\\n        if (stakers[stakerAddress].currentChallenge != address(0)) {\\n            revert ChallengedStaker();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x840a5f87b83ccd48c2dd5b5421d7f3b3c72aeef3321d7300b103a2530e3249a2\",\"license\":\"Apache-2.0\"},\"src/challenge/ChallengeBase.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Modifications Copyright 2022, Specular contributors\\n *\\n * This file was changed in accordance to Apache License, Version 2.0.\\n *\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IChallenge.sol\\\";\\nimport \\\"./ChallengeLib.sol\\\";\\n\\nabstract contract ChallengeBase is IChallenge {\\n    enum Turn {\\n        NoChallenge,\\n        Challenger,\\n        Defender\\n    }\\n\\n    Turn public turn;\\n\\n    IVerifier internal verifier;\\n    IDAProvider internal daProvider;\\n    IChallengeResultReceiver internal resultReceiver;\\n\\n    // Challenge state\\n    address public defender;\\n    address public challenger;\\n    uint256 public lastMoveBlock;\\n    uint256 public defenderTimeLeft;\\n    uint256 public challengerTimeLeft;\\n\\n    /**\\n     * @notice Pre-condition: `msg.sender` is correct and still has time remaining.\\n     * Post-condition: `turn` changes and `lastMoveBlock` set to current `block.number`.\\n     */\\n    modifier onlyOnTurn() {\\n        if (msg.sender != currentResponder()) {\\n            revert NotYourTurn();\\n        }\\n        if (block.number - lastMoveBlock > currentResponderTimeLeft()) {\\n            revert DeadlineExpired();\\n        }\\n\\n        _;\\n\\n        if (turn == Turn.Challenger) {\\n            challengerTimeLeft = challengerTimeLeft - (block.number - lastMoveBlock);\\n            turn = Turn.Defender;\\n        } else if (turn == Turn.Defender) {\\n            defenderTimeLeft = defenderTimeLeft - (block.number - lastMoveBlock);\\n            turn = Turn.Challenger;\\n        }\\n        lastMoveBlock = block.number;\\n    }\\n\\n    function timeout() external override {\\n        if (block.number - lastMoveBlock <= currentResponderTimeLeft()) {\\n            revert DeadlineNotPassed();\\n        }\\n        if (turn == Turn.Defender) {\\n            _challengerWin(CompletionReason.TIMEOUT);\\n        } else {\\n            _asserterWin(CompletionReason.TIMEOUT);\\n        }\\n    }\\n\\n    function currentResponder() public view override returns (address) {\\n        if (turn == Turn.Defender) {\\n            return defender;\\n        } else if (turn == Turn.Challenger) {\\n            return challenger;\\n        } else {\\n            revert NotInitialized();\\n        }\\n    }\\n\\n    function currentResponderTimeLeft() public view override returns (uint256) {\\n        if (turn == Turn.Defender) {\\n            return defenderTimeLeft;\\n        } else if (turn == Turn.Challenger) {\\n            return challengerTimeLeft;\\n        } else {\\n            revert NotInitialized();\\n        }\\n    }\\n\\n    function _currentWin(CompletionReason reason) internal {\\n        if (turn == Turn.Defender) {\\n            _asserterWin(reason);\\n        } else {\\n            _challengerWin(reason);\\n        }\\n    }\\n\\n    function _asserterWin(CompletionReason reason) internal {\\n        emit Completed(defender, challenger, reason);\\n        resultReceiver.completeChallenge(defender, challenger); // safeSelfDestruct(msg.sender);\\n    }\\n\\n    function _challengerWin(CompletionReason reason) internal {\\n        emit Completed(challenger, defender, reason);\\n        resultReceiver.completeChallenge(challenger, defender); // safeSelfDestruct(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x1d63ba720d431faab3b2cc34d0a876beb5f5771238c0c8aec2e3060e9a0b7d3f\",\"license\":\"Apache-2.0\"},\"src/challenge/ChallengeLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Modifications Copyright 2022, Specular contributors\\n *\\n * This file was changed in accordance to Apache License, Version 2.0.\\n *\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ChallengeLib {\\n    /**\\n     * @notice Computes the initial bisection hash.\\n     * @param startStateHash Hash of agreed-upon start state.\\n     * @param endStateHash Disagreed-upon end state.\\n     * @param numSteps Number of steps from the end of `startState` to the end of `endState`.\\n     */\\n    function initialBisectionHash(bytes32 startStateHash, bytes32 endStateHash, uint256 numSteps)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes32[] memory bisection = new bytes32[](2);\\n        bisection[0] = startStateHash;\\n        bisection[1] = endStateHash;\\n        return ChallengeLib.computeBisectionHash(bisection, 0, numSteps);\\n    }\\n\\n    /**\\n     * @notice Computes H(bisection || segmentStart || segmentLength)\\n     * @param bisection Array of stateHashes. First element is the last agreed upon state hash.\\n     * @param challengedSegmentStart The number of steps preceding `bisection[1]`, relative to the assertion being challenged.\\n     * @param challengedSegmentLength Length of bisected segment (in steps), from the start of bisection[1] to the end of bisection[-1].\\n     */\\n    function computeBisectionHash(\\n        bytes32[] memory bisection,\\n        uint256 challengedSegmentStart,\\n        uint256 challengedSegmentLength\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(bisection, challengedSegmentStart, challengedSegmentLength));\\n    }\\n\\n    /**\\n     * @notice Returns length of first segment in a bisection.\\n     */\\n    function firstSegmentLength(uint256 length, uint256 bisectionDegree) internal pure returns (uint256) {\\n        return length / bisectionDegree + length % bisectionDegree;\\n    }\\n\\n    /**\\n     * @notice Returns length of a segment (after first) in a bisection.\\n     */\\n    function otherSegmentLength(uint256 length, uint256 bisectionDegree) internal pure returns (uint256) {\\n        return length / bisectionDegree;\\n    }\\n}\\n\",\"keccak256\":\"0xdc06b974898c0f96223eecdb6d2c889b03b3f2ccc8c0a6b6da7a7fd156d929cd\",\"license\":\"Apache-2.0\"},\"src/challenge/IChallenge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Modifications Copyright 2022, Specular contributors\\n *\\n * This file was changed in accordance to Apache License, Version 2.0.\\n *\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IDAProvider.sol\\\";\\nimport \\\"./verifier/IVerifier.sol\\\";\\n\\ninterface IChallengeResultReceiver {\\n    /**\\n     * @notice Completes ongoing challenge. Callback, called by a challenge contract.\\n     * @param winner Address of winning staker.\\n     * @param loser Address of losing staker.\\n     */\\n    function completeChallenge(address winner, address loser) external;\\n}\\n\\ninterface IChallenge {\\n    enum CompletionReason {\\n        OSP_VERIFIED, // OSP verified by winner.\\n        TIMEOUT // Loser timed out before completing their round.\\n    }\\n\\n    event Completed(address winner, address loser, CompletionReason reason);\\n\\n    event Bisected(bytes32 challengeState, uint256 challengedSegmentStart, uint256 challengedSegmentLength);\\n\\n    // Participant called function while it's not their turn.\\n    error NotYourTurn();\\n    // Participant did not respond prior before deadline.\\n    error DeadlineExpired();\\n    // Caller called function prematurely, before deadline passed.\\n    error DeadlineNotPassed();\\n    // Caller called function prematurely, before challenge initialized.\\n    error NotInitialized();\\n    // Caller called initialize function more than once.\\n    error AlreadyInitialized();\\n\\n    /**\\n     * @notice Triggers completion of challenge protocol if a responder timed out.\\n     */\\n    function timeout() external;\\n\\n    function currentResponder() external view returns (address);\\n\\n    function currentResponderTimeLeft() external view returns (uint256);\\n}\\n\\n/**\\n * Symmetric challenge protocol.\\n * @notice Protocol execution:\\n * `initialize` (challenger, via Rollup) ->\\n * `initializeChallengeLength` (defender) ->\\n * `bisectExecution` (challenger, defender -- alternating) ->\\n * `verifyOneStepProof` ->\\n * `IResultReceiver.completeChallenge`\\n */\\ninterface ISymChallenge is IChallenge {\\n    /**\\n     * @notice Initializes the length of the challenge. Must be called by defender before bisection rounds begin.\\n     * @param _numSteps Number of steps executed from the start of the assertion to its end.\\n     * If this parameter is incorrect, the defender will be slashed (assuming successful execution of the protocol by the challenger).\\n     */\\n    function initializeChallengeLength(uint256 _numSteps) external;\\n\\n    /**\\n     * @notice Bisects a segment. The challenged segment is defined by: {`challengedSegmentStart`, `challengedSegmentLength`, `bisection[0]`, `oldEndHash`}\\n     * @param bisection Bisection of challenged segment. Each element is a state hash (see `ChallengeLib.stateHash`).\\n     * The first element is the last agreed upon state hash. Must be of length MAX_BISECTION_LENGTH for all rounds except the last.\\n     * In the last round, the bisection segments must be single steps.\\n     * @param challengedSegmentIndex Index into `prevBisection`. Must be greater than 0 (since the first is agreed upon).\\n     * @param prevBisection Bisection in the preceding round.\\n     * @param prevChallengedSegmentStart Offset of the segment challenged in the preceding round (in steps).\\n     * Note: this is relative to the assertion being challenged (i.e. always between 0 and the initial `numSteps`).\\n     * @param prevChallengedSegmentLength Length of the segment challenged in the preceding round (in steps).\\n     */\\n    function bisectExecution(\\n        bytes32[] calldata bisection,\\n        uint256 challengedSegmentIndex,\\n        bytes32[] calldata prevBisection,\\n        uint256 prevChallengedSegmentStart,\\n        uint256 prevChallengedSegmentLength\\n    ) external;\\n\\n    /**\\n     * @notice Verifies one step proof and completes challenge protocol.\\n     * @param oneStepProof TODO.\\n     * @param challengedStepIndex Index into `prevBisection`. Must be greater than 0 (since the first is agreed upon).\\n     * @param prevBisection Bisection in the preceding round. Each segment must now be of length 1 (i.e. a single step).\\n     * @param prevChallengedSegmentStart Offset of the segment challenged in the preceding round (in steps).\\n     * Note: this is relative to the assertion being challenged (i.e. always between 0 and the initial `numSteps`).\\n     * @param prevChallengedSegmentLength Length of the segment challenged in the preceding round (in steps).\\n     */\\n    function verifyOneStepProof(\\n        bytes calldata oneStepProof,\\n        bytes calldata txInclusionProof,\\n        VerificationContextLib.RawContext calldata ctx,\\n        uint256 challengedStepIndex,\\n        bytes32[] calldata prevBisection,\\n        uint256 prevChallengedSegmentStart,\\n        uint256 prevChallengedSegmentLength\\n    ) external;\\n}\\n\\n// Assymetric challenge protocol.\\ninterface IAsymChallenge is IChallenge {\\n// TODO.\\n}\\n\",\"keccak256\":\"0xc53cda32f1c4d7bc489ed29e59d1bbfa69fbd355c12f12bd597e2fd8ddc8ccf2\",\"license\":\"Apache-2.0\"},\"src/challenge/SymChallenge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Modifications Copyright 2022, Specular contributors\\n *\\n * This file was changed in accordance to Apache License, Version 2.0.\\n *\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IChallenge.sol\\\";\\nimport \\\"./ChallengeBase.sol\\\";\\nimport \\\"./ChallengeLib.sol\\\";\\nimport \\\"./verifier/IVerifier.sol\\\";\\nimport \\\"../IDAProvider.sol\\\";\\nimport \\\"../libraries/DeserializationLib.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\ncontract SymChallenge is ChallengeBase, ISymChallenge {\\n    // Previous state consistency could not be verified against `bisectionHash`.\\n    error PreviousStateInconsistent();\\n    // Tx context consistency could not be verified against ground truth.\\n    error TxContextInconsistent();\\n\\n    uint256 private constant MAX_BISECTION_DEGREE = 2;\\n\\n    // See `ChallengeLib.computeBisectionHash` for the format of this commitment.\\n    bytes32 public bisectionHash;\\n    // Initial state used to initialize bisectionHash (write-once).\\n    bytes32 private startStateHash;\\n    bytes32 private endStateHash;\\n\\n    /**\\n     * @notice Ensures challenge has been initialized.\\n     */\\n    modifier postInitialization() {\\n        if (bisectionHash != 0) {\\n            revert NotInitialized();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes contract.\\n     * @param _defender Defending party.\\n     * @param _challenger Challenging party. Challenger starts.\\n     * @param _verifier Address of the verifier contract.\\n     * @param _daProvider DA provider.\\n     * @param _resultReceiver Address of contract that will receive the outcome (via callback `completeChallenge`).\\n     * @param _startStateHash Bisection root being challenged.\\n     * @param _endStateHash Bisection root being challenged.\\n     */\\n    function initialize(\\n        address _defender,\\n        address _challenger,\\n        IVerifier _verifier,\\n        IDAProvider _daProvider,\\n        IChallengeResultReceiver _resultReceiver,\\n        bytes32 _startStateHash,\\n        bytes32 _endStateHash,\\n        uint256 challengePeriod\\n    ) external {\\n        if (turn != Turn.NoChallenge) {\\n            revert AlreadyInitialized();\\n        }\\n        if (_defender == address(0) || _challenger == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        defender = _defender;\\n        challenger = _challenger;\\n        verifier = _verifier;\\n        daProvider = _daProvider;\\n        resultReceiver = _resultReceiver;\\n        startStateHash = _startStateHash;\\n        endStateHash = _endStateHash;\\n\\n        turn = Turn.Defender;\\n        lastMoveBlock = block.number;\\n        defenderTimeLeft = challengePeriod;\\n        challengerTimeLeft = challengePeriod;\\n    }\\n\\n    function initializeChallengeLength(uint256 _numSteps) external override onlyOnTurn {\\n        if (bisectionHash != 0) {\\n            revert AlreadyInitialized();\\n        }\\n        require(_numSteps > 0, \\\"INVALID_NUM_STEPS\\\");\\n        bisectionHash = ChallengeLib.initialBisectionHash(startStateHash, endStateHash, _numSteps);\\n        // TODO: consider emitting a different event?\\n        emit Bisected(bisectionHash, 0, _numSteps);\\n    }\\n\\n    function bisectExecution(\\n        bytes32[] calldata bisection,\\n        uint256 challengedSegmentIndex,\\n        bytes32[] calldata prevBisection,\\n        uint256 prevChallengedSegmentStart,\\n        uint256 prevChallengedSegmentLength\\n    ) external override onlyOnTurn postInitialization {\\n        // Verify provided prev bisection.\\n        bytes32 prevHash =\\n            ChallengeLib.computeBisectionHash(prevBisection, prevChallengedSegmentStart, prevChallengedSegmentLength);\\n        if (prevHash != bisectionHash) {\\n            revert PreviousStateInconsistent();\\n        }\\n        require(challengedSegmentIndex > 0 && challengedSegmentIndex < prevBisection.length, \\\"INVALID_INDEX\\\");\\n        // Require agreed upon start state hash and disagreed upon end state hash.\\n        require(bisection[0] == prevBisection[challengedSegmentIndex - 1], \\\"INVALID_START\\\");\\n        require(bisection[bisection.length - 1] != prevBisection[challengedSegmentIndex], \\\"INVALID_END\\\");\\n\\n        // Compute segment start/length.\\n        uint256 challengedSegmentStart = prevChallengedSegmentStart;\\n        uint256 challengedSegmentLength = prevChallengedSegmentLength;\\n        if (prevBisection.length > 2) {\\n            // prevBisection.length == 2 means first round\\n            uint256 firstSegmentLength =\\n                ChallengeLib.firstSegmentLength(prevChallengedSegmentLength, MAX_BISECTION_DEGREE);\\n            uint256 otherSegmentLength =\\n                ChallengeLib.otherSegmentLength(prevChallengedSegmentLength, MAX_BISECTION_DEGREE);\\n            challengedSegmentLength = challengedSegmentIndex == 1 ? firstSegmentLength : otherSegmentLength;\\n\\n            if (challengedSegmentIndex > 1) {\\n                challengedSegmentStart += firstSegmentLength + otherSegmentLength * (challengedSegmentIndex - 2);\\n            }\\n        }\\n        require(challengedSegmentLength > 1, \\\"TOO_SHORT\\\");\\n\\n        // Require that bisection has the correct length. This is only ever less than BISECTION_DEGREE at the last bisection.\\n        uint256 target = challengedSegmentLength < MAX_BISECTION_DEGREE ? challengedSegmentLength : MAX_BISECTION_DEGREE;\\n        require(bisection.length == target + 1, \\\"CUT_COUNT\\\");\\n\\n        // Compute new challenge state.\\n        bisectionHash = ChallengeLib.computeBisectionHash(bisection, challengedSegmentStart, challengedSegmentLength);\\n        emit Bisected(bisectionHash, challengedSegmentStart, challengedSegmentLength);\\n    }\\n\\n    function verifyOneStepProof(\\n        bytes calldata oneStepProof,\\n        bytes calldata txInclusionProof,\\n        VerificationContextLib.RawContext calldata ctx,\\n        uint256 challengedStepIndex,\\n        bytes32[] calldata prevBisection,\\n        uint256 prevChallengedSegmentStart,\\n        uint256 prevChallengedSegmentLength\\n    ) external override onlyOnTurn {\\n        // Verify provided prev bisection.\\n        bytes32 prevHash =\\n            ChallengeLib.computeBisectionHash(prevBisection, prevChallengedSegmentStart, prevChallengedSegmentLength);\\n        if (prevHash != bisectionHash) {\\n            revert PreviousStateInconsistent();\\n        }\\n        require(challengedStepIndex > 0 && challengedStepIndex < prevBisection.length, \\\"INVALID_INDEX\\\");\\n        // Require that this is the last round.\\n        require(prevChallengedSegmentLength / MAX_BISECTION_DEGREE <= 1, \\\"BISECTION_INCOMPLETE\\\");\\n        {\\n            // Verify tx inclusion.\\n            daProvider.verifyTxInclusion(ctx.encodedTx, txInclusionProof);\\n            // Verify tx context consistency.\\n            // TODO: leaky abstraction (assumes `txInclusionProof` structure).\\n            (, bytes32 txContextHash) = DeserializationLib.deserializeBytes32(txInclusionProof, 0);\\n            if (VerificationContextLib.txContextHash(ctx) != txContextHash) {\\n                revert TxContextInconsistent();\\n            }\\n        }\\n        // Verify OSP.\\n        bytes32 endHash = verifier.verifyOneStepProof(prevBisection[challengedStepIndex - 1], ctx, oneStepProof);\\n        // Require that the end state differs from the counterparty's.\\n        if (endHash != prevBisection[challengedStepIndex]) {\\n            _currentWin(CompletionReason.OSP_VERIFIED);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8721f1c3fa0b283df9095908943a94c98d5f5ff69621a4a0bb44fde54e796cb1\",\"license\":\"Apache-2.0\"},\"src/challenge/verifier/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2022, Specular contributors\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./VerificationContextLib.sol\\\";\\n\\ninterface IVerifier {\\n    /**\\n     * @notice Simulates and verifies execution of a single EVM step.\\n     * @param startStateHash The state hash before the step.\\n     * @param ctx Associated transaction and its context (already verified to be consistent).\\n     * @param encodedProof The one-step proof. TODO: describe format.\\n     */\\n    function verifyOneStepProof(\\n        bytes32 startStateHash,\\n        VerificationContextLib.RawContext calldata ctx,\\n        bytes calldata encodedProof\\n    ) external pure returns (bytes32 endStateHash);\\n}\\n\",\"keccak256\":\"0xe6c914fa70a26e2274704603fce2ca436ec730d8c2e5687626b9d5936bce6ea3\",\"license\":\"Apache-2.0\"},\"src/challenge/verifier/VerificationContextLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2022, Specular contributors\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary VerificationContextLib {\\n    struct RawContext {\\n        bytes encodedTx;\\n        // Transaction context.\\n        address l2BlockCoinbase;\\n        uint256 l2BlockNumber;\\n        uint256 l2BlockTimestamp;\\n    }\\n\\n    function txContextHash(RawContext calldata ctx) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(ctx.l2BlockCoinbase, ctx.l2BlockNumber, ctx.l2BlockTimestamp));\\n    }\\n}\\n\",\"keccak256\":\"0x3645703cb84aad08b68768d1ac8c05e7b228f358c2a29ee13066e0999048149d\",\"license\":\"Apache-2.0\"},\"src/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n * @custom:attribution https://github.com/GNSPS/solidity-bytes-utils\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for { let cc := add(_postBytes, 0x20) } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } { mstore(mc, mload(cc)) }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } { sstore(sc, mload(mc)) }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } { sstore(sc, mload(mc)) }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } { mstore(mc, mload(cc)) }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for { let cc := add(_postBytes, 0x20) }\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x92f4393540da169e74f48840c976586caccc36cff5ce0b0350e54313f590c41f\",\"license\":\"Unlicense\"},\"src/libraries/DeserializationLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2022, Specular contributors\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BytesLib.sol\\\";\\n\\nlibrary DeserializationLib {\\n    function deserializeAddress(bytes memory data, uint256 startOffset) internal pure returns (uint256, address) {\\n        return (startOffset + 20, BytesLib.toAddress(data, startOffset));\\n    }\\n\\n    function deserializeUint256(bytes memory data, uint256 startOffset) internal pure returns (uint256, uint256) {\\n        require(data.length >= startOffset && data.length - startOffset >= 32, \\\"too short\\\");\\n        return (startOffset + 32, BytesLib.toUint256(data, startOffset));\\n    }\\n\\n    function deserializeBytes32(bytes memory data, uint256 startOffset) internal pure returns (uint256, bytes32) {\\n        require(data.length >= startOffset && data.length - startOffset >= 32, \\\"too short\\\");\\n        return (startOffset + 32, BytesLib.toBytes32(data, startOffset));\\n    }\\n}\\n\",\"keccak256\":\"0x2f3dd8e98a3d8c86d628d345254ee19111d0c4c61ecc4843e78cb1f57be66791\",\"license\":\"Apache-2.0\"},\"src/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2022, Specular contributors\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\n/// @dev Thrown when unauthorized (!rollup) address calls an only-rollup function\\n/// @param sender Address of the caller\\n/// @param rollup The rollup address authorized to call this function\\nerror NotRollup(address sender, address rollup);\\n\\n/// @dev Thrown when unauthorized (!challenge) address calls an only-challenge function\\n/// @param sender Address of the caller\\n/// @param challenge The challenge address authorized to call this function\\nerror NotChallengeManager(address sender, address challenge);\\n\\n/// @dev Thrown when unauthorized (!sequencer) address calls an only-sequencer function\\n/// @param sender Address of the caller\\n/// @param sequencer The sequencer address authorized to call this function\\nerror NotSequencer(address sender, address sequencer);\\n\\n/// @dev Thrown when function is called with a zero address argument\\nerror ZeroAddress();\\n\",\"keccak256\":\"0x4cf4a6eb779e74f00fbfe7de9cd1f303a5913f01bd4a748591002833c92e59d9\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b506200002362000029565b620000eb565b600054610100900460ff1615620000965760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e9576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805160601c61422f6200012660003960008181610fb601528181610fff0152818161121b0152818161125b01526112ea015261422f6000f3fe60806040526004361061021a5760003560e01c80636c8b052a11610123578063b553ee84116100ab578063f3f480d91161006f578063f3f480d9146107dd578063fa7803e6146107f3578063fb1b333714610813578063fbfa77cf14610833578063fe2ba8481461085357600080fd5b8063b553ee841461070a578063b6da898f14610720578063c94b584714610740578063e58dda8914610767578063f2fde38b146107bd57600080fd5b80638da5cb5b116100f25780638da5cb5b1461056d5780638eb8198e1461058b5780639168ae72146105ab578063a23c44b114610625578063a56ba93b146106f457600080fd5b80636c8b052a1461050c5780637112955914610522578063715018a6146105385780638821b2ae1461054d57600080fd5b80632f30cabd116101a657806345e38b641161017557806345e38b641461042c5780634d26732d146104425780634f1ef28614610457578063524232f61461046a57806352d1902d146104f757600080fd5b80632f30cabd146103c25780633659cfe6146103ef5780633a4b66f11461040f5780633ccfd60b1461041757600080fd5b80632052465e116101ed5780632052465e146102f65780632906040e146103355780632b7ac3f31461034a5780632e17de78146103825780632f06d1b0146103a257600080fd5b80630429b8801461021f578063042dca9314610248578063107035a41461026a5780631d99e16714610280575b600080fd5b34801561022b57600080fd5b5061023560c95481565b6040519081526020015b60405180910390f35b34801561025457600080fd5b506102686102633660046124d9565b610873565b005b34801561027657600080fd5b5061023560d25481565b34801561028c57600080fd5b506102a061029b3660046126c9565b610a37565b60405161023f9190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b34801561030257600080fd5b506103166103113660046126c9565b610add565b604080516001600160a01b03909316835260208301919091520161023f565b34801561034157600080fd5b50610268610b15565b34801561035657600080fd5b5060cf5461036a906001600160a01b031681565b6040516001600160a01b03909116815260200161023f565b34801561038e57600080fd5b5061026861039d3660046126c9565b610c57565b3480156103ae57600080fd5b5061036a6103bd366004612665565b610d4f565b3480156103ce57600080fd5b506102356103dd3660046124d9565b60d76020526000908152604090205481565b3480156103fb57600080fd5b5061026861040a3660046124d9565b610fab565b610268611094565b34801561042357600080fd5b50610268611190565b34801561043857600080fd5b5061023560cb5481565b34801561044e57600080fd5b5060cc54610235565b6102686104653660046125a8565b611210565b34801561047657600080fd5b506104c26104853660046126c9565b60d3602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e00161023f565b34801561050357600080fd5b506102356112dd565b34801561051857600080fd5b5061023560d55481565b34801561052e57600080fd5b5061023560cc5481565b34801561054457600080fd5b50610268611390565b34801561055957600080fd5b506102686105683660046126c9565b6113a2565b34801561057957600080fd5b506097546001600160a01b031661036a565b34801561059757600080fd5b5060ce5461036a906001600160a01b031681565b3480156105b757600080fd5b506105fa6105c63660046124d9565b60d660205260009081526040902080546001820154600283015460039093015460ff9092169290916001600160a01b031684565b6040805194151585526020850193909352918301526001600160a01b0316606082015260800161023f565b34801561063157600080fd5b506106b66106403660046124d9565b60408051608080820183526000808352602080840182905283850182905260609384018290526001600160a01b03958616825260d681529084902084519283018552805460ff16151583526001810154918301919091526002810154938201939093526003909201549092169181019190915290565b60405161023f919081511515815260208083015190820152604080830151908201526060918201516001600160a01b03169181019190915260800190565b34801561070057600080fd5b5061023560d15481565b34801561071657600080fd5b5061023560d05481565b34801561072c57600080fd5b5061026861073b3660046126a8565b611452565b34801561074c57600080fd5b5060d154600090815260d36020526040902060010154610235565b34801561077357600080fd5b506107ad6107823660046126e1565b600091825260d4602090815260408084206001600160a01b0393909316845291905290205460ff1690565b604051901515815260200161023f565b3480156107c957600080fd5b506102686107d83660046124d9565b61161c565b3480156107e957600080fd5b5061023560ca5481565b3480156107ff57600080fd5b5061026861080e3660046124f3565b611692565b34801561081f57600080fd5b5061026861082e366004612525565b6118cc565b34801561083f57600080fd5b5060cd5461036a906001600160a01b031681565b34801561085f57600080fd5b5061026861086e3660046124d9565b611ae3565b60d25460d0541061089757604051636fb7511d60e11b815260040160405180910390fd5b600060d05460016108a89190612835565b600081815260d36020526040902060d1546002820154929350909114156109a75780600301544310156108ee57604051633b58b45160e11b815260040160405180910390fd5b6108f783611bad565b6001600160a01b038316600090815260d6602052604090206002015482111561093357604051632d10e3f360e21b815260040160405180910390fd5b600082815260d4602090815260408083206001600160a01b0387168452918290529091205460ff16156109795760405163c67bd77760e01b815260040160405180910390fd5b61098283611be5565b8260050154146109a5576040516341a051e360e01b815260040160405180910390fd5b505b60d080549060006109b7836128c7565b91905055507f5b24ab8ceb442373727ac5c559a027521cb52db451c74710ebed9faa5fe15a7c60d0546040516109ef91815260200190565b60405180910390a1505060d054600090815260d36020526040812081815560018101829055600281018290556003810182905560048101829055600581018290556006015550565b610a7a6040518060e00160405280600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b50600090815260d36020908152604091829020825160e081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a082015260069091015460c082015290565b60d88181548110610aed57600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b60d25460d05410610b3957604051636fb7511d60e11b815260040160405180910390fd5b600060d55411610b5c57604051631090380d60e01b815260040160405180910390fd5b600060d0546001610b6d9190612835565b600081815260d360205260409020600381015491925090431015610ba457604051633b58b45160e11b815260040160405180910390fd5b60d154816002015414610bca57604051630bea7bb360e31b815260040160405180910390fd5b60d554610bd683611be5565b610be09190612835565b816005015414610c025760405162d1c60960e51b815260040160405180910390fd5b60d08054906000610c12836128c7565b909155505060d05460d18190556040519081527f453430d123684340024ae0a229704bdab39c93dc48bb5a0b4bc83142d95d48ef906020015b60405180910390a15050565b610c6033611bad565b33600090815260d66020526040902060d15460028201541115610c9657604051633814754d60e21b815260040160405180910390fd5b60cc548160010154610ca8919061286d565b821115610cc8576040516378de4a6960e11b815260040160405180910390fd5b81816001016000828254610cdc919061286d565b9091555050604051600090339084908381818185875af1925050503d8060008114610d23576040519150601f19603f3d011682016040523d82523d6000602084013e610d28565b606091505b5050905080610d4a576040516312171d8360e31b815260040160405180910390fd5b505050565b8035600081815260d36020908152604082206002015491929190840135808310610d8c576040516304b4359960e11b815260040160405180910390fd5b60d254811115610daf576040516381976cb960e01b815260040160405180910390fd5b8260d15410610dd157604051632d10e3f360e21b815260040160405180910390fd5b600081815260d360205260409020600201548214610e025760405163a3fbefb960e01b815260040160405180910390fd5b506000610e1260208701876124d9565b90506000610e2660408801602089016124d9565b9050610e3182611c80565b610e3a81611c80565b6000604051610e489061249f565b604051809103906000f080158015610e64573d6000803e3d6000fd5b506001600160a01b03838116600090815260d660209081526040808320600390810180548787166001600160a01b03199182168117909255958a16855293829020018054909416831790935582518981529081019190915291925082917fd0ebe74b4f7d89a9b0fdc9d95f887a7b925c6c7300b5c4b2c3304d97925840fa910160405180910390a160cf5460ce54600087815260d36020526040808220548a8352918190205460ca5491516301065adb60e71b81526001600160a01b038a8116600483015289811660248301529586166044820152938516606485015230608485015260a484019290925260c483019190915260e48201529083169063832d6d809061010401600060405180830381600087803b158015610f8457600080fd5b505af1158015610f98573d6000803e3d6000fd5b5092985050505050505050505b92915050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610ffd5760405162461bcd60e51b8152600401610ff490612752565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166110466000805160206141b3833981519152546001600160a01b031690565b6001600160a01b03161461106c5760405162461bcd60e51b8152600401610ff49061279e565b61107581611cc5565b6040805160008082526020820190925261109191839190611ccd565b50565b33600090815260d6602052604090205460ff16156110d95733600090815260d66020526040812060010180543492906110ce908490612835565b9091555061118e9050565b60cc543410156110fc576040516378de4a6960e11b815260040160405180910390fd5b60408051608081018252600180825234602080840191825260008486018181526060860182815233835260d69093529581209451855460ff19169015151785559151928401929092559251600283015551600390910180546001600160a01b0319166001600160a01b0390921691909117905560d580549161117d836128c7565b919050555061118e3360d154611e47565b565b33600081815260d76020526040808220805490839055905190929083908381818185875af1925050503d80600081146111e5576040519150601f19603f3d011682016040523d82523d6000602084013e6111ea565b606091505b505090508061120c576040516312171d8360e31b815260040160405180910390fd5b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156112595760405162461bcd60e51b8152600401610ff490612752565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112a26000805160206141b3833981519152546001600160a01b031690565b6001600160a01b0316146112c85760405162461bcd60e51b8152600401610ff49061279e565b6112d182611cc5565b61120c82826001611ccd565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461137d5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610ff4565b506000805160206141b383398151915290565b611398611ee9565b61118e6000611f43565b33600090815260d6602052604090205460ff166113d1576040516273e5c360e31b815260040160405180910390fd5b33600090815260d6602052604090206002810154821115806113f4575060d25482115b1561141257604051632caca6cf60e01b815260040160405180910390fd5b600082815260d36020526040902060029081015490820154146114485760405163044bc3e360e41b815260040160405180910390fd5b61120c3383611e47565b33600090815260d6602052604090205460ff16611481576040516273e5c360e31b815260040160405180910390fd5b33600090815260d6602090815260408083206002015480845260d390925290912060cb5460048201546114b4904361286d565b10156114d357604051632646c5bd60e21b815260040160405180910390fd5b806001015483116114f75760405163f8748b7960e01b815260040160405180910390fd5b60ce60009054906101000a90046001600160a01b03166001600160a01b03166329869a7f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561154557600080fd5b505afa158015611559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157d9190612690565b83111561159d576040516359f175b760e01b815260040160405180910390fd5b60d280549060006115ad836128c7565b909155505060d2546040805191825233602083015281018590527ff41917cc5ddc34dc57b3ea71e866801af6a254bddeadaffd1177ad8e46cb0d6b9060600160405180910390a161160a60d254858585611605611f95565b611faa565b6116163360d254611e47565b50505050565b611624611ee9565b6001600160a01b0381166116895760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ff4565b61109181611f43565b600061169e83836120b9565b9050336001600160a01b038216146116da57604051631033979d60e11b81523360048201526001600160a01b0382166024820152604401610ff4565b6001600160a01b03808316600090815260d6602052604080822060019081015493871683529120015480821115611766576001600160a01b038416600090815260d660205260409020600101819055611733818361286d565b6001600160a01b038516600090815260d760205260408120805490919061175b908490612835565b925050819055508091505b600061177360028461284d565b6001600160a01b038716600090815260d660205260408120600101805492935083929091906117a3908490612835565b90915550506001600160a01b038616600090815260d66020526040902060030180546001600160a01b03191690556117db818461286d565b60cd546001600160a01b0316600090815260d7602052604081208054909190611805908490612835565b90915550506001600160a01b038516600090815260d6602052604090206002015461182f86612156565b604080518082019091526001600160a01b0396871681526020810191825260d8805460018101825560009190915290517f5320ad99a619a90804cd2efe3a5cf0ac1ac5c41ad9ff2c61cf699efdad771096600290920291820180546001600160a01b0319169190981617909655517f5320ad99a619a90804cd2efe3a5cf0ac1ac5c41ad9ff2c61cf699efdad771097909501949094555050505050565b600054610100900460ff16158080156118ec5750600054600160ff909116105b806119065750303b158015611906575060005460ff166001145b6119695760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ff4565b6000805460ff19166001179055801561198c576000805461ff0019166101001790555b6001600160a01b038b1615806119a957506001600160a01b038a16155b806119bb57506001600160a01b038916155b156119d95760405163d92e233d60e01b815260040160405180910390fd5b60cd80546001600160a01b03808e166001600160a01b03199283161790925560ce80548d841690831617905560cf8054928c169290911691909117905560c988905560ca87905560cb86905560cc85905560d084905560d184905560d2849055611a468483858243611faa565b60d2546040805191825233602083015281018390527ff41917cc5ddc34dc57b3ea71e866801af6a254bddeadaffd1177ad8e46cb0d6b9060600160405180910390a1611a906121ac565b8015611ad6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b611aec81611bad565b6001600160a01b038116600090815260d66020526040902060d15460028201541115611b2b57604051633814754d60e21b815260040160405180910390fd5b6001810154611b3983612156565b6000836001600160a01b03168260405160006040518083038185875af1925050503d8060008114611b86576040519150601f19603f3d011682016040523d82523d6000602084013e611b8b565b606091505b5050905080611616576040516312171d8360e31b815260040160405180910390fd5b6001600160a01b038116600090815260d6602052604090205460ff16611091576040516273e5c360e31b815260040160405180910390fd5b600080805b60d854811015611c7957600084815260d46020526040812060d8805491929184908110611c2757634e487b7160e01b600052603260045260246000fd5b600091825260208083206002909202909101546001600160a01b0316835282019290925260400190205460ff1615611c675781611c63816128c7565b9250505b80611c71816128c7565b915050611bea565b5092915050565b611c8981611bad565b6001600160a01b03818116600090815260d6602052604090206003015416156110915760405163e5e0e82b60e01b815260040160405180910390fd5b611091611ee9565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611d0057610d4a836121e3565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d3957600080fd5b505afa925050508015611d69575060408051601f3d908101601f19168201909252611d6691810190612690565b60015b611dcc5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610ff4565b6000805160206141b38339815191528114611e3b5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610ff4565b50610d4a83838361227f565b6001600160a01b038216600090815260d66020908152604080832060020184905583835260d39091528120600501805491611e81836128c7565b9091555050600081815260d4602090815260408083206001600160a01b03861680855290835292819020805460ff1916600117905580519283529082018390527f617d31491414a4ab2bd831e566a31837fa7fb6582921c91dffbbe83fbca789f39101610c4b565b6097546001600160a01b0316331461118e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ff4565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060c95443611fa59190612835565b905090565b600082815260d36020908152604080832060d4909252909120600682015480611fd9576006830186905561202b565b808614611ff957604051633ef41c6960e21b815260040160405180910390fd5b600087815260018301602052604090205460ff161561202b5760405163dad07bab60e01b815260040160405180910390fd5b506000868152600191820160209081526040808320805460ff191685179055805160e081018252988952888201978852888101968752606089019586524360808a0190815260a08a0184815260c08b018581529b855260d390935292209751885595519187019190915592516002860155505160038401555160048301555160058201559051600690910155565b6001600160a01b03808316600090815260d6602052604080822084841683529082206003820154929391929091168061210557604051637c2f023d60e01b815260040160405180910390fd5b60038201546001600160a01b0382811691161461214d57600382015460405162e82b8d60e51b81526001600160a01b0380841660048301529091166024820152604401610ff4565b95945050505050565b60d58054906000612166836128b0565b90915550506001600160a01b0316600090815260d660205260408120805460ff1916815560018101829055600281019190915560030180546001600160a01b0319169055565b600054610100900460ff166121d35760405162461bcd60e51b8152600401610ff4906127ea565b6121db6122a4565b61118e6122d3565b6001600160a01b0381163b6122505760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610ff4565b6000805160206141b383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612288836122fa565b6000825111806122955750805b15610d4a57611616838361233a565b600054610100900460ff166122cb5760405162461bcd60e51b8152600401610ff4906127ea565b61118e612425565b600054610100900460ff1661118e5760405162461bcd60e51b8152600401610ff4906127ea565b612303816121e3565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6123a25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610ff4565b600080846001600160a01b0316846040516123bd9190612703565b600060405180830381855af49150503d80600081146123f8576040519150601f19603f3d011682016040523d82523d6000602084013e6123fd565b606091505b509150915061214d82826040518060600160405280602781526020016141d360279139612455565b600054610100900460ff1661244c5760405162461bcd60e51b8152600401610ff4906127ea565b61118e33611f43565b6060831561246457508161246e565b61246e8383612475565b9392505050565b8151156124855781518083602001fd5b8060405162461bcd60e51b8152600401610ff4919061271f565b6118a48061290f83390190565b80356001600160a01b03811681146124c357600080fd5b919050565b8060408101831015610fa557600080fd5b6000602082840312156124ea578081fd5b61246e826124ac565b60008060408385031215612505578081fd5b61250e836124ac565b915061251c602084016124ac565b90509250929050565b6000806000806000806000806000806101408b8d031215612544578586fd5b61254d8b6124ac565b995061255b60208c016124ac565b985061256960408c016124ac565b999c989b5098996060810135995060808101359860a0820135985060c0820135975060e082013596506101008201359550610120909101359350915050565b600080604083850312156125ba578182fd5b6125c3836124ac565b9150602083013567ffffffffffffffff808211156125df578283fd5b818501915085601f8301126125f2578283fd5b813581811115612604576126046128f8565b604051601f8201601f19908116603f0116810190838211818310171561262c5761262c6128f8565b81604052828152886020848701011115612644578586fd5b82602086016020830137856020848301015280955050505050509250929050565b60008060808385031215612677578182fd5b61268184846124c8565b915061251c84604085016124c8565b6000602082840312156126a1578081fd5b5051919050565b600080604083850312156126ba578182fd5b50508035926020909101359150565b6000602082840312156126da578081fd5b5035919050565b600080604083850312156126f3578182fd5b8235915061251c602084016124ac565b60008251612715818460208701612884565b9190910192915050565b602081526000825180602084015261273e816040850160208701612884565b601f01601f19169190910160400192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008219821115612848576128486128e2565b500190565b60008261286857634e487b7160e01b81526012600452602481fd5b500490565b60008282101561287f5761287f6128e2565b500390565b60005b8381101561289f578181015183820152602001612887565b838111156116165750506000910152565b6000816128bf576128bf6128e2565b506000190190565b60006000198214156128db576128db6128e2565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe608060405234801561001057600080fd5b50611884806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063832d6d801161008c578063925f9a9611610066578063925f9a96146101ad5780639909e0d9146101b6578063cc8f6677146101c9578063e87e3589146101dc57600080fd5b8063832d6d80146101785780638a8cd2181461018b5780638b2999031461019357600080fd5b80635f41e3d6116100c85780635f41e3d61461013f578063638068db1461014857806370dea79a1461015d5780637f4c91c51461016557600080fd5b80632a51f6f7146100ef57806341e8510c1461010b578063534db0e214610114575b600080fd5b6100f860085481565b6040519081526020015b60405180910390f35b6100f860075481565b600454610127906001600160a01b031681565b6040516001600160a01b039091168152602001610102565b6100f860065481565b61015b6101563660046114c2565b6101e4565b005b61015b6105ec565b600354610127906001600160a01b031681565b61015b61018636600461139b565b610662565b61012761076c565b6000546101a09060ff1681565b6040516101029190611722565b6100f860055481565b61015b6101c4366004611597565b610801565b61015b6101d7366004611424565b6109e1565b6100f8610ea7565b6101ec61076c565b6001600160a01b0316336001600160a01b03161461021d57604051631cc191eb60e31b815260040160405180910390fd5b610225610ea7565b60055461023290436117cc565b111561025157604051631ab7da6b60e01b815260040160405180910390fd5b6000610293858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250869150610f119050565b905060085481146102b75760405163365d598160e21b815260040160405180910390fd5b6000861180156102c657508386105b6103075760405162461bcd60e51b815260206004820152600d60248201526c0929cac82989288be929c888ab609b1b60448201526064015b60405180910390fd5b6001610314600284611799565b11156103595760405162461bcd60e51b8152602060048201526014602482015273424953454354494f4e5f494e434f4d504c45544560601b60448201526064016102fe565b6001546001600160a01b031663f785968f610374898061173c565b8c8c6040518563ffffffff1660e01b815260040161039594939291906116fb565b60006040518083038186803b1580156103ad57600080fd5b505afa1580156103c1573d6000803e3d6000fd5b5050505060006104068a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250610f47915050565b9150508061041389610fc1565b146104315760405163c64c5f7d60e01b815260040160405180910390fd5b506000805461010090046001600160a01b031663401ebd6e878761045660018c6117cc565b81811061047357634e487b7160e01b600052603260045260246000fd5b905060200201358a8f8f6040518563ffffffff1660e01b815260040161049c949392919061164f565b60206040518083038186803b1580156104b457600080fd5b505afa1580156104c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec91906114aa565b905085858881811061050e57634e487b7160e01b600052603260045260246000fd5b905060200201358114610525576105256000611022565b506001905060005460ff16600281111561054f57634e487b7160e01b600052602160045260246000fd5b14156105845760055461056290436117cc565b60075461056f91906117cc565b6007556000805460ff191660021790556105dc565b600260005460ff1660028111156105ab57634e487b7160e01b600052602160045260246000fd5b14156105dc576005546105be90436117cc565b6006546105cb91906117cc565b6006556000805460ff191660011790555b5050436005555050505050505050565b6105f4610ea7565b60055461060190436117cc565b1161061f576040516302eb354360e41b815260040160405180910390fd5b600260005460ff16600281111561064657634e487b7160e01b600052602160045260246000fd5b1415610658576106566001611060565b565b6106566001611120565b6000805460ff16600281111561068857634e487b7160e01b600052602160045260246000fd5b146106a55760405162dc149f60e41b815260040160405180910390fd5b6001600160a01b03881615806106c257506001600160a01b038716155b156106e05760405163d92e233d60e01b815260040160405180910390fd5b600380546001600160a01b03998a166001600160a01b03199182161790915560048054988a16988216989098179097556000805460018054978b16978a169790971790965560028054958a1695909816949094178755600992909255600a55929094166101000260ff19166001600160a81b031990911617909117909155436005556006819055600755565b6000600260005460ff16600281111561079557634e487b7160e01b600052602160045260246000fd5b14156107ab57506003546001600160a01b031690565b600160005460ff1660028111156107d257634e487b7160e01b600052602160045260246000fd5b14156107e857506004546001600160a01b031690565b6040516321c4e35760e21b815260040160405180910390fd5b61080961076c565b6001600160a01b0316336001600160a01b03161461083a57604051631cc191eb60e31b815260040160405180910390fd5b610842610ea7565b60055461084f90436117cc565b111561086e57604051631ab7da6b60e01b815260040160405180910390fd5b6008541561088e5760405162dc149f60e41b815260040160405180910390fd5b600081116108d25760405162461bcd60e51b8152602060048201526011602482015270494e56414c49445f4e554d5f535445505360781b60448201526064016102fe565b6108e1600954600a54836111ae565b6008819055604080519182526000602083015281018290527f8c3cfc522d91af51bb14f6db452f8c212ba664a426c79e5ef78872e7a10720749060600160405180910390a1600160005460ff16600281111561094d57634e487b7160e01b600052602160045260246000fd5b14156109825760055461096090436117cc565b60075461096d91906117cc565b6007556000805460ff191660021790556109da565b600260005460ff1660028111156109a957634e487b7160e01b600052602160045260246000fd5b14156109da576005546109bc90436117cc565b6006546109c991906117cc565b6006556000805460ff191660011790555b5043600555565b6109e961076c565b6001600160a01b0316336001600160a01b031614610a1a57604051631cc191eb60e31b815260040160405180910390fd5b610a22610ea7565b600554610a2f90436117cc565b1115610a4e57604051631ab7da6b60e01b815260040160405180910390fd5b60085415610a6f576040516321c4e35760e21b815260040160405180910390fd5b6000610ab1858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250869150610f119050565b90506008548114610ad55760405163365d598160e21b815260040160405180910390fd5b600086118015610ae457508386105b610b205760405162461bcd60e51b815260206004820152600d60248201526c0929cac82989288be929c888ab609b1b60448201526064016102fe565b8484610b2d6001896117cc565b818110610b4a57634e487b7160e01b600052603260045260246000fd5b9050602002013588886000818110610b7257634e487b7160e01b600052603260045260246000fd5b9050602002013514610bb65760405162461bcd60e51b815260206004820152600d60248201526c1253959053125117d4d5105495609a1b60448201526064016102fe565b848487818110610bd657634e487b7160e01b600052603260045260246000fd5b602002919091013590508888610bed6001826117cc565b818110610c0a57634e487b7160e01b600052603260045260246000fd5b905060200201351415610c4d5760405162461bcd60e51b815260206004820152600b60248201526a1253959053125117d1539160aa1b60448201526064016102fe565b82826002861115610cc0576000610c65856002611244565b90506000610c7486600261126b565b905089600114610c845780610c86565b815b925060018a1115610cbd57610c9c60028b6117cc565b610ca690826117ad565b610cb09083611781565b610cba9085611781565b93505b50505b60018111610cfc5760405162461bcd60e51b81526020600482015260096024820152681513d3d7d4d213d49560ba1b60448201526064016102fe565b600060028210610d0d576002610d0f565b815b9050610d1c816001611781565b8a14610d565760405162461bcd60e51b815260206004820152600960248201526810d55517d0d3d5539560ba1b60448201526064016102fe565b610d968b8b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250869150610f119050565b6008819055604080519182526020820185905281018390527f8c3cfc522d91af51bb14f6db452f8c212ba664a426c79e5ef78872e7a10720749060600160405180910390a15060019250610de8915050565b60005460ff166002811115610e0d57634e487b7160e01b600052602160045260246000fd5b1415610e4257600554610e2090436117cc565b600754610e2d91906117cc565b6007556000805460ff19166002179055610e9a565b600260005460ff166002811115610e6957634e487b7160e01b600052602160045260246000fd5b1415610e9a57600554610e7c90436117cc565b600654610e8991906117cc565b6006556000805460ff191660011790555b5050436005555050505050565b6000600260005460ff166002811115610ed057634e487b7160e01b600052602160045260246000fd5b1415610edd575060065490565b600160005460ff166002811115610f0457634e487b7160e01b600052602160045260246000fd5b14156107e8575060075490565b6000838383604051602001610f28939291906115d8565b6040516020818303038152906040528051906020012090509392505050565b60008082845110158015610f6857506020838551610f6591906117cc565b10155b610fa05760405162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b60448201526064016102fe565b610fab836020611781565b610fb58585611277565b915091505b9250929050565b6000610fd3604083016020840161137f565b604080516bffffffffffffffffffffffff19606093841b166020820152908401356034820152908301356054820152607401604051602081830303815290604052805190602001209050919050565b600260005460ff16600281111561104957634e487b7160e01b600052602160045260246000fd5b141561105b5761105881611120565b50565b611058815b6004546003546040517fa599fa89698188ea23144af5bd981dc904e4221ee98ed73883b509409808338d926110a5926001600160a01b03918216929116908590611619565b60405180910390a160025460048054600354604051637d3c01f360e11b81526001600160a01b0392831693810193909352811660248301529091169063fa7803e6906044015b600060405180830381600087803b15801561110557600080fd5b505af1158015611119573d6000803e3d6000fd5b5050505050565b6003546004546040517fa599fa89698188ea23144af5bd981dc904e4221ee98ed73883b509409808338d92611165926001600160a01b03918216929116908590611619565b60405180910390a160025460035460048054604051637d3c01f360e11b81526001600160a01b03938416928101929092528216602482015291169063fa7803e6906044016110eb565b6040805160028082526060820183526000928392919060208301908036833701905050905084816000815181106111f557634e487b7160e01b600052603260045260246000fd5b602002602001018181525050838160018151811061122357634e487b7160e01b600052603260045260246000fd5b60200260200101818152505061123b81600085610f11565b95945050505050565b600061125082846117e3565b61125a8385611799565b6112649190611781565b9392505050565b60006112648284611799565b6000611284826020611781565b835110156112cc5760405162461bcd60e51b8152602060048201526015602482015274746f427974657333325f6f75744f66426f756e647360581b60448201526064016102fe565b50016020015190565b80356112e081611839565b919050565b60008083601f8401126112f6578182fd5b50813567ffffffffffffffff81111561130d578182fd5b6020830191508360208260051b8501011115610fba57600080fd5b60008083601f840112611339578182fd5b50813567ffffffffffffffff811115611350578182fd5b602083019150836020828501011115610fba57600080fd5b600060808284031215611379578081fd5b50919050565b600060208284031215611390578081fd5b813561126481611839565b600080600080600080600080610100898b0312156113b7578384fd5b88356113c281611839565b975060208901356113d281611839565b965060408901356113e281611839565b955060608901356113f281611839565b9450608089013561140281611839565b979a969950949793969560a0850135955060c08501359460e001359350915050565b600080600080600080600060a0888a03121561143e578283fd5b873567ffffffffffffffff80821115611455578485fd5b6114618b838c016112e5565b909950975060208a0135965060408a0135915080821115611480578485fd5b5061148d8a828b016112e5565b989b979a5095989597966060870135966080013595509350505050565b6000602082840312156114bb578081fd5b5051919050565b60008060008060008060008060008060e08b8d0312156114e0578182fd5b8a3567ffffffffffffffff808211156114f7578384fd5b6115038e838f01611328565b909c509a5060208d013591508082111561151b578384fd5b6115278e838f01611328565b909a50985060408d013591508082111561153f578384fd5b61154b8e838f01611368565b975060608d0135965060808d0135915080821115611567578384fd5b506115748d828e016112e5565b9b9e9a9d50989b979a969995989760a08101359660c09091013595509350505050565b6000602082840312156115a8578081fd5b5035919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b835160009082906020808801845b83811015611602578151855293820193908201906001016115e6565b505095825250938401929092525050604001919050565b6001600160a01b03848116825283166020820152606081016002831061164157611641611823565b826040830152949350505050565b8481526060602082015260008435601e1986360301811261166e578182fd5b8501803567ffffffffffffffff811115611686578283fd5b803603871315611694578283fd5b608060608501526116ac60e0850182602085016115af565b9150506116bb602087016112d5565b6001600160a01b0316608084015260408681013560a0850152606087013560c0850152838203908401526116f08185876115af565b979650505050505050565b60408152600061170f6040830186886115af565b82810360208401526116f08185876115af565b602081016003831061173657611736611823565b91905290565b6000808335601e19843603018112611752578283fd5b83018035915067ffffffffffffffff82111561176c578283fd5b602001915036819003821315610fba57600080fd5b60008219821115611794576117946117f7565b500190565b6000826117a8576117a861180d565b500490565b60008160001904831182151516156117c7576117c76117f7565b500290565b6000828210156117de576117de6117f7565b500390565b6000826117f2576117f261180d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038116811461105857600080fdfea2646970667358221220c72281b1ad243c1bf76a3a63aac21a7e55255d4f4439c39635afba046b6418a864736f6c63430008040033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207553e19fbb36b02ca24e935dcd9b482cd1d3dc650ae050379976901870f34f5964736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061021a5760003560e01c80636c8b052a11610123578063b553ee84116100ab578063f3f480d91161006f578063f3f480d9146107dd578063fa7803e6146107f3578063fb1b333714610813578063fbfa77cf14610833578063fe2ba8481461085357600080fd5b8063b553ee841461070a578063b6da898f14610720578063c94b584714610740578063e58dda8914610767578063f2fde38b146107bd57600080fd5b80638da5cb5b116100f25780638da5cb5b1461056d5780638eb8198e1461058b5780639168ae72146105ab578063a23c44b114610625578063a56ba93b146106f457600080fd5b80636c8b052a1461050c5780637112955914610522578063715018a6146105385780638821b2ae1461054d57600080fd5b80632f30cabd116101a657806345e38b641161017557806345e38b641461042c5780634d26732d146104425780634f1ef28614610457578063524232f61461046a57806352d1902d146104f757600080fd5b80632f30cabd146103c25780633659cfe6146103ef5780633a4b66f11461040f5780633ccfd60b1461041757600080fd5b80632052465e116101ed5780632052465e146102f65780632906040e146103355780632b7ac3f31461034a5780632e17de78146103825780632f06d1b0146103a257600080fd5b80630429b8801461021f578063042dca9314610248578063107035a41461026a5780631d99e16714610280575b600080fd5b34801561022b57600080fd5b5061023560c95481565b6040519081526020015b60405180910390f35b34801561025457600080fd5b506102686102633660046124d9565b610873565b005b34801561027657600080fd5b5061023560d25481565b34801561028c57600080fd5b506102a061029b3660046126c9565b610a37565b60405161023f9190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b34801561030257600080fd5b506103166103113660046126c9565b610add565b604080516001600160a01b03909316835260208301919091520161023f565b34801561034157600080fd5b50610268610b15565b34801561035657600080fd5b5060cf5461036a906001600160a01b031681565b6040516001600160a01b03909116815260200161023f565b34801561038e57600080fd5b5061026861039d3660046126c9565b610c57565b3480156103ae57600080fd5b5061036a6103bd366004612665565b610d4f565b3480156103ce57600080fd5b506102356103dd3660046124d9565b60d76020526000908152604090205481565b3480156103fb57600080fd5b5061026861040a3660046124d9565b610fab565b610268611094565b34801561042357600080fd5b50610268611190565b34801561043857600080fd5b5061023560cb5481565b34801561044e57600080fd5b5060cc54610235565b6102686104653660046125a8565b611210565b34801561047657600080fd5b506104c26104853660046126c9565b60d3602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e00161023f565b34801561050357600080fd5b506102356112dd565b34801561051857600080fd5b5061023560d55481565b34801561052e57600080fd5b5061023560cc5481565b34801561054457600080fd5b50610268611390565b34801561055957600080fd5b506102686105683660046126c9565b6113a2565b34801561057957600080fd5b506097546001600160a01b031661036a565b34801561059757600080fd5b5060ce5461036a906001600160a01b031681565b3480156105b757600080fd5b506105fa6105c63660046124d9565b60d660205260009081526040902080546001820154600283015460039093015460ff9092169290916001600160a01b031684565b6040805194151585526020850193909352918301526001600160a01b0316606082015260800161023f565b34801561063157600080fd5b506106b66106403660046124d9565b60408051608080820183526000808352602080840182905283850182905260609384018290526001600160a01b03958616825260d681529084902084519283018552805460ff16151583526001810154918301919091526002810154938201939093526003909201549092169181019190915290565b60405161023f919081511515815260208083015190820152604080830151908201526060918201516001600160a01b03169181019190915260800190565b34801561070057600080fd5b5061023560d15481565b34801561071657600080fd5b5061023560d05481565b34801561072c57600080fd5b5061026861073b3660046126a8565b611452565b34801561074c57600080fd5b5060d154600090815260d36020526040902060010154610235565b34801561077357600080fd5b506107ad6107823660046126e1565b600091825260d4602090815260408084206001600160a01b0393909316845291905290205460ff1690565b604051901515815260200161023f565b3480156107c957600080fd5b506102686107d83660046124d9565b61161c565b3480156107e957600080fd5b5061023560ca5481565b3480156107ff57600080fd5b5061026861080e3660046124f3565b611692565b34801561081f57600080fd5b5061026861082e366004612525565b6118cc565b34801561083f57600080fd5b5060cd5461036a906001600160a01b031681565b34801561085f57600080fd5b5061026861086e3660046124d9565b611ae3565b60d25460d0541061089757604051636fb7511d60e11b815260040160405180910390fd5b600060d05460016108a89190612835565b600081815260d36020526040902060d1546002820154929350909114156109a75780600301544310156108ee57604051633b58b45160e11b815260040160405180910390fd5b6108f783611bad565b6001600160a01b038316600090815260d6602052604090206002015482111561093357604051632d10e3f360e21b815260040160405180910390fd5b600082815260d4602090815260408083206001600160a01b0387168452918290529091205460ff16156109795760405163c67bd77760e01b815260040160405180910390fd5b61098283611be5565b8260050154146109a5576040516341a051e360e01b815260040160405180910390fd5b505b60d080549060006109b7836128c7565b91905055507f5b24ab8ceb442373727ac5c559a027521cb52db451c74710ebed9faa5fe15a7c60d0546040516109ef91815260200190565b60405180910390a1505060d054600090815260d36020526040812081815560018101829055600281018290556003810182905560048101829055600581018290556006015550565b610a7a6040518060e00160405280600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b50600090815260d36020908152604091829020825160e081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a082015260069091015460c082015290565b60d88181548110610aed57600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b60d25460d05410610b3957604051636fb7511d60e11b815260040160405180910390fd5b600060d55411610b5c57604051631090380d60e01b815260040160405180910390fd5b600060d0546001610b6d9190612835565b600081815260d360205260409020600381015491925090431015610ba457604051633b58b45160e11b815260040160405180910390fd5b60d154816002015414610bca57604051630bea7bb360e31b815260040160405180910390fd5b60d554610bd683611be5565b610be09190612835565b816005015414610c025760405162d1c60960e51b815260040160405180910390fd5b60d08054906000610c12836128c7565b909155505060d05460d18190556040519081527f453430d123684340024ae0a229704bdab39c93dc48bb5a0b4bc83142d95d48ef906020015b60405180910390a15050565b610c6033611bad565b33600090815260d66020526040902060d15460028201541115610c9657604051633814754d60e21b815260040160405180910390fd5b60cc548160010154610ca8919061286d565b821115610cc8576040516378de4a6960e11b815260040160405180910390fd5b81816001016000828254610cdc919061286d565b9091555050604051600090339084908381818185875af1925050503d8060008114610d23576040519150601f19603f3d011682016040523d82523d6000602084013e610d28565b606091505b5050905080610d4a576040516312171d8360e31b815260040160405180910390fd5b505050565b8035600081815260d36020908152604082206002015491929190840135808310610d8c576040516304b4359960e11b815260040160405180910390fd5b60d254811115610daf576040516381976cb960e01b815260040160405180910390fd5b8260d15410610dd157604051632d10e3f360e21b815260040160405180910390fd5b600081815260d360205260409020600201548214610e025760405163a3fbefb960e01b815260040160405180910390fd5b506000610e1260208701876124d9565b90506000610e2660408801602089016124d9565b9050610e3182611c80565b610e3a81611c80565b6000604051610e489061249f565b604051809103906000f080158015610e64573d6000803e3d6000fd5b506001600160a01b03838116600090815260d660209081526040808320600390810180548787166001600160a01b03199182168117909255958a16855293829020018054909416831790935582518981529081019190915291925082917fd0ebe74b4f7d89a9b0fdc9d95f887a7b925c6c7300b5c4b2c3304d97925840fa910160405180910390a160cf5460ce54600087815260d36020526040808220548a8352918190205460ca5491516301065adb60e71b81526001600160a01b038a8116600483015289811660248301529586166044820152938516606485015230608485015260a484019290925260c483019190915260e48201529083169063832d6d809061010401600060405180830381600087803b158015610f8457600080fd5b505af1158015610f98573d6000803e3d6000fd5b5092985050505050505050505b92915050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610ffd5760405162461bcd60e51b8152600401610ff490612752565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166110466000805160206141b3833981519152546001600160a01b031690565b6001600160a01b03161461106c5760405162461bcd60e51b8152600401610ff49061279e565b61107581611cc5565b6040805160008082526020820190925261109191839190611ccd565b50565b33600090815260d6602052604090205460ff16156110d95733600090815260d66020526040812060010180543492906110ce908490612835565b9091555061118e9050565b60cc543410156110fc576040516378de4a6960e11b815260040160405180910390fd5b60408051608081018252600180825234602080840191825260008486018181526060860182815233835260d69093529581209451855460ff19169015151785559151928401929092559251600283015551600390910180546001600160a01b0319166001600160a01b0390921691909117905560d580549161117d836128c7565b919050555061118e3360d154611e47565b565b33600081815260d76020526040808220805490839055905190929083908381818185875af1925050503d80600081146111e5576040519150601f19603f3d011682016040523d82523d6000602084013e6111ea565b606091505b505090508061120c576040516312171d8360e31b815260040160405180910390fd5b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156112595760405162461bcd60e51b8152600401610ff490612752565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112a26000805160206141b3833981519152546001600160a01b031690565b6001600160a01b0316146112c85760405162461bcd60e51b8152600401610ff49061279e565b6112d182611cc5565b61120c82826001611ccd565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461137d5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610ff4565b506000805160206141b383398151915290565b611398611ee9565b61118e6000611f43565b33600090815260d6602052604090205460ff166113d1576040516273e5c360e31b815260040160405180910390fd5b33600090815260d6602052604090206002810154821115806113f4575060d25482115b1561141257604051632caca6cf60e01b815260040160405180910390fd5b600082815260d36020526040902060029081015490820154146114485760405163044bc3e360e41b815260040160405180910390fd5b61120c3383611e47565b33600090815260d6602052604090205460ff16611481576040516273e5c360e31b815260040160405180910390fd5b33600090815260d6602090815260408083206002015480845260d390925290912060cb5460048201546114b4904361286d565b10156114d357604051632646c5bd60e21b815260040160405180910390fd5b806001015483116114f75760405163f8748b7960e01b815260040160405180910390fd5b60ce60009054906101000a90046001600160a01b03166001600160a01b03166329869a7f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561154557600080fd5b505afa158015611559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157d9190612690565b83111561159d576040516359f175b760e01b815260040160405180910390fd5b60d280549060006115ad836128c7565b909155505060d2546040805191825233602083015281018590527ff41917cc5ddc34dc57b3ea71e866801af6a254bddeadaffd1177ad8e46cb0d6b9060600160405180910390a161160a60d254858585611605611f95565b611faa565b6116163360d254611e47565b50505050565b611624611ee9565b6001600160a01b0381166116895760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ff4565b61109181611f43565b600061169e83836120b9565b9050336001600160a01b038216146116da57604051631033979d60e11b81523360048201526001600160a01b0382166024820152604401610ff4565b6001600160a01b03808316600090815260d6602052604080822060019081015493871683529120015480821115611766576001600160a01b038416600090815260d660205260409020600101819055611733818361286d565b6001600160a01b038516600090815260d760205260408120805490919061175b908490612835565b925050819055508091505b600061177360028461284d565b6001600160a01b038716600090815260d660205260408120600101805492935083929091906117a3908490612835565b90915550506001600160a01b038616600090815260d66020526040902060030180546001600160a01b03191690556117db818461286d565b60cd546001600160a01b0316600090815260d7602052604081208054909190611805908490612835565b90915550506001600160a01b038516600090815260d6602052604090206002015461182f86612156565b604080518082019091526001600160a01b0396871681526020810191825260d8805460018101825560009190915290517f5320ad99a619a90804cd2efe3a5cf0ac1ac5c41ad9ff2c61cf699efdad771096600290920291820180546001600160a01b0319169190981617909655517f5320ad99a619a90804cd2efe3a5cf0ac1ac5c41ad9ff2c61cf699efdad771097909501949094555050505050565b600054610100900460ff16158080156118ec5750600054600160ff909116105b806119065750303b158015611906575060005460ff166001145b6119695760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610ff4565b6000805460ff19166001179055801561198c576000805461ff0019166101001790555b6001600160a01b038b1615806119a957506001600160a01b038a16155b806119bb57506001600160a01b038916155b156119d95760405163d92e233d60e01b815260040160405180910390fd5b60cd80546001600160a01b03808e166001600160a01b03199283161790925560ce80548d841690831617905560cf8054928c169290911691909117905560c988905560ca87905560cb86905560cc85905560d084905560d184905560d2849055611a468483858243611faa565b60d2546040805191825233602083015281018390527ff41917cc5ddc34dc57b3ea71e866801af6a254bddeadaffd1177ad8e46cb0d6b9060600160405180910390a1611a906121ac565b8015611ad6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b611aec81611bad565b6001600160a01b038116600090815260d66020526040902060d15460028201541115611b2b57604051633814754d60e21b815260040160405180910390fd5b6001810154611b3983612156565b6000836001600160a01b03168260405160006040518083038185875af1925050503d8060008114611b86576040519150601f19603f3d011682016040523d82523d6000602084013e611b8b565b606091505b5050905080611616576040516312171d8360e31b815260040160405180910390fd5b6001600160a01b038116600090815260d6602052604090205460ff16611091576040516273e5c360e31b815260040160405180910390fd5b600080805b60d854811015611c7957600084815260d46020526040812060d8805491929184908110611c2757634e487b7160e01b600052603260045260246000fd5b600091825260208083206002909202909101546001600160a01b0316835282019290925260400190205460ff1615611c675781611c63816128c7565b9250505b80611c71816128c7565b915050611bea565b5092915050565b611c8981611bad565b6001600160a01b03818116600090815260d6602052604090206003015416156110915760405163e5e0e82b60e01b815260040160405180910390fd5b611091611ee9565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611d0057610d4a836121e3565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d3957600080fd5b505afa925050508015611d69575060408051601f3d908101601f19168201909252611d6691810190612690565b60015b611dcc5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610ff4565b6000805160206141b38339815191528114611e3b5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610ff4565b50610d4a83838361227f565b6001600160a01b038216600090815260d66020908152604080832060020184905583835260d39091528120600501805491611e81836128c7565b9091555050600081815260d4602090815260408083206001600160a01b03861680855290835292819020805460ff1916600117905580519283529082018390527f617d31491414a4ab2bd831e566a31837fa7fb6582921c91dffbbe83fbca789f39101610c4b565b6097546001600160a01b0316331461118e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ff4565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060c95443611fa59190612835565b905090565b600082815260d36020908152604080832060d4909252909120600682015480611fd9576006830186905561202b565b808614611ff957604051633ef41c6960e21b815260040160405180910390fd5b600087815260018301602052604090205460ff161561202b5760405163dad07bab60e01b815260040160405180910390fd5b506000868152600191820160209081526040808320805460ff191685179055805160e081018252988952888201978852888101968752606089019586524360808a0190815260a08a0184815260c08b018581529b855260d390935292209751885595519187019190915592516002860155505160038401555160048301555160058201559051600690910155565b6001600160a01b03808316600090815260d6602052604080822084841683529082206003820154929391929091168061210557604051637c2f023d60e01b815260040160405180910390fd5b60038201546001600160a01b0382811691161461214d57600382015460405162e82b8d60e51b81526001600160a01b0380841660048301529091166024820152604401610ff4565b95945050505050565b60d58054906000612166836128b0565b90915550506001600160a01b0316600090815260d660205260408120805460ff1916815560018101829055600281019190915560030180546001600160a01b0319169055565b600054610100900460ff166121d35760405162461bcd60e51b8152600401610ff4906127ea565b6121db6122a4565b61118e6122d3565b6001600160a01b0381163b6122505760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610ff4565b6000805160206141b383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612288836122fa565b6000825111806122955750805b15610d4a57611616838361233a565b600054610100900460ff166122cb5760405162461bcd60e51b8152600401610ff4906127ea565b61118e612425565b600054610100900460ff1661118e5760405162461bcd60e51b8152600401610ff4906127ea565b612303816121e3565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6123a25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610ff4565b600080846001600160a01b0316846040516123bd9190612703565b600060405180830381855af49150503d80600081146123f8576040519150601f19603f3d011682016040523d82523d6000602084013e6123fd565b606091505b509150915061214d82826040518060600160405280602781526020016141d360279139612455565b600054610100900460ff1661244c5760405162461bcd60e51b8152600401610ff4906127ea565b61118e33611f43565b6060831561246457508161246e565b61246e8383612475565b9392505050565b8151156124855781518083602001fd5b8060405162461bcd60e51b8152600401610ff4919061271f565b6118a48061290f83390190565b80356001600160a01b03811681146124c357600080fd5b919050565b8060408101831015610fa557600080fd5b6000602082840312156124ea578081fd5b61246e826124ac565b60008060408385031215612505578081fd5b61250e836124ac565b915061251c602084016124ac565b90509250929050565b6000806000806000806000806000806101408b8d031215612544578586fd5b61254d8b6124ac565b995061255b60208c016124ac565b985061256960408c016124ac565b999c989b5098996060810135995060808101359860a0820135985060c0820135975060e082013596506101008201359550610120909101359350915050565b600080604083850312156125ba578182fd5b6125c3836124ac565b9150602083013567ffffffffffffffff808211156125df578283fd5b818501915085601f8301126125f2578283fd5b813581811115612604576126046128f8565b604051601f8201601f19908116603f0116810190838211818310171561262c5761262c6128f8565b81604052828152886020848701011115612644578586fd5b82602086016020830137856020848301015280955050505050509250929050565b60008060808385031215612677578182fd5b61268184846124c8565b915061251c84604085016124c8565b6000602082840312156126a1578081fd5b5051919050565b600080604083850312156126ba578182fd5b50508035926020909101359150565b6000602082840312156126da578081fd5b5035919050565b600080604083850312156126f3578182fd5b8235915061251c602084016124ac565b60008251612715818460208701612884565b9190910192915050565b602081526000825180602084015261273e816040850160208701612884565b601f01601f19169190910160400192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008219821115612848576128486128e2565b500190565b60008261286857634e487b7160e01b81526012600452602481fd5b500490565b60008282101561287f5761287f6128e2565b500390565b60005b8381101561289f578181015183820152602001612887565b838111156116165750506000910152565b6000816128bf576128bf6128e2565b506000190190565b60006000198214156128db576128db6128e2565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe608060405234801561001057600080fd5b50611884806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063832d6d801161008c578063925f9a9611610066578063925f9a96146101ad5780639909e0d9146101b6578063cc8f6677146101c9578063e87e3589146101dc57600080fd5b8063832d6d80146101785780638a8cd2181461018b5780638b2999031461019357600080fd5b80635f41e3d6116100c85780635f41e3d61461013f578063638068db1461014857806370dea79a1461015d5780637f4c91c51461016557600080fd5b80632a51f6f7146100ef57806341e8510c1461010b578063534db0e214610114575b600080fd5b6100f860085481565b6040519081526020015b60405180910390f35b6100f860075481565b600454610127906001600160a01b031681565b6040516001600160a01b039091168152602001610102565b6100f860065481565b61015b6101563660046114c2565b6101e4565b005b61015b6105ec565b600354610127906001600160a01b031681565b61015b61018636600461139b565b610662565b61012761076c565b6000546101a09060ff1681565b6040516101029190611722565b6100f860055481565b61015b6101c4366004611597565b610801565b61015b6101d7366004611424565b6109e1565b6100f8610ea7565b6101ec61076c565b6001600160a01b0316336001600160a01b03161461021d57604051631cc191eb60e31b815260040160405180910390fd5b610225610ea7565b60055461023290436117cc565b111561025157604051631ab7da6b60e01b815260040160405180910390fd5b6000610293858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250869150610f119050565b905060085481146102b75760405163365d598160e21b815260040160405180910390fd5b6000861180156102c657508386105b6103075760405162461bcd60e51b815260206004820152600d60248201526c0929cac82989288be929c888ab609b1b60448201526064015b60405180910390fd5b6001610314600284611799565b11156103595760405162461bcd60e51b8152602060048201526014602482015273424953454354494f4e5f494e434f4d504c45544560601b60448201526064016102fe565b6001546001600160a01b031663f785968f610374898061173c565b8c8c6040518563ffffffff1660e01b815260040161039594939291906116fb565b60006040518083038186803b1580156103ad57600080fd5b505afa1580156103c1573d6000803e3d6000fd5b5050505060006104068a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250610f47915050565b9150508061041389610fc1565b146104315760405163c64c5f7d60e01b815260040160405180910390fd5b506000805461010090046001600160a01b031663401ebd6e878761045660018c6117cc565b81811061047357634e487b7160e01b600052603260045260246000fd5b905060200201358a8f8f6040518563ffffffff1660e01b815260040161049c949392919061164f565b60206040518083038186803b1580156104b457600080fd5b505afa1580156104c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec91906114aa565b905085858881811061050e57634e487b7160e01b600052603260045260246000fd5b905060200201358114610525576105256000611022565b506001905060005460ff16600281111561054f57634e487b7160e01b600052602160045260246000fd5b14156105845760055461056290436117cc565b60075461056f91906117cc565b6007556000805460ff191660021790556105dc565b600260005460ff1660028111156105ab57634e487b7160e01b600052602160045260246000fd5b14156105dc576005546105be90436117cc565b6006546105cb91906117cc565b6006556000805460ff191660011790555b5050436005555050505050505050565b6105f4610ea7565b60055461060190436117cc565b1161061f576040516302eb354360e41b815260040160405180910390fd5b600260005460ff16600281111561064657634e487b7160e01b600052602160045260246000fd5b1415610658576106566001611060565b565b6106566001611120565b6000805460ff16600281111561068857634e487b7160e01b600052602160045260246000fd5b146106a55760405162dc149f60e41b815260040160405180910390fd5b6001600160a01b03881615806106c257506001600160a01b038716155b156106e05760405163d92e233d60e01b815260040160405180910390fd5b600380546001600160a01b03998a166001600160a01b03199182161790915560048054988a16988216989098179097556000805460018054978b16978a169790971790965560028054958a1695909816949094178755600992909255600a55929094166101000260ff19166001600160a81b031990911617909117909155436005556006819055600755565b6000600260005460ff16600281111561079557634e487b7160e01b600052602160045260246000fd5b14156107ab57506003546001600160a01b031690565b600160005460ff1660028111156107d257634e487b7160e01b600052602160045260246000fd5b14156107e857506004546001600160a01b031690565b6040516321c4e35760e21b815260040160405180910390fd5b61080961076c565b6001600160a01b0316336001600160a01b03161461083a57604051631cc191eb60e31b815260040160405180910390fd5b610842610ea7565b60055461084f90436117cc565b111561086e57604051631ab7da6b60e01b815260040160405180910390fd5b6008541561088e5760405162dc149f60e41b815260040160405180910390fd5b600081116108d25760405162461bcd60e51b8152602060048201526011602482015270494e56414c49445f4e554d5f535445505360781b60448201526064016102fe565b6108e1600954600a54836111ae565b6008819055604080519182526000602083015281018290527f8c3cfc522d91af51bb14f6db452f8c212ba664a426c79e5ef78872e7a10720749060600160405180910390a1600160005460ff16600281111561094d57634e487b7160e01b600052602160045260246000fd5b14156109825760055461096090436117cc565b60075461096d91906117cc565b6007556000805460ff191660021790556109da565b600260005460ff1660028111156109a957634e487b7160e01b600052602160045260246000fd5b14156109da576005546109bc90436117cc565b6006546109c991906117cc565b6006556000805460ff191660011790555b5043600555565b6109e961076c565b6001600160a01b0316336001600160a01b031614610a1a57604051631cc191eb60e31b815260040160405180910390fd5b610a22610ea7565b600554610a2f90436117cc565b1115610a4e57604051631ab7da6b60e01b815260040160405180910390fd5b60085415610a6f576040516321c4e35760e21b815260040160405180910390fd5b6000610ab1858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250869150610f119050565b90506008548114610ad55760405163365d598160e21b815260040160405180910390fd5b600086118015610ae457508386105b610b205760405162461bcd60e51b815260206004820152600d60248201526c0929cac82989288be929c888ab609b1b60448201526064016102fe565b8484610b2d6001896117cc565b818110610b4a57634e487b7160e01b600052603260045260246000fd5b9050602002013588886000818110610b7257634e487b7160e01b600052603260045260246000fd5b9050602002013514610bb65760405162461bcd60e51b815260206004820152600d60248201526c1253959053125117d4d5105495609a1b60448201526064016102fe565b848487818110610bd657634e487b7160e01b600052603260045260246000fd5b602002919091013590508888610bed6001826117cc565b818110610c0a57634e487b7160e01b600052603260045260246000fd5b905060200201351415610c4d5760405162461bcd60e51b815260206004820152600b60248201526a1253959053125117d1539160aa1b60448201526064016102fe565b82826002861115610cc0576000610c65856002611244565b90506000610c7486600261126b565b905089600114610c845780610c86565b815b925060018a1115610cbd57610c9c60028b6117cc565b610ca690826117ad565b610cb09083611781565b610cba9085611781565b93505b50505b60018111610cfc5760405162461bcd60e51b81526020600482015260096024820152681513d3d7d4d213d49560ba1b60448201526064016102fe565b600060028210610d0d576002610d0f565b815b9050610d1c816001611781565b8a14610d565760405162461bcd60e51b815260206004820152600960248201526810d55517d0d3d5539560ba1b60448201526064016102fe565b610d968b8b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250869150610f119050565b6008819055604080519182526020820185905281018390527f8c3cfc522d91af51bb14f6db452f8c212ba664a426c79e5ef78872e7a10720749060600160405180910390a15060019250610de8915050565b60005460ff166002811115610e0d57634e487b7160e01b600052602160045260246000fd5b1415610e4257600554610e2090436117cc565b600754610e2d91906117cc565b6007556000805460ff19166002179055610e9a565b600260005460ff166002811115610e6957634e487b7160e01b600052602160045260246000fd5b1415610e9a57600554610e7c90436117cc565b600654610e8991906117cc565b6006556000805460ff191660011790555b5050436005555050505050565b6000600260005460ff166002811115610ed057634e487b7160e01b600052602160045260246000fd5b1415610edd575060065490565b600160005460ff166002811115610f0457634e487b7160e01b600052602160045260246000fd5b14156107e8575060075490565b6000838383604051602001610f28939291906115d8565b6040516020818303038152906040528051906020012090509392505050565b60008082845110158015610f6857506020838551610f6591906117cc565b10155b610fa05760405162461bcd60e51b81526020600482015260096024820152681d1bdbc81cda1bdc9d60ba1b60448201526064016102fe565b610fab836020611781565b610fb58585611277565b915091505b9250929050565b6000610fd3604083016020840161137f565b604080516bffffffffffffffffffffffff19606093841b166020820152908401356034820152908301356054820152607401604051602081830303815290604052805190602001209050919050565b600260005460ff16600281111561104957634e487b7160e01b600052602160045260246000fd5b141561105b5761105881611120565b50565b611058815b6004546003546040517fa599fa89698188ea23144af5bd981dc904e4221ee98ed73883b509409808338d926110a5926001600160a01b03918216929116908590611619565b60405180910390a160025460048054600354604051637d3c01f360e11b81526001600160a01b0392831693810193909352811660248301529091169063fa7803e6906044015b600060405180830381600087803b15801561110557600080fd5b505af1158015611119573d6000803e3d6000fd5b5050505050565b6003546004546040517fa599fa89698188ea23144af5bd981dc904e4221ee98ed73883b509409808338d92611165926001600160a01b03918216929116908590611619565b60405180910390a160025460035460048054604051637d3c01f360e11b81526001600160a01b03938416928101929092528216602482015291169063fa7803e6906044016110eb565b6040805160028082526060820183526000928392919060208301908036833701905050905084816000815181106111f557634e487b7160e01b600052603260045260246000fd5b602002602001018181525050838160018151811061122357634e487b7160e01b600052603260045260246000fd5b60200260200101818152505061123b81600085610f11565b95945050505050565b600061125082846117e3565b61125a8385611799565b6112649190611781565b9392505050565b60006112648284611799565b6000611284826020611781565b835110156112cc5760405162461bcd60e51b8152602060048201526015602482015274746f427974657333325f6f75744f66426f756e647360581b60448201526064016102fe565b50016020015190565b80356112e081611839565b919050565b60008083601f8401126112f6578182fd5b50813567ffffffffffffffff81111561130d578182fd5b6020830191508360208260051b8501011115610fba57600080fd5b60008083601f840112611339578182fd5b50813567ffffffffffffffff811115611350578182fd5b602083019150836020828501011115610fba57600080fd5b600060808284031215611379578081fd5b50919050565b600060208284031215611390578081fd5b813561126481611839565b600080600080600080600080610100898b0312156113b7578384fd5b88356113c281611839565b975060208901356113d281611839565b965060408901356113e281611839565b955060608901356113f281611839565b9450608089013561140281611839565b979a969950949793969560a0850135955060c08501359460e001359350915050565b600080600080600080600060a0888a03121561143e578283fd5b873567ffffffffffffffff80821115611455578485fd5b6114618b838c016112e5565b909950975060208a0135965060408a0135915080821115611480578485fd5b5061148d8a828b016112e5565b989b979a5095989597966060870135966080013595509350505050565b6000602082840312156114bb578081fd5b5051919050565b60008060008060008060008060008060e08b8d0312156114e0578182fd5b8a3567ffffffffffffffff808211156114f7578384fd5b6115038e838f01611328565b909c509a5060208d013591508082111561151b578384fd5b6115278e838f01611328565b909a50985060408d013591508082111561153f578384fd5b61154b8e838f01611368565b975060608d0135965060808d0135915080821115611567578384fd5b506115748d828e016112e5565b9b9e9a9d50989b979a969995989760a08101359660c09091013595509350505050565b6000602082840312156115a8578081fd5b5035919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b835160009082906020808801845b83811015611602578151855293820193908201906001016115e6565b505095825250938401929092525050604001919050565b6001600160a01b03848116825283166020820152606081016002831061164157611641611823565b826040830152949350505050565b8481526060602082015260008435601e1986360301811261166e578182fd5b8501803567ffffffffffffffff811115611686578283fd5b803603871315611694578283fd5b608060608501526116ac60e0850182602085016115af565b9150506116bb602087016112d5565b6001600160a01b0316608084015260408681013560a0850152606087013560c0850152838203908401526116f08185876115af565b979650505050505050565b60408152600061170f6040830186886115af565b82810360208401526116f08185876115af565b602081016003831061173657611736611823565b91905290565b6000808335601e19843603018112611752578283fd5b83018035915067ffffffffffffffff82111561176c578283fd5b602001915036819003821315610fba57600080fd5b60008219821115611794576117946117f7565b500190565b6000826117a8576117a861180d565b500490565b60008160001904831182151516156117c7576117c76117f7565b500290565b6000828210156117de576117de6117f7565b500390565b6000826117f2576117f261180d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038116811461105857600080fdfea2646970667358221220c72281b1ad243c1bf76a3a63aac21a7e55255d4f4439c39635afba046b6418a864736f6c63430008040033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207553e19fbb36b02ca24e935dcd9b482cd1d3dc650ae050379976901870f34f5964736f6c63430008040033",
  "devdoc": {
    "errors": {
      "AssertionAlreadyResolved()": [
        {
          "details": "Thrown when the assertion is already resolved"
        }
      ],
      "AssertionOutOfRange()": [
        {
          "details": "Thrown when a staker tries to advance stake to invalid assertionId."
        }
      ],
      "ChallengePeriodPending()": [
        {
          "details": "Thrown when the challenge period has not passed"
        }
      ],
      "ChallengedStaker()": [
        {
          "details": "Thrown when the staker is currently in Challenge"
        }
      ],
      "DuplicateAssertion()": [
        {
          "details": "Thrown when assertion is a duplicate of an existing one."
        }
      ],
      "EmptyAssertion()": [
        {
          "details": "Thrown when a sender tries to create assertion without any tx."
        }
      ],
      "InDifferentChallenge(address,address)": [
        {
          "details": "Thrown when the two stakers are in different challenge",
          "params": {
            "staker1Challenge": "challenge address of staker 1",
            "staker2Challenge": "challenge address of staker 2"
          }
        }
      ],
      "InboxReadLimitExceeded()": [
        {
          "details": "Thrown when the requested assertion read past the end of current Inbox."
        }
      ],
      "InsufficientStake()": [
        {
          "details": "Thrown when the function is called with Insufficient Stake"
        }
      ],
      "InvalidInboxSize()": [
        {
          "details": "Thrown when assertion creation requested with invalid inbox size."
        }
      ],
      "InvalidParent()": [
        {
          "details": "Thrown when the assertion's parent is not the last confirmed assertion"
        }
      ],
      "MinimumAssertionPeriodNotPassed()": [
        {
          "details": "Thrown when a sender tries to create assertion before the minimum assertion time period"
        }
      ],
      "NoStaker()": [
        {
          "details": "Thrown when there are zero stakers"
        }
      ],
      "NoUnresolvedAssertion()": [
        {
          "details": "Thrown when there is no unresolved assertion"
        }
      ],
      "NotAllStaked()": [
        {
          "details": "Thrown when all the stakers are not staked"
        }
      ],
      "NotChallengeManager(address,address)": [
        {
          "details": "Thrown when unauthorized (!challenge) address calls an only-challenge function",
          "params": {
            "challenge": "The challenge address authorized to call this function",
            "sender": "Address of the caller"
          }
        }
      ],
      "NotInChallenge()": [
        {
          "details": "Thrown when the staker is not in a challenge"
        }
      ],
      "NotSiblings()": [
        {
          "details": "Thrown when the challenger and defender didn't attest to sibling assertions"
        }
      ],
      "NotStaked()": [
        {
          "details": "Thrown when address that have not staked any token calls a only-staked function"
        }
      ],
      "ParentAssertionUnstaked()": [
        {
          "details": "Thrown when a staker tries to advance stake to non-child assertion"
        }
      ],
      "PreviousStateHash()": [
        {
          "details": "Thrown when parent's statehash is not equal to the start state(or previous state)/"
        }
      ],
      "StakedOnUnconfirmedAssertion()": [
        {
          "details": "Thrown when the caller is staked on unconfirmed assertion."
        }
      ],
      "StakerStakedOnTarget()": [
        {
          "details": "Thrown staker's assertion is descendant of firstUnresolved assertion"
        }
      ],
      "StakersPresent()": [
        {
          "details": "Thrown when there are staker's present on the assertion"
        }
      ],
      "TransferFailed()": [
        {
          "details": "Thrown when transfer fails"
        }
      ],
      "UnproposedAssertion()": [
        {
          "details": "Thrown when the challenger tries to challenge an unproposed assertion"
        }
      ],
      "WrongOrder()": [
        {
          "details": "Thrown when the challenge assertion Id is not ordered or in range."
        }
      ],
      "ZeroAddress()": [
        {
          "details": "Thrown when function is called with a zero address argument"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "advanceStake(uint256)": {
        "params": {
          "assertionID": "ID of assertion to advance stake to. Currently this must be a child of the current assertion. TODO: generalize to arbitrary descendants."
        }
      },
      "challengeAssertion(address[2],uint256[2])": {
        "params": {
          "assertionIDs": "Assertion IDs of the players engaged in the challenge. The first ID should be the earlier-created and is the one being challenged.",
          "players": "Defender (first) and challenger (second) addresses. Must be staked on DAs on different branches."
        },
        "returns": {
          "_0": "Newly created challenge contract address."
        }
      },
      "completeChallenge(address,address)": {
        "params": {
          "loser": "Address of losing staker.",
          "winner": "Address of winning staker."
        }
      },
      "confirmedInboxSize()": {
        "returns": {
          "_0": "confirmedInboxSize size of inbox confirmed"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createAssertion(bytes32,uint256)": {
        "params": {
          "inboxSize": "Size of inbox corresponding to assertion (number of transactions).",
          "vmHash": "New VM hash."
        }
      },
      "currentRequiredStake()": {
        "returns": {
          "_0": "The current required stake amount."
        }
      },
      "getAssertion(uint256)": {
        "params": {
          "assertionID": "Assertion ID."
        },
        "returns": {
          "_0": "Assertion corresponding to ID."
        }
      },
      "getStaker(address)": {
        "params": {
          "addr": "Staker address."
        },
        "returns": {
          "_0": "Staker corresponding to address."
        }
      },
      "isStakedOnAssertion(uint256,address)": {
        "returns": {
          "_0": "Whether or not the staker is staked on the assertion."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "rejectFirstUnresolvedAssertion(address)": {
        "params": {
          "stakerAddress": "Address of a staker staked on a different branch to the first unresolved assertion. If the first unresolved assertion's parent is confirmed, this parameter is used to establish that a staker exists on a different branch of the assertion chain. This parameter is ignored when the parent of the first unresolved assertion is not the last confirmed assertion."
        }
      },
      "removeStake(address)": {
        "params": {
          "stakerAddress": "Address of staker for which to unstake."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stake()": {
        "details": "Currently uses Ether to stake; Must be > than defined threshold if this is a new stake."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstake(uint256)": {
        "params": {
          "stakeAmount": "Token amount to withdraw. Must be <= sender's current stake minus the current required stake."
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "advanceStake(uint256)": {
        "notice": "Advances msg.sender's existing stake to assertionID."
      },
      "challengeAssertion(address[2],uint256[2])": {
        "notice": "Initiates a dispute between a defender and challenger on an unconfirmed DA."
      },
      "completeChallenge(address,address)": {
        "notice": "Completes ongoing challenge. Callback, called by a challenge contract."
      },
      "confirmFirstUnresolvedAssertion()": {
        "notice": "Confirms first unresolved assertion. Assertion is confirmed if and only if: (1) there is at least one staker, and (2) challenge period has passed, and (3) predecessor has been confirmed, and (4) all stakers are staked on the assertion."
      },
      "createAssertion(bytes32,uint256)": {
        "notice": "Creates a new DA representing the rollup state after executing a block of transactions (sequenced in SequencerInbox). Block is represented by all transactions in range [prevInboxSize, inboxSize]. The latest staked DA of the sender is considered to be the predecessor. Moves sender stake onto the new DA. The new DA stores the hash of the parameters: H(l2GasUsed || vmHash)"
      },
      "rejectFirstUnresolvedAssertion(address)": {
        "notice": "Rejects first unresolved assertion. Assertion is rejected if and only if: (1) all of the following are true: (a) challenge period has passed, and (b) at least one staker exists, and (c) no staker remains staked on the assertion (all have been destroyed). OR (2) predecessor has been rejected"
      },
      "removeStake(address)": {
        "notice": "Removes stakerAddress from the set of stakers and withdraws the full stake amount to stakerAddress. This can be called by anyone since it is currently necessary to keep the chain progressing."
      },
      "stake()": {
        "notice": "Deposits stake on staker's current assertion (or the last confirmed assertion if not currently staked)."
      },
      "unstake(uint256)": {
        "notice": "Withdraws stakeAmount from staker's stake if assertion it is staked on is confirmed."
      },
      "withdraw()": {
        "notice": "Withdraws all of msg.sender's withdrawable funds."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 534,
        "contract": "src/Rollup.sol:Rollup",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 537,
        "contract": "src/Rollup.sol:Rollup",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 516,
        "contract": "src/Rollup.sol:Rollup",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 831,
        "contract": "src/Rollup.sol:Rollup",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1157,
        "contract": "src/Rollup.sol:Rollup",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "src/Rollup.sol:Rollup",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "src/Rollup.sol:Rollup",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1667,
        "contract": "src/Rollup.sol:Rollup",
        "label": "confirmationPeriod",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 1669,
        "contract": "src/Rollup.sol:Rollup",
        "label": "challengePeriod",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 1671,
        "contract": "src/Rollup.sol:Rollup",
        "label": "minimumAssertionPeriod",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 1673,
        "contract": "src/Rollup.sol:Rollup",
        "label": "baseStakeAmount",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 1675,
        "contract": "src/Rollup.sol:Rollup",
        "label": "vault",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 1678,
        "contract": "src/Rollup.sol:Rollup",
        "label": "daProvider",
        "offset": 0,
        "slot": "206",
        "type": "t_contract(IDAProvider)1371"
      },
      {
        "astId": 1681,
        "contract": "src/Rollup.sol:Rollup",
        "label": "verifier",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(IVerifier)4657"
      },
      {
        "astId": 1726,
        "contract": "src/Rollup.sol:Rollup",
        "label": "lastResolvedAssertionID",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 1728,
        "contract": "src/Rollup.sol:Rollup",
        "label": "lastConfirmedAssertionID",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 1730,
        "contract": "src/Rollup.sol:Rollup",
        "label": "lastCreatedAssertionID",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 1735,
        "contract": "src/Rollup.sol:Rollup",
        "label": "assertions",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_uint256,t_struct(Assertion)1507_storage)"
      },
      {
        "astId": 1740,
        "contract": "src/Rollup.sol:Rollup",
        "label": "assertionState",
        "offset": 0,
        "slot": "212",
        "type": "t_mapping(t_uint256,t_struct(AssertionState)1690_storage)"
      },
      {
        "astId": 1742,
        "contract": "src/Rollup.sol:Rollup",
        "label": "numStakers",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 1747,
        "contract": "src/Rollup.sol:Rollup",
        "label": "stakers",
        "offset": 0,
        "slot": "214",
        "type": "t_mapping(t_address,t_struct(Staker)1492_storage)"
      },
      {
        "astId": 1751,
        "contract": "src/Rollup.sol:Rollup",
        "label": "withdrawableFunds",
        "offset": 0,
        "slot": "215",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1755,
        "contract": "src/Rollup.sol:Rollup",
        "label": "zombies",
        "offset": 0,
        "slot": "216",
        "type": "t_array(t_struct(Zombie)1695_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Zombie)1695_storage)dyn_storage": {
        "base": "t_struct(Zombie)1695_storage",
        "encoding": "dynamic_array",
        "label": "struct RollupBase.Zombie[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDAProvider)1371": {
        "encoding": "inplace",
        "label": "contract IDAProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IVerifier)4657": {
        "encoding": "inplace",
        "label": "contract IVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Staker)1492_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IRollup.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)1492_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Assertion)1507_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IRollup.Assertion)",
        "numberOfBytes": "32",
        "value": "t_struct(Assertion)1507_storage"
      },
      "t_mapping(t_uint256,t_struct(AssertionState)1690_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RollupBase.AssertionState)",
        "numberOfBytes": "32",
        "value": "t_struct(AssertionState)1690_storage"
      },
      "t_struct(Assertion)1507_storage": {
        "encoding": "inplace",
        "label": "struct IRollup.Assertion",
        "members": [
          {
            "astId": 1494,
            "contract": "src/Rollup.sol:Rollup",
            "label": "stateHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1496,
            "contract": "src/Rollup.sol:Rollup",
            "label": "inboxSize",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1498,
            "contract": "src/Rollup.sol:Rollup",
            "label": "parent",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1500,
            "contract": "src/Rollup.sol:Rollup",
            "label": "deadline",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1502,
            "contract": "src/Rollup.sol:Rollup",
            "label": "proposalTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1504,
            "contract": "src/Rollup.sol:Rollup",
            "label": "numStakers",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1506,
            "contract": "src/Rollup.sol:Rollup",
            "label": "childInboxSize",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(AssertionState)1690_storage": {
        "encoding": "inplace",
        "label": "struct RollupBase.AssertionState",
        "members": [
          {
            "astId": 1685,
            "contract": "src/Rollup.sol:Rollup",
            "label": "stakers",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1689,
            "contract": "src/Rollup.sol:Rollup",
            "label": "childStateHashes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_bool)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Staker)1492_storage": {
        "encoding": "inplace",
        "label": "struct IRollup.Staker",
        "members": [
          {
            "astId": 1485,
            "contract": "src/Rollup.sol:Rollup",
            "label": "isStaked",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1487,
            "contract": "src/Rollup.sol:Rollup",
            "label": "amountStaked",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1489,
            "contract": "src/Rollup.sol:Rollup",
            "label": "assertionID",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1491,
            "contract": "src/Rollup.sol:Rollup",
            "label": "currentChallenge",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Zombie)1695_storage": {
        "encoding": "inplace",
        "label": "struct RollupBase.Zombie",
        "members": [
          {
            "astId": 1692,
            "contract": "src/Rollup.sol:Rollup",
            "label": "stakerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1694,
            "contract": "src/Rollup.sol:Rollup",
            "label": "lastAssertionID",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}