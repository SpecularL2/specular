// SPDX-License-Identifier: WTFPL

pragma solidity ^0.8.0;

import "forge-std/Test.sol";

contract RLPEncodedTransactionsUtil is Test {
    bytes[10] rlpEncodedTransactions = [
        bytes(
            "0xf901a4808503f204d8e38803392a11680b7a2294f8f26fd31b9c1add70955dd0b12b754ea4197c299114d6653781964e6a9d4c9e7dd11b640000b9012747524a5053484234676a37514f4c705034733259387561646f766d3843627678456b7676336c4333504a4465454f425157544959787033713844344454374c625643524834534955754e655662434a7849786d4f56554e5663743639524d30304f78666e506c795a3168345153635745487544366145453772685261533576796d4564456235413476735a6b77526a59766c626b30433046697337597a386c586a646b5677456e4447764d33374d6d4a52315578453943584a4143345247614178346e6a695a774745696333676148764c476e77733251436968426e3646416e444b6354674f725155596b72374870686934323753714e345072736e624c4d39344b724a794a573237475a524f6753437773326f483166616b36596d5737344b6f695a657170482ea028fc37fd4c069c753d57ffa1cf1c45f0511383ca8f4075cd6c9cfc82df78e7e7a04d36831bc0bd107afa32069fa927147bf1a668f7d371b6292e26849a4a38a3a6"
        ),
        bytes(
            "0xf90103808503f204d8e3880ad7de520e61a9b094f20257687d34a9ad68a92b28d77d91d8a4e6472d911d4c8ff56fc142f2112aa9adefb9640000b8875256556e45374e74676d386f6a664d725a4649736c5a475268734f656a54544c6472664154414f6949493632674d68426c5a69545279785568566f3859476e597952387148326f5561655248316a62385a4c7152667055574273573739584d6b4559303276514d4c6b724734455953625a3962476f6d306d78395563773771474e574d3448484e2da0ff9156f7c36807a4e05ef19acd8b2e63aa04ea24b949092286ff54d64ebe09e9a00fe139a86a1ac38f21069dbe29b48f306d487f47f9e5e7d915a9c330c3bf8ae1"
        ),
        bytes(
            "0xf90118808503f204d8e38802d6330e34c0a064949657781398a79f7751c60ca9aee81b80e1b10c0d9114df7df649dc1a1df8cca179c70a640000b89c41447a7358464e634e784a71546541704e684e5059514d49736e5075473239634774647a6a4b5961794f6447674a4a4b514d364253456848664d7a4c51794142427931477739646453536a367368346f5561703875693538624857354d7544684d4557443563346d586456616f3557586445333045766837574f7175394d724b70695935554d3036724a5066554e65744a34464230346a756c3354482da0dee11af510109afc4525625ab61e66fba0083170067e5ff2c0a97f542adb6db6a0662e85951cc31abf4bf481fd49ff56d64cd9358fdd4903449f1ae71815013076"
        ),
        bytes(
            "0xf901e5808503f204d8e388087c0ab16e5e819494ae80ac1cff98a2dab9e63b268db89d0f2c8e314b900742a4810fb1fec0b2da9bb0ba440000b9016963394a365766793832583137304f6151494830746c4a6b74416b78687565774b66355848644c753936517861473550637036484254704b4a6573724375756b70696a6d4e746f7a6e5a464f49444267356c5675577a4b367a39634833426a45336834394e5763414d4663734d675762686a5573627064324e4a484936574e454b506379314f514c7a48397242724c314c6476737971543950647357436f524c4c6131675363655256437977494b4765787953795742704b417655555a6a6d4a347737625050615a55466341644e444979716f634e61427336514f6170326334686e5030414959686164464d3730754c484541564e62766a65446c4a5338513544616b5732564b3738726c797a45354d363872416350646364624934346b484f76356f44784178574b487a46774e6d367741374d37426e386b6b54586e416664343664507932416d77523745373467594961466e38646b336f7a616d573377334a5532444f4b383050362ea0502442e6e06d279fcf100d64ae19c26a15a5da94c7465f13340fafa832e3d044a071f853c010df6d4f23746da5e83a35cc99f68b6ab19b6acbd2446162266acd76"
        ),
        bytes(
            "0xf8a6808503f204d8e38803e8ed174205359c948bd4d89b8b981c83b75712e5e87c23e7c1741ad6911287a78f7b0febd6d139d76631cb640000ab7a374b543648674b46745472656e39494c384546506a37325535496b32724563726a346c6c7461587531742da07f75a104752a078e035aa23ed008e0ede780094bf9c077bc15ac29bc5e0e1b88a05b17a81503b647a0c301085347e02e188344790167960d2351463f901ca73bb7"
        ),
        bytes(
            "0xf901af808503f204d8e3880139b1586d1625229486b8fa2227164c677dce86a9d6712066b9e7c71f911338f35e32f8cdcb8000148ac941640000b90132484a755a764d6336454a30316e79595a69684a4d326352706e6637796d4b6e684c55324a53466e4761366f726d69496b43754c716d4a7048514c4559426c796c374f6370634b5a5571664a3235576459707a69786b4e5545684f51554762696b4f76466463636c477874756e744e437a626a696853745144315a746135754d4b584e4d6c6b6e7a5779666566663832475264464a5748314f76454165363738743363567753385759336162445156703279397062543369546979416f724f4632326a4644465935724d6b3770436a6f6f6f37327759425a33626a30517141577652426f4a43745953694958466e56364b4b6d6b323948314c58344e6a6d76734937644f61725950534230724168474b65454e446151304f34776768436f3874306a7850616e4f4c4f6b6177696f3651584a662da0220105258eee8740c10c0c7204bcd9d70a811ce7950256971780c19553ca84bea031a16c3e693b67adf285d89298cb6b3823ba3a667d652b1e1753dbf763ef35db"
        ),
        bytes(
            "0xf90112808503f204d8e388085c086fde173404941f7fa9a3f7ea4171cd465573eafa8e0799254539910ae360b14a598960e96d2304ed51640000b89657526a4174674e57323855345650586f42546f4d72326b64626563484c49426b507678687a4551474778375a3858786e4c4c48744d4f37333478456d6974796e486f63774b45545172614f64444232757874654e5462386f6e4137315672444d43594131725951767135436b71576f6a36707454594d565a5a495854623042574f5a466232316275627659755531763573795a6869532ea0e9be8b80bdbbe253d4c43085467c5001c29e035f657905f56d6399dccaff6acfa00896282cb8ecca2d363bfbbe7ce673048fc48b408c263b9cd828148257a12d4a"
        ),
        bytes(
            "0xf8ed808503f204d8e388057f336fab9e3428943b10f853885023615312e175701de7e67c77e61c911765d8593bd1e1847fce97f143ef640000b871457134686f576f78313164665577535a45416e5166666b484c354f6b71716d6f51736133523952444946584a7a35543272316c6735654838506d64706555556a413874573771685965427733734b7a6b754f68744d6671636a316845496962753748696151306c3755444d47746d5339682da01ffed3207b44e8a893b6dff9a51ed34b675b4edd75bd82addb4f91f9296f6023a00ed286309b14f4e0736dbee278c1fc39dd2a9d10ad5cdb2bac5abf77a0a1f321"
        ),
        bytes(
            "0xf901f5808503f204d8e3880b81dce9218bccec9482e015ef78811e541b011b614032b226526e12919116a33a40683b87f191053d127c8d640000b90178494b353647317746664433775745624f37655256785177426477746650354f74744f58384e59547a743172634b3765434f707536415262693850495332433155714c62596f3033574467364e6652506544487345504c57694247396a54384e61675a514375575631795144683156797170366a564b496e6763305664486d6672774633364c5842746f357551304f7148415443797861355234477750666c4742426a785a587a3937794d6f6851686c59386577717049313554416b626f43637752375774434b574d69486252483567504a694e384e593674714549766a71363932713966544542546a69454d4d6b4b78377753747a4139375965495241646e547733413073714471647738333476385a7144746a6478484a524f514c725748756c613444374e3547486f3468634b7658434246414741755a5442555654425246456e724d76345066306a4974687333624d79717747544e4d6e305239724e57635377684e416c38614b475a5943346d3947396742764742512ea043e645fa519fe769c0eaf6d2f7391e81c0a2e5fe74d86308b41cf4fce47d92cda00eb499e05227ca8e496fe8abab7031e379ad312750b9d98f939d6a7f64e6f3cb"
        ),
        bytes(
            "0xf9017d808503f204d8e3880496a996e30c2d1c944e429041e418c50ee54d5553af3b12ab0914ca4791124ca0e49055897e1f1b1e7a6bcc640000b90100554247657a3346756a39534a65546a776e4a5744683161755a744e565848495667356959566f706c44593055506a756b69303374776f554d4245303447764b34693165714d334851446837365a43544242425a47687a50587462377561324b684d397239547977564368385a6c475773796b556e315a634d3636725568754a5169706e52493367624833344f6b795749586b66516e446e5a69614c58676754306e655a6a69753070586737716b4f6a6c4e47386a7543666e4e3043775379625a6241794e4c7a6341595172316952795264384f316f65753174615a3735424f7775486f6f585a41413657723466456e745479514b554b4868574f7069314932712da041e06517318c72b640a5c9ed5e4fd89e8257ff74b284a132354d18f9b4004d6da05dc4e9f29cf89e2320f0d904fc644e20a03b651e0982b476a153c132622da7f4"
        )
    ];

    function _helper_sequencerInbox_appendTx_Version() internal pure returns (uint8) {
        // Update this as necessary
        return 0;
    }

    // TODO: RLP encode txBatch format. This function encodes the old batch data format.
    function _helper_sequencerInbox_appendTx(uint256 numTxns) internal view returns (bytes memory) {
        bytes memory combinedNumTxnsBytes = new bytes(1);
        combinedNumTxnsBytes[0] = bytes1(_helper_sequencerInbox_appendTx_Version());
        uint256 rlpEncodedTxnIndex;

        for (uint256 i; i < numTxns; i++) {
            rlpEncodedTxnIndex = i % 10;
            combinedNumTxnsBytes = bytes.concat(combinedNumTxnsBytes, rlpEncodedTransactions[rlpEncodedTxnIndex]);
        }

        bytes memory resultantTxnBatchBytes = abi.encodePacked(combinedNumTxnsBytes);

        return resultantTxnBatchBytes;
    }

    function _helper_sequencerInbox_appendTx_old(uint256 numTxns)
        internal
        view
        returns (bytes memory, uint256[] memory)
    {
        bytes[] memory currentBatchTransactions = new bytes[](numTxns);
        uint256[] memory transactionLengthArray = new uint256[](numTxns);
        uint256 rlpEncodedTxnIndex;

        for (uint256 i; i < numTxns; i++) {
            rlpEncodedTxnIndex = i % 10;
            currentBatchTransactions[i] = rlpEncodedTransactions[rlpEncodedTxnIndex];
            transactionLengthArray[i] = rlpEncodedTransactions[rlpEncodedTxnIndex].length;
        }

        bytes memory resultantTxBatch = abi.encode(currentBatchTransactions);

        return (resultantTxBatch, transactionLengthArray);
    }

    function _helper_createTxBatch_hardcoded() internal view returns (bytes memory) {
        bytes memory txs = abi.encodePacked(
            RLPEncodedTransactionsUtil.rlpEncodedTransactions[0],
            RLPEncodedTransactionsUtil.rlpEncodedTransactions[1],
            RLPEncodedTransactionsUtil.rlpEncodedTransactions[2],
            RLPEncodedTransactionsUtil.rlpEncodedTransactions[3],
            RLPEncodedTransactionsUtil.rlpEncodedTransactions[4],
            RLPEncodedTransactionsUtil.rlpEncodedTransactions[5]
        );
        bytes memory result = new bytes(1);
        result[0] = 0; // tx version
        return bytes.concat(result, txs);
    }
}
